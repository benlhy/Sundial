
Sundial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001834  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001940  08001940  00011940  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000000c  0800198c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000088  0800198c  00020088  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012fd8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002968  00000000  00000000  0003300d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005955  00000000  00000000  00035975  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000878  00000000  00000000  0003b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b48  00000000  00000000  0003bb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004ed4  00000000  00000000  0003c690  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003347  00000000  00000000  00041564  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000448ab  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000175c  00000000  00000000  00044928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001928 	.word	0x08001928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001928 	.word	0x08001928

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f880 	bl	8000268 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fabe 	bl	800172c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000030 	.word	0x20000030
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000030 	.word	0x20000030

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000268:	3801      	subs	r0, #1
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d20a      	bcs.n	8000286 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000286:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000298:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800029a:	4616      	mov	r6, r2
 800029c:	4b65      	ldr	r3, [pc, #404]	; (8000434 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800029e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000444 <HAL_GPIO_Init+0x1b0>
 80002a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000448 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d17f      	bne.n	80003b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002b8:	684d      	ldr	r5, [r1, #4]
 80002ba:	2d12      	cmp	r5, #18
 80002bc:	f000 80af 	beq.w	800041e <HAL_GPIO_Init+0x18a>
 80002c0:	f200 8088 	bhi.w	80003d4 <HAL_GPIO_Init+0x140>
 80002c4:	2d02      	cmp	r5, #2
 80002c6:	f000 80a7 	beq.w	8000418 <HAL_GPIO_Init+0x184>
 80002ca:	d87c      	bhi.n	80003c6 <HAL_GPIO_Init+0x132>
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	f000 808e 	beq.w	80003ee <HAL_GPIO_Init+0x15a>
 80002d2:	2d01      	cmp	r5, #1
 80002d4:	f000 809e 	beq.w	8000414 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002dc:	2cff      	cmp	r4, #255	; 0xff
 80002de:	bf93      	iteet	ls
 80002e0:	4682      	movls	sl, r0
 80002e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002e6:	3d08      	subhi	r5, #8
 80002e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80002ec:	bf92      	itee	ls
 80002ee:	00b5      	lslls	r5, r6, #2
 80002f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f6:	fa09 f805 	lsl.w	r8, r9, r5
 80002fa:	ea2b 0808 	bic.w	r8, fp, r8
 80002fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000302:	bf88      	it	hi
 8000304:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	ea48 0505 	orr.w	r5, r8, r5
 800030c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000310:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000314:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000318:	d04e      	beq.n	80003b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800031a:	4d47      	ldr	r5, [pc, #284]	; (8000438 <HAL_GPIO_Init+0x1a4>)
 800031c:	4f46      	ldr	r7, [pc, #280]	; (8000438 <HAL_GPIO_Init+0x1a4>)
 800031e:	69ad      	ldr	r5, [r5, #24]
 8000320:	f026 0803 	bic.w	r8, r6, #3
 8000324:	f045 0501 	orr.w	r5, r5, #1
 8000328:	61bd      	str	r5, [r7, #24]
 800032a:	69bd      	ldr	r5, [r7, #24]
 800032c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000330:	f005 0501 	and.w	r5, r5, #1
 8000334:	9501      	str	r5, [sp, #4]
 8000336:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800033a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000340:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000344:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000348:	fa09 f90b 	lsl.w	r9, r9, fp
 800034c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000350:	4d3a      	ldr	r5, [pc, #232]	; (800043c <HAL_GPIO_Init+0x1a8>)
 8000352:	42a8      	cmp	r0, r5
 8000354:	d068      	beq.n	8000428 <HAL_GPIO_Init+0x194>
 8000356:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800035a:	42a8      	cmp	r0, r5
 800035c:	d066      	beq.n	800042c <HAL_GPIO_Init+0x198>
 800035e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000362:	42a8      	cmp	r0, r5
 8000364:	d064      	beq.n	8000430 <HAL_GPIO_Init+0x19c>
 8000366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036a:	42a8      	cmp	r0, r5
 800036c:	bf0c      	ite	eq
 800036e:	2503      	moveq	r5, #3
 8000370:	2504      	movne	r5, #4
 8000372:	fa05 f50b 	lsl.w	r5, r5, fp
 8000376:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800037a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800037e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000380:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000384:	bf14      	ite	ne
 8000386:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000388:	43a5      	biceq	r5, r4
 800038a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800038c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800038e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000392:	bf14      	ite	ne
 8000394:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000396:	43a5      	biceq	r5, r4
 8000398:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800039a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800039c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003a0:	bf14      	ite	ne
 80003a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003a4:	43a5      	biceq	r5, r4
 80003a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ae:	bf14      	ite	ne
 80003b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003b2:	ea25 0404 	biceq.w	r4, r5, r4
 80003b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003b8:	3601      	adds	r6, #1
 80003ba:	2e10      	cmp	r6, #16
 80003bc:	f47f af73 	bne.w	80002a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003c0:	b003      	add	sp, #12
 80003c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003c6:	2d03      	cmp	r5, #3
 80003c8:	d022      	beq.n	8000410 <HAL_GPIO_Init+0x17c>
 80003ca:	2d11      	cmp	r5, #17
 80003cc:	d184      	bne.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ce:	68ca      	ldr	r2, [r1, #12]
 80003d0:	3204      	adds	r2, #4
          break;
 80003d2:	e781      	b.n	80002d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003d4:	4f1a      	ldr	r7, [pc, #104]	; (8000440 <HAL_GPIO_Init+0x1ac>)
 80003d6:	42bd      	cmp	r5, r7
 80003d8:	d009      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 80003da:	d812      	bhi.n	8000402 <HAL_GPIO_Init+0x16e>
 80003dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800044c <HAL_GPIO_Init+0x1b8>
 80003e0:	454d      	cmp	r5, r9
 80003e2:	d004      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 80003e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003e8:	454d      	cmp	r5, r9
 80003ea:	f47f af75 	bne.w	80002d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003ee:	688a      	ldr	r2, [r1, #8]
 80003f0:	b1c2      	cbz	r2, 8000424 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003f4:	bf0c      	ite	eq
 80003f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003fe:	2208      	movs	r2, #8
 8000400:	e76a      	b.n	80002d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000402:	4575      	cmp	r5, lr
 8000404:	d0f3      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 8000406:	4565      	cmp	r5, ip
 8000408:	d0f1      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 800040a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000450 <HAL_GPIO_Init+0x1bc>
 800040e:	e7eb      	b.n	80003e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000410:	2200      	movs	r2, #0
 8000412:	e761      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000414:	68ca      	ldr	r2, [r1, #12]
          break;
 8000416:	e75f      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000418:	68ca      	ldr	r2, [r1, #12]
 800041a:	3208      	adds	r2, #8
          break;
 800041c:	e75c      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800041e:	68ca      	ldr	r2, [r1, #12]
 8000420:	320c      	adds	r2, #12
          break;
 8000422:	e759      	b.n	80002d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000424:	2204      	movs	r2, #4
 8000426:	e757      	b.n	80002d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000428:	2500      	movs	r5, #0
 800042a:	e7a2      	b.n	8000372 <HAL_GPIO_Init+0xde>
 800042c:	2501      	movs	r5, #1
 800042e:	e7a0      	b.n	8000372 <HAL_GPIO_Init+0xde>
 8000430:	2502      	movs	r5, #2
 8000432:	e79e      	b.n	8000372 <HAL_GPIO_Init+0xde>
 8000434:	40010400 	.word	0x40010400
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800
 8000440:	10210000 	.word	0x10210000
 8000444:	10310000 	.word	0x10310000
 8000448:	10320000 	.word	0x10320000
 800044c:	10110000 	.word	0x10110000
 8000450:	10220000 	.word	0x10220000

08000454 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000454:	2201      	movs	r2, #1
 8000456:	4b01      	ldr	r3, [pc, #4]	; (800045c <HAL_PWR_EnableBkUpAccess+0x8>)
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	4770      	bx	lr
 800045c:	420e0020 	.word	0x420e0020

08000460 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000460:	6803      	ldr	r3, [r0, #0]
{
 8000462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000466:	07db      	lsls	r3, r3, #31
{
 8000468:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800046a:	d410      	bmi.n	800048e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800046c:	682b      	ldr	r3, [r5, #0]
 800046e:	079f      	lsls	r7, r3, #30
 8000470:	d45e      	bmi.n	8000530 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000472:	682b      	ldr	r3, [r5, #0]
 8000474:	0719      	lsls	r1, r3, #28
 8000476:	f100 8095 	bmi.w	80005a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800047a:	682b      	ldr	r3, [r5, #0]
 800047c:	075a      	lsls	r2, r3, #29
 800047e:	f100 80bf 	bmi.w	8000600 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000482:	69ea      	ldr	r2, [r5, #28]
 8000484:	2a00      	cmp	r2, #0
 8000486:	f040 812d 	bne.w	80006e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800048a:	2000      	movs	r0, #0
 800048c:	e014      	b.n	80004b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800048e:	4c90      	ldr	r4, [pc, #576]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 8000490:	6863      	ldr	r3, [r4, #4]
 8000492:	f003 030c 	and.w	r3, r3, #12
 8000496:	2b04      	cmp	r3, #4
 8000498:	d007      	beq.n	80004aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800049a:	6863      	ldr	r3, [r4, #4]
 800049c:	f003 030c 	and.w	r3, r3, #12
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	d10c      	bne.n	80004be <HAL_RCC_OscConfig+0x5e>
 80004a4:	6863      	ldr	r3, [r4, #4]
 80004a6:	03de      	lsls	r6, r3, #15
 80004a8:	d509      	bpl.n	80004be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004aa:	6823      	ldr	r3, [r4, #0]
 80004ac:	039c      	lsls	r4, r3, #14
 80004ae:	d5dd      	bpl.n	800046c <HAL_RCC_OscConfig+0xc>
 80004b0:	686b      	ldr	r3, [r5, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1da      	bne.n	800046c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004b6:	2001      	movs	r0, #1
}
 80004b8:	b002      	add	sp, #8
 80004ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004be:	686b      	ldr	r3, [r5, #4]
 80004c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c4:	d110      	bne.n	80004e8 <HAL_RCC_OscConfig+0x88>
 80004c6:	6823      	ldr	r3, [r4, #0]
 80004c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004ce:	f7ff fe7f 	bl	80001d0 <HAL_GetTick>
 80004d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	0398      	lsls	r0, r3, #14
 80004d8:	d4c8      	bmi.n	800046c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004da:	f7ff fe79 	bl	80001d0 <HAL_GetTick>
 80004de:	1b80      	subs	r0, r0, r6
 80004e0:	2864      	cmp	r0, #100	; 0x64
 80004e2:	d9f7      	bls.n	80004d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004e4:	2003      	movs	r0, #3
 80004e6:	e7e7      	b.n	80004b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e8:	b99b      	cbnz	r3, 8000512 <HAL_RCC_OscConfig+0xb2>
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004f0:	6023      	str	r3, [r4, #0]
 80004f2:	6823      	ldr	r3, [r4, #0]
 80004f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004fa:	f7ff fe69 	bl	80001d0 <HAL_GetTick>
 80004fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000500:	6823      	ldr	r3, [r4, #0]
 8000502:	0399      	lsls	r1, r3, #14
 8000504:	d5b2      	bpl.n	800046c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000506:	f7ff fe63 	bl	80001d0 <HAL_GetTick>
 800050a:	1b80      	subs	r0, r0, r6
 800050c:	2864      	cmp	r0, #100	; 0x64
 800050e:	d9f7      	bls.n	8000500 <HAL_RCC_OscConfig+0xa0>
 8000510:	e7e8      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	d103      	bne.n	8000522 <HAL_RCC_OscConfig+0xc2>
 800051a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051e:	6023      	str	r3, [r4, #0]
 8000520:	e7d1      	b.n	80004c6 <HAL_RCC_OscConfig+0x66>
 8000522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000526:	6023      	str	r3, [r4, #0]
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800052e:	e7cd      	b.n	80004cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000530:	4c67      	ldr	r4, [pc, #412]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 8000532:	6863      	ldr	r3, [r4, #4]
 8000534:	f013 0f0c 	tst.w	r3, #12
 8000538:	d007      	beq.n	800054a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800053a:	6863      	ldr	r3, [r4, #4]
 800053c:	f003 030c 	and.w	r3, r3, #12
 8000540:	2b08      	cmp	r3, #8
 8000542:	d110      	bne.n	8000566 <HAL_RCC_OscConfig+0x106>
 8000544:	6863      	ldr	r3, [r4, #4]
 8000546:	03da      	lsls	r2, r3, #15
 8000548:	d40d      	bmi.n	8000566 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	079b      	lsls	r3, r3, #30
 800054e:	d502      	bpl.n	8000556 <HAL_RCC_OscConfig+0xf6>
 8000550:	692b      	ldr	r3, [r5, #16]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d1af      	bne.n	80004b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	696a      	ldr	r2, [r5, #20]
 800055a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800055e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000562:	6023      	str	r3, [r4, #0]
 8000564:	e785      	b.n	8000472 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000566:	692a      	ldr	r2, [r5, #16]
 8000568:	4b5a      	ldr	r3, [pc, #360]	; (80006d4 <HAL_RCC_OscConfig+0x274>)
 800056a:	b16a      	cbz	r2, 8000588 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000570:	f7ff fe2e 	bl	80001d0 <HAL_GetTick>
 8000574:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	079f      	lsls	r7, r3, #30
 800057a:	d4ec      	bmi.n	8000556 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800057c:	f7ff fe28 	bl	80001d0 <HAL_GetTick>
 8000580:	1b80      	subs	r0, r0, r6
 8000582:	2802      	cmp	r0, #2
 8000584:	d9f7      	bls.n	8000576 <HAL_RCC_OscConfig+0x116>
 8000586:	e7ad      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000588:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800058a:	f7ff fe21 	bl	80001d0 <HAL_GetTick>
 800058e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	0798      	lsls	r0, r3, #30
 8000594:	f57f af6d 	bpl.w	8000472 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000598:	f7ff fe1a 	bl	80001d0 <HAL_GetTick>
 800059c:	1b80      	subs	r0, r0, r6
 800059e:	2802      	cmp	r0, #2
 80005a0:	d9f6      	bls.n	8000590 <HAL_RCC_OscConfig+0x130>
 80005a2:	e79f      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005a4:	69aa      	ldr	r2, [r5, #24]
 80005a6:	4c4a      	ldr	r4, [pc, #296]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 80005a8:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <HAL_RCC_OscConfig+0x278>)
 80005aa:	b1da      	cbz	r2, 80005e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005b0:	f7ff fe0e 	bl	80001d0 <HAL_GetTick>
 80005b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005b8:	079b      	lsls	r3, r3, #30
 80005ba:	d50d      	bpl.n	80005d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005c0:	4b46      	ldr	r3, [pc, #280]	; (80006dc <HAL_RCC_OscConfig+0x27c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80005c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005cc:	9b01      	ldr	r3, [sp, #4]
 80005ce:	1e5a      	subs	r2, r3, #1
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f9      	bne.n	80005ca <HAL_RCC_OscConfig+0x16a>
 80005d6:	e750      	b.n	800047a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005d8:	f7ff fdfa 	bl	80001d0 <HAL_GetTick>
 80005dc:	1b80      	subs	r0, r0, r6
 80005de:	2802      	cmp	r0, #2
 80005e0:	d9e9      	bls.n	80005b6 <HAL_RCC_OscConfig+0x156>
 80005e2:	e77f      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005e6:	f7ff fdf3 	bl	80001d0 <HAL_GetTick>
 80005ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005ee:	079f      	lsls	r7, r3, #30
 80005f0:	f57f af43 	bpl.w	800047a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005f4:	f7ff fdec 	bl	80001d0 <HAL_GetTick>
 80005f8:	1b80      	subs	r0, r0, r6
 80005fa:	2802      	cmp	r0, #2
 80005fc:	d9f6      	bls.n	80005ec <HAL_RCC_OscConfig+0x18c>
 80005fe:	e771      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000600:	4c33      	ldr	r4, [pc, #204]	; (80006d0 <HAL_RCC_OscConfig+0x270>)
 8000602:	69e3      	ldr	r3, [r4, #28]
 8000604:	00d8      	lsls	r0, r3, #3
 8000606:	d424      	bmi.n	8000652 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000608:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	69e3      	ldr	r3, [r4, #28]
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61e3      	str	r3, [r4, #28]
 8000612:	69e3      	ldr	r3, [r4, #28]
 8000614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800061c:	4e30      	ldr	r6, [pc, #192]	; (80006e0 <HAL_RCC_OscConfig+0x280>)
 800061e:	6833      	ldr	r3, [r6, #0]
 8000620:	05d9      	lsls	r1, r3, #23
 8000622:	d518      	bpl.n	8000656 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000624:	68eb      	ldr	r3, [r5, #12]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d126      	bne.n	8000678 <HAL_RCC_OscConfig+0x218>
 800062a:	6a23      	ldr	r3, [r4, #32]
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000632:	f7ff fdcd 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000636:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800063a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800063c:	6a23      	ldr	r3, [r4, #32]
 800063e:	079b      	lsls	r3, r3, #30
 8000640:	d53f      	bpl.n	80006c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000642:	2f00      	cmp	r7, #0
 8000644:	f43f af1d 	beq.w	8000482 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000648:	69e3      	ldr	r3, [r4, #28]
 800064a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800064e:	61e3      	str	r3, [r4, #28]
 8000650:	e717      	b.n	8000482 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000652:	2700      	movs	r7, #0
 8000654:	e7e2      	b.n	800061c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000656:	6833      	ldr	r3, [r6, #0]
 8000658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800065e:	f7ff fdb7 	bl	80001d0 <HAL_GetTick>
 8000662:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000664:	6833      	ldr	r3, [r6, #0]
 8000666:	05da      	lsls	r2, r3, #23
 8000668:	d4dc      	bmi.n	8000624 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800066a:	f7ff fdb1 	bl	80001d0 <HAL_GetTick>
 800066e:	eba0 0008 	sub.w	r0, r0, r8
 8000672:	2864      	cmp	r0, #100	; 0x64
 8000674:	d9f6      	bls.n	8000664 <HAL_RCC_OscConfig+0x204>
 8000676:	e735      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000678:	b9ab      	cbnz	r3, 80006a6 <HAL_RCC_OscConfig+0x246>
 800067a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800067c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000680:	f023 0301 	bic.w	r3, r3, #1
 8000684:	6223      	str	r3, [r4, #32]
 8000686:	6a23      	ldr	r3, [r4, #32]
 8000688:	f023 0304 	bic.w	r3, r3, #4
 800068c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800068e:	f7ff fd9f 	bl	80001d0 <HAL_GetTick>
 8000692:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000694:	6a23      	ldr	r3, [r4, #32]
 8000696:	0798      	lsls	r0, r3, #30
 8000698:	d5d3      	bpl.n	8000642 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800069a:	f7ff fd99 	bl	80001d0 <HAL_GetTick>
 800069e:	1b80      	subs	r0, r0, r6
 80006a0:	4540      	cmp	r0, r8
 80006a2:	d9f7      	bls.n	8000694 <HAL_RCC_OscConfig+0x234>
 80006a4:	e71e      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	6a23      	ldr	r3, [r4, #32]
 80006aa:	d103      	bne.n	80006b4 <HAL_RCC_OscConfig+0x254>
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6223      	str	r3, [r4, #32]
 80006b2:	e7ba      	b.n	800062a <HAL_RCC_OscConfig+0x1ca>
 80006b4:	f023 0301 	bic.w	r3, r3, #1
 80006b8:	6223      	str	r3, [r4, #32]
 80006ba:	6a23      	ldr	r3, [r4, #32]
 80006bc:	f023 0304 	bic.w	r3, r3, #4
 80006c0:	e7b6      	b.n	8000630 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006c2:	f7ff fd85 	bl	80001d0 <HAL_GetTick>
 80006c6:	eba0 0008 	sub.w	r0, r0, r8
 80006ca:	42b0      	cmp	r0, r6
 80006cc:	d9b6      	bls.n	800063c <HAL_RCC_OscConfig+0x1dc>
 80006ce:	e709      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
 80006d0:	40021000 	.word	0x40021000
 80006d4:	42420000 	.word	0x42420000
 80006d8:	42420480 	.word	0x42420480
 80006dc:	20000008 	.word	0x20000008
 80006e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006e4:	4c22      	ldr	r4, [pc, #136]	; (8000770 <HAL_RCC_OscConfig+0x310>)
 80006e6:	6863      	ldr	r3, [r4, #4]
 80006e8:	f003 030c 	and.w	r3, r3, #12
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	f43f aee2 	beq.w	80004b6 <HAL_RCC_OscConfig+0x56>
 80006f2:	2300      	movs	r3, #0
 80006f4:	4e1f      	ldr	r6, [pc, #124]	; (8000774 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006fa:	d12b      	bne.n	8000754 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80006fc:	f7ff fd68 	bl	80001d0 <HAL_GetTick>
 8000700:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	0199      	lsls	r1, r3, #6
 8000706:	d41f      	bmi.n	8000748 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000708:	6a2b      	ldr	r3, [r5, #32]
 800070a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800070e:	d105      	bne.n	800071c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000710:	6862      	ldr	r2, [r4, #4]
 8000712:	68a9      	ldr	r1, [r5, #8]
 8000714:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000718:	430a      	orrs	r2, r1
 800071a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800071c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800071e:	6862      	ldr	r2, [r4, #4]
 8000720:	430b      	orrs	r3, r1
 8000722:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000726:	4313      	orrs	r3, r2
 8000728:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800072a:	2301      	movs	r3, #1
 800072c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800072e:	f7ff fd4f 	bl	80001d0 <HAL_GetTick>
 8000732:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	019a      	lsls	r2, r3, #6
 8000738:	f53f aea7 	bmi.w	800048a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800073c:	f7ff fd48 	bl	80001d0 <HAL_GetTick>
 8000740:	1b40      	subs	r0, r0, r5
 8000742:	2802      	cmp	r0, #2
 8000744:	d9f6      	bls.n	8000734 <HAL_RCC_OscConfig+0x2d4>
 8000746:	e6cd      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000748:	f7ff fd42 	bl	80001d0 <HAL_GetTick>
 800074c:	1bc0      	subs	r0, r0, r7
 800074e:	2802      	cmp	r0, #2
 8000750:	d9d7      	bls.n	8000702 <HAL_RCC_OscConfig+0x2a2>
 8000752:	e6c7      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000754:	f7ff fd3c 	bl	80001d0 <HAL_GetTick>
 8000758:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800075a:	6823      	ldr	r3, [r4, #0]
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	f57f ae94 	bpl.w	800048a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000762:	f7ff fd35 	bl	80001d0 <HAL_GetTick>
 8000766:	1b40      	subs	r0, r0, r5
 8000768:	2802      	cmp	r0, #2
 800076a:	d9f6      	bls.n	800075a <HAL_RCC_OscConfig+0x2fa>
 800076c:	e6ba      	b.n	80004e4 <HAL_RCC_OscConfig+0x84>
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	42420060 	.word	0x42420060

08000778 <HAL_RCC_GetSysClockFreq>:
{
 8000778:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800077c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800077e:	ac02      	add	r4, sp, #8
 8000780:	f103 0510 	add.w	r5, r3, #16
 8000784:	4622      	mov	r2, r4
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	6859      	ldr	r1, [r3, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	c203      	stmia	r2!, {r0, r1}
 800078e:	42ab      	cmp	r3, r5
 8000790:	4614      	mov	r4, r2
 8000792:	d1f7      	bne.n	8000784 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000794:	2301      	movs	r3, #1
 8000796:	f88d 3004 	strb.w	r3, [sp, #4]
 800079a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800079c:	4911      	ldr	r1, [pc, #68]	; (80007e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800079e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007a4:	f003 020c 	and.w	r2, r3, #12
 80007a8:	2a08      	cmp	r2, #8
 80007aa:	d117      	bne.n	80007dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007b0:	a806      	add	r0, sp, #24
 80007b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ba:	d50c      	bpl.n	80007d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007c6:	aa06      	add	r2, sp, #24
 80007c8:	4413      	add	r3, r2
 80007ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007d2:	b007      	add	sp, #28
 80007d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <HAL_RCC_GetSysClockFreq+0x74>)
 80007d8:	4350      	muls	r0, r2
 80007da:	e7fa      	b.n	80007d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80007de:	e7f8      	b.n	80007d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80007e0:	08001940 	.word	0x08001940
 80007e4:	40021000 	.word	0x40021000
 80007e8:	007a1200 	.word	0x007a1200
 80007ec:	003d0900 	.word	0x003d0900

080007f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f0:	4a54      	ldr	r2, [pc, #336]	; (8000944 <HAL_RCC_ClockConfig+0x154>)
{
 80007f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f6:	6813      	ldr	r3, [r2, #0]
{
 80007f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	428b      	cmp	r3, r1
{
 8000800:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000802:	d32a      	bcc.n	800085a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000804:	6829      	ldr	r1, [r5, #0]
 8000806:	078c      	lsls	r4, r1, #30
 8000808:	d434      	bmi.n	8000874 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800080a:	07ca      	lsls	r2, r1, #31
 800080c:	d447      	bmi.n	800089e <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800080e:	4a4d      	ldr	r2, [pc, #308]	; (8000944 <HAL_RCC_ClockConfig+0x154>)
 8000810:	6813      	ldr	r3, [r2, #0]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	429e      	cmp	r6, r3
 8000818:	f0c0 8082 	bcc.w	8000920 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800081c:	682a      	ldr	r2, [r5, #0]
 800081e:	4c4a      	ldr	r4, [pc, #296]	; (8000948 <HAL_RCC_ClockConfig+0x158>)
 8000820:	f012 0f04 	tst.w	r2, #4
 8000824:	f040 8087 	bne.w	8000936 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000828:	0713      	lsls	r3, r2, #28
 800082a:	d506      	bpl.n	800083a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	692a      	ldr	r2, [r5, #16]
 8000830:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000834:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000838:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800083a:	f7ff ff9d 	bl	8000778 <HAL_RCC_GetSysClockFreq>
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	4a42      	ldr	r2, [pc, #264]	; (800094c <HAL_RCC_ClockConfig+0x15c>)
 8000842:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000846:	5cd3      	ldrb	r3, [r2, r3]
 8000848:	40d8      	lsrs	r0, r3
 800084a:	4b41      	ldr	r3, [pc, #260]	; (8000950 <HAL_RCC_ClockConfig+0x160>)
 800084c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fc7c 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000854:	2000      	movs	r0, #0
}
 8000856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800085a:	6813      	ldr	r3, [r2, #0]
 800085c:	f023 0307 	bic.w	r3, r3, #7
 8000860:	430b      	orrs	r3, r1
 8000862:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	4299      	cmp	r1, r3
 800086c:	d0ca      	beq.n	8000804 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800086e:	2001      	movs	r0, #1
 8000870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000874:	4b34      	ldr	r3, [pc, #208]	; (8000948 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000876:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800087a:	bf1e      	ittt	ne
 800087c:	685a      	ldrne	r2, [r3, #4]
 800087e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000882:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000884:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000886:	bf42      	ittt	mi
 8000888:	685a      	ldrmi	r2, [r3, #4]
 800088a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800088e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	68a8      	ldr	r0, [r5, #8]
 8000894:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000898:	4302      	orrs	r2, r0
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	e7b5      	b.n	800080a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800089e:	686a      	ldr	r2, [r5, #4]
 80008a0:	4c29      	ldr	r4, [pc, #164]	; (8000948 <HAL_RCC_ClockConfig+0x158>)
 80008a2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008a6:	d11c      	bne.n	80008e2 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ac:	d0df      	beq.n	800086e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ae:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008b0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008b4:	f023 0303 	bic.w	r3, r3, #3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008bc:	f7ff fc88 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008c2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d114      	bne.n	80008f2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d09d      	beq.n	800080e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d2:	f7ff fc7d 	bl	80001d0 <HAL_GetTick>
 80008d6:	1bc0      	subs	r0, r0, r7
 80008d8:	4540      	cmp	r0, r8
 80008da:	d9f5      	bls.n	80008c8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80008dc:	2003      	movs	r0, #3
 80008de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008e2:	2a02      	cmp	r2, #2
 80008e4:	d102      	bne.n	80008ec <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008ea:	e7df      	b.n	80008ac <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ec:	f013 0f02 	tst.w	r3, #2
 80008f0:	e7dc      	b.n	80008ac <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d10f      	bne.n	8000916 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008f6:	6863      	ldr	r3, [r4, #4]
 80008f8:	f003 030c 	and.w	r3, r3, #12
 80008fc:	2b08      	cmp	r3, #8
 80008fe:	d086      	beq.n	800080e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000900:	f7ff fc66 	bl	80001d0 <HAL_GetTick>
 8000904:	1bc0      	subs	r0, r0, r7
 8000906:	4540      	cmp	r0, r8
 8000908:	d9f5      	bls.n	80008f6 <HAL_RCC_ClockConfig+0x106>
 800090a:	e7e7      	b.n	80008dc <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800090c:	f7ff fc60 	bl	80001d0 <HAL_GetTick>
 8000910:	1bc0      	subs	r0, r0, r7
 8000912:	4540      	cmp	r0, r8
 8000914:	d8e2      	bhi.n	80008dc <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000916:	6863      	ldr	r3, [r4, #4]
 8000918:	f013 0f0c 	tst.w	r3, #12
 800091c:	d1f6      	bne.n	800090c <HAL_RCC_ClockConfig+0x11c>
 800091e:	e776      	b.n	800080e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	f023 0307 	bic.w	r3, r3, #7
 8000926:	4333      	orrs	r3, r6
 8000928:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	429e      	cmp	r6, r3
 8000932:	d19c      	bne.n	800086e <HAL_RCC_ClockConfig+0x7e>
 8000934:	e772      	b.n	800081c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000936:	6863      	ldr	r3, [r4, #4]
 8000938:	68e9      	ldr	r1, [r5, #12]
 800093a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800093e:	430b      	orrs	r3, r1
 8000940:	6063      	str	r3, [r4, #4]
 8000942:	e771      	b.n	8000828 <HAL_RCC_ClockConfig+0x38>
 8000944:	40022000 	.word	0x40022000
 8000948:	40021000 	.word	0x40021000
 800094c:	08001960 	.word	0x08001960
 8000950:	20000008 	.word	0x20000008

08000954 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000962:	6810      	ldr	r0, [r2, #0]
} 
 8000964:	40d8      	lsrs	r0, r3
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	08001970 	.word	0x08001970
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000974:	6803      	ldr	r3, [r0, #0]
{
 8000976:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800097a:	07d9      	lsls	r1, r3, #31
{
 800097c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800097e:	d520      	bpl.n	80009c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000980:	4c35      	ldr	r4, [pc, #212]	; (8000a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000982:	69e3      	ldr	r3, [r4, #28]
 8000984:	00da      	lsls	r2, r3, #3
 8000986:	d432      	bmi.n	80009ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000988:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	69e3      	ldr	r3, [r4, #28]
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	61e3      	str	r3, [r4, #28]
 8000992:	69e3      	ldr	r3, [r4, #28]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800099c:	4e2f      	ldr	r6, [pc, #188]	; (8000a5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800099e:	6833      	ldr	r3, [r6, #0]
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	d526      	bpl.n	80009f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80009a4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80009a6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80009aa:	d136      	bne.n	8000a1a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80009ac:	6a23      	ldr	r3, [r4, #32]
 80009ae:	686a      	ldr	r2, [r5, #4]
 80009b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009b4:	4313      	orrs	r3, r2
 80009b6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009b8:	b11f      	cbz	r7, 80009c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ba:	69e3      	ldr	r3, [r4, #28]
 80009bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80009c2:	6828      	ldr	r0, [r5, #0]
 80009c4:	0783      	lsls	r3, r0, #30
 80009c6:	d506      	bpl.n	80009d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80009c8:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009ca:	68a9      	ldr	r1, [r5, #8]
 80009cc:	6853      	ldr	r3, [r2, #4]
 80009ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d2:	430b      	orrs	r3, r1
 80009d4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80009d6:	f010 0010 	ands.w	r0, r0, #16
 80009da:	d01b      	beq.n	8000a14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80009dc:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009de:	68e9      	ldr	r1, [r5, #12]
 80009e0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80009e2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80009e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6053      	str	r3, [r2, #4]
 80009ec:	e012      	b.n	8000a14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80009ee:	2700      	movs	r7, #0
 80009f0:	e7d4      	b.n	800099c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009f2:	6833      	ldr	r3, [r6, #0]
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009fa:	f7ff fbe9 	bl	80001d0 <HAL_GetTick>
 80009fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a00:	6833      	ldr	r3, [r6, #0]
 8000a02:	05d8      	lsls	r0, r3, #23
 8000a04:	d4ce      	bmi.n	80009a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a06:	f7ff fbe3 	bl	80001d0 <HAL_GetTick>
 8000a0a:	eba0 0008 	sub.w	r0, r0, r8
 8000a0e:	2864      	cmp	r0, #100	; 0x64
 8000a10:	d9f6      	bls.n	8000a00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000a12:	2003      	movs	r0, #3
}
 8000a14:	b002      	add	sp, #8
 8000a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a1a:	686a      	ldr	r2, [r5, #4]
 8000a1c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d0c3      	beq.n	80009ac <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a24:	2001      	movs	r0, #1
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a28:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a2a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a2c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a32:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000a34:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000a36:	07d9      	lsls	r1, r3, #31
 8000a38:	d5b8      	bpl.n	80009ac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000a3a:	f7ff fbc9 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a3e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000a42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a44:	6a23      	ldr	r3, [r4, #32]
 8000a46:	079a      	lsls	r2, r3, #30
 8000a48:	d4b0      	bmi.n	80009ac <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a4a:	f7ff fbc1 	bl	80001d0 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	4540      	cmp	r0, r8
 8000a52:	d9f7      	bls.n	8000a44 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000a54:	e7dd      	b.n	8000a12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40007000 	.word	0x40007000
 8000a60:	42420440 	.word	0x42420440

08000a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a68:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000a6a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a6c:	ad02      	add	r5, sp, #8
 8000a6e:	f103 0610 	add.w	r6, r3, #16
 8000a72:	462a      	mov	r2, r5
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	6859      	ldr	r1, [r3, #4]
 8000a78:	3308      	adds	r3, #8
 8000a7a:	c203      	stmia	r2!, {r0, r1}
 8000a7c:	42b3      	cmp	r3, r6
 8000a7e:	4615      	mov	r5, r2
 8000a80:	d1f7      	bne.n	8000a72 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a82:	2301      	movs	r3, #1
 8000a84:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a88:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000a8a:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a8c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000a90:	d047      	beq.n	8000b22 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000a92:	2c10      	cmp	r4, #16
 8000a94:	d017      	beq.n	8000ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000a96:	2c01      	cmp	r4, #1
 8000a98:	d14f      	bne.n	8000b3a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000a9a:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000a9e:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000aa0:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000aa2:	4019      	ands	r1, r3
 8000aa4:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000aa8:	d044      	beq.n	8000b34 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ab2:	d12d      	bne.n	8000b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000ab4:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000ab8:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000aba:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000abe:	bf08      	it	eq
 8000ac0:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000ac2:	b006      	add	sp, #24
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000ac8:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000ad0:	d0f7      	beq.n	8000ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ad2:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000ad6:	a806      	add	r0, sp, #24
 8000ad8:	4402      	add	r2, r0
 8000ada:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ade:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ae0:	bf41      	itttt	mi
 8000ae2:	685a      	ldrmi	r2, [r3, #4]
 8000ae4:	a906      	addmi	r1, sp, #24
 8000ae6:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000aea:	1852      	addmi	r2, r2, r1
 8000aec:	bf44      	itt	mi
 8000aee:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000af2:	4a15      	ldrmi	r2, [pc, #84]	; (8000b48 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000af4:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000af6:	bf4c      	ite	mi
 8000af8:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000afc:	4a13      	ldrpl	r2, [pc, #76]	; (8000b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000afe:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b00:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b04:	d4dd      	bmi.n	8000ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000b06:	2303      	movs	r3, #3
 8000b08:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b0a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b0e:	e7d8      	b.n	8000ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b14:	d111      	bne.n	8000b3a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000b16:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000b18:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000b1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b20:	e7cd      	b.n	8000abe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b22:	f7ff ff17 	bl	8000954 <HAL_RCC_GetPCLK2Freq>
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	e7ea      	b.n	8000b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000b34:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b38:	e7c3      	b.n	8000ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	e7c1      	b.n	8000ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000b3e:	bf00      	nop
 8000b40:	08001950 	.word	0x08001950
 8000b44:	40021000 	.word	0x40021000
 8000b48:	007a1200 	.word	0x007a1200
 8000b4c:	003d0900 	.word	0x003d0900

08000b50 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b50:	6803      	ldr	r3, [r0, #0]
{
 8000b52:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b54:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000b56:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b58:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000b5a:	b295      	uxth	r5, r2
 8000b5c:	b28c      	uxth	r4, r1
 8000b5e:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000b60:	bf1d      	ittte	ne
 8000b62:	69d8      	ldrne	r0, [r3, #28]
 8000b64:	b280      	uxthne	r0, r0
 8000b66:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000b6a:	b280      	uxtheq	r0, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000b72:	bd30      	pop	{r4, r5, pc}

08000b74 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000b74:	6803      	ldr	r3, [r0, #0]
 8000b76:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8000b7a:	b29b      	uxth	r3, r3
}
 8000b7c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b80:	4770      	bx	lr

08000b82 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8000b82:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8000b84:	2809      	cmp	r0, #9
 8000b86:	d803      	bhi.n	8000b90 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8000b88:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8000b8c:	b2c0      	uxtb	r0, r0
 8000b8e:	4770      	bx	lr
    Value -= 10U;
 8000b90:	380a      	subs	r0, #10
    bcdhigh++;
 8000b92:	3301      	adds	r3, #1
    Value -= 10U;
 8000b94:	b2c0      	uxtb	r0, r0
 8000b96:	e7f5      	b.n	8000b84 <RTC_ByteToBcd2+0x2>

08000b98 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8000b98:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8000b9a:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000b9c:	f000 000f 	and.w	r0, r0, #15
 8000ba0:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000ba4:	b2c0      	uxtb	r0, r0
 8000ba6:	4770      	bx	lr

08000ba8 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8000ba8:	2902      	cmp	r1, #2
{
 8000baa:	b570      	push	{r4, r5, r6, lr}
 8000bac:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8000bb0:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8000bb4:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8000bb8:	d81a      	bhi.n	8000bf0 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8000bba:	434b      	muls	r3, r1
 8000bbc:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8000bc0:	fbb3 f0f6 	udiv	r0, r3, r6
 8000bc4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bc8:	fbb4 f3f3 	udiv	r3, r4, r3
 8000bcc:	3204      	adds	r2, #4
 8000bce:	442a      	add	r2, r5
 8000bd0:	4410      	add	r0, r2
 8000bd2:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8000bd6:	4418      	add	r0, r3
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	fbb4 f4f3 	udiv	r4, r4, r3
 8000bde:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000be0:	2307      	movs	r3, #7
 8000be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000be6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000bea:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8000bec:	b2c0      	uxtb	r0, r0
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000bf0:	fb03 f001 	mul.w	r0, r3, r1
 8000bf4:	fbb0 f0f6 	udiv	r0, r0, r6
 8000bf8:	3202      	adds	r2, #2
 8000bfa:	442a      	add	r2, r5
 8000bfc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c00:	4410      	add	r0, r2
 8000c02:	2264      	movs	r2, #100	; 0x64
 8000c04:	fbb5 f3f3 	udiv	r3, r5, r3
 8000c08:	fbb5 f2f2 	udiv	r2, r5, r2
 8000c0c:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8000c10:	4418      	add	r0, r3
 8000c12:	1a80      	subs	r0, r0, r2
 8000c14:	e7e4      	b.n	8000be0 <RTC_WeekDayNum+0x38>

08000c16 <RTC_EnterInitMode>:
{
 8000c16:	b538      	push	{r3, r4, r5, lr}
 8000c18:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000c1a:	f7ff fad9 	bl	80001d0 <HAL_GetTick>
 8000c1e:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	0692      	lsls	r2, r2, #26
 8000c26:	d505      	bpl.n	8000c34 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c28:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8000c2a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c2c:	f042 0210 	orr.w	r2, r2, #16
 8000c30:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000c32:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c34:	f7ff facc 	bl	80001d0 <HAL_GetTick>
 8000c38:	1b40      	subs	r0, r0, r5
 8000c3a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c3e:	d9ef      	bls.n	8000c20 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c40:	2003      	movs	r0, #3
}
 8000c42:	bd38      	pop	{r3, r4, r5, pc}

08000c44 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c44:	6802      	ldr	r2, [r0, #0]
{
 8000c46:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c48:	6853      	ldr	r3, [r2, #4]
{
 8000c4a:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c4c:	f023 0310 	bic.w	r3, r3, #16
 8000c50:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c52:	f7ff fabd 	bl	80001d0 <HAL_GetTick>
 8000c56:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	069b      	lsls	r3, r3, #26
 8000c5e:	d501      	bpl.n	8000c64 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c64:	f7ff fab4 	bl	80001d0 <HAL_GetTick>
 8000c68:	1b40      	subs	r0, r0, r5
 8000c6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c6e:	d9f3      	bls.n	8000c58 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000c70:	2003      	movs	r0, #3
}
 8000c72:	bd38      	pop	{r3, r4, r5, pc}

08000c74 <RTC_WriteTimeCounter>:
{
 8000c74:	b538      	push	{r3, r4, r5, lr}
 8000c76:	4605      	mov	r5, r0
 8000c78:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000c7a:	f7ff ffcc 	bl	8000c16 <RTC_EnterInitMode>
 8000c7e:	b958      	cbnz	r0, 8000c98 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000c84:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000c86:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000c88:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000c8a:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000c8c:	f7ff ffda 	bl	8000c44 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000c90:	3000      	adds	r0, #0
 8000c92:	bf18      	it	ne
 8000c94:	2001      	movne	r0, #1
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
 8000c98:	2001      	movs	r0, #1
}
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}

08000c9c <RTC_WriteAlarmCounter>:
{
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4605      	mov	r5, r0
 8000ca0:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000ca2:	f7ff ffb8 	bl	8000c16 <RTC_EnterInitMode>
 8000ca6:	b958      	cbnz	r0, 8000cc0 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000cac:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000cae:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cb0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000cb2:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cb4:	f7ff ffc6 	bl	8000c44 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cb8:	3000      	adds	r0, #0
 8000cba:	bf18      	it	ne
 8000cbc:	2001      	movne	r0, #1
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}
 8000cc0:	2001      	movs	r0, #1
}
 8000cc2:	bd38      	pop	{r3, r4, r5, pc}

08000cc4 <HAL_RTC_SetTime>:
{
 8000cc4:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	b1e0      	cbz	r0, 8000d04 <HAL_RTC_SetTime+0x40>
 8000cca:	b1d9      	cbz	r1, 8000d04 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000ccc:	7c03      	ldrb	r3, [r0, #16]
 8000cce:	2602      	movs	r6, #2
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d046      	beq.n	8000d62 <HAL_RTC_SetTime+0x9e>
 8000cd4:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000cd6:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8000cd8:	7403      	strb	r3, [r0, #16]
 8000cda:	7808      	ldrb	r0, [r1, #0]
 8000cdc:	784e      	ldrb	r6, [r1, #1]
 8000cde:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8000ce0:	b992      	cbnz	r2, 8000d08 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000ce2:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000ce4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000ce8:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000cea:	fb03 5000 	mla	r0, r3, r0, r5
 8000cee:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff ffbe 	bl	8000c74 <RTC_WriteTimeCounter>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	b1b0      	cbz	r0, 8000d2a <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000d00:	2300      	movs	r3, #0
 8000d02:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000d04:	2601      	movs	r6, #1
 8000d06:	e02c      	b.n	8000d62 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d08:	f7ff ff46 	bl	8000b98 <RTC_Bcd2ToByte>
 8000d0c:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8000d0e:	4630      	mov	r0, r6
 8000d10:	f7ff ff42 	bl	8000b98 <RTC_Bcd2ToByte>
 8000d14:	233c      	movs	r3, #60	; 0x3c
 8000d16:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000d1c:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8000d20:	4608      	mov	r0, r1
 8000d22:	f7ff ff39 	bl	8000b98 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d26:	4405      	add	r5, r0
 8000d28:	e7e2      	b.n	8000cf0 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d2a:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d2c:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d2e:	6853      	ldr	r3, [r2, #4]
 8000d30:	f023 0305 	bic.w	r3, r3, #5
 8000d34:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d36:	f7ff ff1d 	bl	8000b74 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000d3a:	1c43      	adds	r3, r0, #1
 8000d3c:	d00d      	beq.n	8000d5a <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8000d3e:	4285      	cmp	r5, r0
 8000d40:	d90b      	bls.n	8000d5a <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000d42:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000d46:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff ffa6 	bl	8000c9c <RTC_WriteAlarmCounter>
 8000d50:	b118      	cbz	r0, 8000d5a <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d52:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000d54:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d56:	7463      	strb	r3, [r4, #17]
 8000d58:	e7d4      	b.n	8000d04 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8000d5e:	2300      	movs	r3, #0
 8000d60:	7423      	strb	r3, [r4, #16]
}
 8000d62:	4630      	mov	r0, r6
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d68 <HAL_RTC_GetTime>:
{
 8000d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d6c:	460d      	mov	r5, r1
 8000d6e:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8000d70:	4604      	mov	r4, r0
 8000d72:	b910      	cbnz	r0, 8000d7a <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
 8000d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d0fa      	beq.n	8000d74 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8000d7e:	6803      	ldr	r3, [r0, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	075e      	lsls	r6, r3, #29
 8000d84:	d4f6      	bmi.n	8000d74 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000d86:	f7ff fee3 	bl	8000b50 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8000d8a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000d8e:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000d92:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000d94:	fb02 0213 	mls	r2, r2, r3, r0
 8000d98:	203c      	movs	r0, #60	; 0x3c
 8000d9a:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000d9e:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8000da2:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000da4:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000da6:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8000da8:	f240 8085 	bls.w	8000eb6 <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 8000dac:	2118      	movs	r1, #24
 8000dae:	fbb3 f2f1 	udiv	r2, r3, r1
 8000db2:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000db6:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 8000db8:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dba:	f7ff fedb 	bl	8000b74 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000dbe:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dc0:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000dc2:	d004      	beq.n	8000dce <HAL_RTC_GetTime+0x66>
 8000dc4:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8000dc6:	bf2c      	ite	cs
 8000dc8:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8000dcc:	1bc6      	subcc	r6, r0, r7
 8000dce:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	fbb7 f9f3 	udiv	r9, r7, r3
 8000dd6:	fb03 7919 	mls	r9, r3, r9, r7
 8000dda:	4649      	mov	r1, r9
 8000ddc:	f7ff ff4a 	bl	8000c74 <RTC_WriteTimeCounter>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d1c7      	bne.n	8000d74 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000de4:	1c72      	adds	r2, r6, #1
 8000de6:	d02f      	beq.n	8000e48 <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000de8:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000dec:	4620      	mov	r0, r4
 8000dee:	f7ff ff55 	bl	8000c9c <RTC_WriteAlarmCounter>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d1be      	bne.n	8000d74 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8000df8:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8000dfa:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8000dfe:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 8000e02:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e06:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8000e0a:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8000e0c:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8000e0e:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e10:	42b7      	cmp	r7, r6
 8000e12:	d11b      	bne.n	8000e4c <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 8000e14:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8000e16:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8000e18:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8000e1a:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8000e1c:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8000e1e:	f7ff fec3 	bl	8000ba8 <RTC_WeekDayNum>
 8000e22:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 8000e24:	f1b8 0f00 	cmp.w	r8, #0
 8000e28:	d00b      	beq.n	8000e42 <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8000e2a:	7828      	ldrb	r0, [r5, #0]
 8000e2c:	f7ff fea9 	bl	8000b82 <RTC_ByteToBcd2>
 8000e30:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8000e32:	7868      	ldrb	r0, [r5, #1]
 8000e34:	f7ff fea5 	bl	8000b82 <RTC_ByteToBcd2>
 8000e38:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 8000e3a:	78a8      	ldrb	r0, [r5, #2]
 8000e3c:	f7ff fea1 	bl	8000b82 <RTC_ByteToBcd2>
 8000e40:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8000e42:	2000      	movs	r0, #0
 8000e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e7cf      	b.n	8000dec <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e4c:	1e4b      	subs	r3, r1, #1
 8000e4e:	2b09      	cmp	r3, #9
 8000e50:	d835      	bhi.n	8000ebe <HAL_RTC_GetTime+0x156>
 8000e52:	fa29 f303 	lsr.w	r3, r9, r3
 8000e56:	07db      	lsls	r3, r3, #31
 8000e58:	d42f      	bmi.n	8000eba <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8000e5a:	f021 0302 	bic.w	r3, r1, #2
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d001      	beq.n	8000e66 <HAL_RTC_GetTime+0xfe>
 8000e62:	2b09      	cmp	r3, #9
 8000e64:	d104      	bne.n	8000e70 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 8000e66:	2a1d      	cmp	r2, #29
      if(day < 31U)
 8000e68:	d906      	bls.n	8000e78 <HAL_RTC_GetTime+0x110>
        month++;
 8000e6a:	3101      	adds	r1, #1
        day = 1U;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	e02d      	b.n	8000ecc <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8000e70:	2902      	cmp	r1, #2
 8000e72:	d12b      	bne.n	8000ecc <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 8000e74:	2a1b      	cmp	r2, #27
 8000e76:	d801      	bhi.n	8000e7c <HAL_RTC_GetTime+0x114>
        day++;
 8000e78:	3201      	adds	r2, #1
 8000e7a:	e027      	b.n	8000ecc <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 8000e7c:	2a1c      	cmp	r2, #28
 8000e7e:	d113      	bne.n	8000ea8 <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 8000e80:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 8000e82:	0793      	lsls	r3, r2, #30
 8000e84:	d112      	bne.n	8000eac <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 8000e86:	fbb2 f3fe 	udiv	r3, r2, lr
 8000e8a:	fb0e 2313 	mls	r3, lr, r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b97b      	cbnz	r3, 8000eb2 <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 8000e92:	fbb2 f3fc 	udiv	r3, r2, ip
 8000e96:	fb0c 2313 	mls	r3, ip, r3, r2
 8000e9a:	b29b      	uxth	r3, r3
          day++;
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	bf16      	itet	ne
 8000ea0:	2201      	movne	r2, #1
 8000ea2:	221d      	moveq	r2, #29
 8000ea4:	2103      	movne	r1, #3
 8000ea6:	e011      	b.n	8000ecc <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 8000ea8:	2a1d      	cmp	r2, #29
 8000eaa:	d10f      	bne.n	8000ecc <HAL_RTC_GetTime+0x164>
          day = 1U;
 8000eac:	2201      	movs	r2, #1
          month++;
 8000eae:	2103      	movs	r1, #3
 8000eb0:	e00c      	b.n	8000ecc <HAL_RTC_GetTime+0x164>
          day++;
 8000eb2:	221d      	movs	r2, #29
 8000eb4:	e00a      	b.n	8000ecc <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 8000eb6:	702b      	strb	r3, [r5, #0]
 8000eb8:	e7b4      	b.n	8000e24 <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 8000eba:	2a1e      	cmp	r2, #30
 8000ebc:	e7d4      	b.n	8000e68 <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 8000ebe:	290c      	cmp	r1, #12
 8000ec0:	d1cb      	bne.n	8000e5a <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 8000ec2:	2a1e      	cmp	r2, #30
 8000ec4:	d9d8      	bls.n	8000e78 <HAL_RTC_GetTime+0x110>
          day = 1U;
 8000ec6:	2201      	movs	r2, #1
          month = 1U;
 8000ec8:	4611      	mov	r1, r2
          year++;
 8000eca:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8000ecc:	3601      	adds	r6, #1
 8000ece:	e79f      	b.n	8000e10 <HAL_RTC_GetTime+0xa8>
 8000ed0:	00015180 	.word	0x00015180

08000ed4 <HAL_RTC_SetDate>:
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8000ed8:	4604      	mov	r4, r0
 8000eda:	b358      	cbz	r0, 8000f34 <HAL_RTC_SetDate+0x60>
 8000edc:	b351      	cbz	r1, 8000f34 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8000ede:	7c03      	ldrb	r3, [r0, #16]
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d027      	beq.n	8000f36 <HAL_RTC_SetDate+0x62>
 8000ee6:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8000ee8:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 8000eea:	7423      	strb	r3, [r4, #16]
 8000eec:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8000eee:	bb1a      	cbnz	r2, 8000f38 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8000ef0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8000ef2:	784b      	ldrb	r3, [r1, #1]
 8000ef4:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8000ef6:	788b      	ldrb	r3, [r1, #2]
 8000ef8:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8000efa:	7ba2      	ldrb	r2, [r4, #14]
 8000efc:	7b61      	ldrb	r1, [r4, #13]
 8000efe:	7be0      	ldrb	r0, [r4, #15]
 8000f00:	f7ff fe52 	bl	8000ba8 <RTC_WeekDayNum>
 8000f04:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8000f06:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f7ff fe21 	bl	8000b50 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_RTC_SetDate+0xac>)
 8000f10:	4298      	cmp	r0, r3
 8000f12:	d930      	bls.n	8000f76 <HAL_RTC_SetDate+0xa2>
 8000f14:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8000f18:	fbb0 f5f3 	udiv	r5, r0, r3
 8000f1c:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000f20:	4620      	mov	r0, r4
 8000f22:	4629      	mov	r1, r5
 8000f24:	f7ff fea6 	bl	8000c74 <RTC_WriteTimeCounter>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	b188      	cbz	r0, 8000f50 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8000f30:	2300      	movs	r3, #0
 8000f32:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000f34:	2001      	movs	r0, #1
}
 8000f36:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8000f38:	f7ff fe2e 	bl	8000b98 <RTC_Bcd2ToByte>
 8000f3c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8000f3e:	7848      	ldrb	r0, [r1, #1]
 8000f40:	f7ff fe2a 	bl	8000b98 <RTC_Bcd2ToByte>
 8000f44:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8000f46:	7888      	ldrb	r0, [r1, #2]
 8000f48:	f7ff fe26 	bl	8000b98 <RTC_Bcd2ToByte>
 8000f4c:	73a0      	strb	r0, [r4, #14]
 8000f4e:	e7d4      	b.n	8000efa <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000f50:	4620      	mov	r0, r4
 8000f52:	f7ff fe0f 	bl	8000b74 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000f56:	1c43      	adds	r3, r0, #1
 8000f58:	d00d      	beq.n	8000f76 <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8000f5a:	4285      	cmp	r5, r0
 8000f5c:	d90b      	bls.n	8000f76 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000f5e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000f62:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fe98 	bl	8000c9c <RTC_WriteAlarmCounter>
 8000f6c:	b118      	cbz	r0, 8000f76 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000f6e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000f70:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000f72:	7463      	strb	r3, [r4, #17]
 8000f74:	e7de      	b.n	8000f34 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8000f76:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8000f78:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8000f7a:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8000f7c:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	00015f8f 	.word	0x00015f8f

08000f84 <HAL_RTC_GetDate>:
{
 8000f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f86:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 8000f88:	2200      	movs	r2, #0
{
 8000f8a:	460c      	mov	r4, r1
  RTC_TimeTypeDef stime = {0U};
 8000f8c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8000f90:	f88d 2006 	strb.w	r2, [sp, #6]
  if((hrtc == NULL) || (sDate == NULL))
 8000f94:	4605      	mov	r5, r0
 8000f96:	b918      	cbnz	r0, 8000fa0 <HAL_RTC_GetDate+0x1c>
     return HAL_ERROR;
 8000f98:	2201      	movs	r2, #1
}
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((hrtc == NULL) || (sDate == NULL))
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d0f9      	beq.n	8000f98 <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8000fa4:	a901      	add	r1, sp, #4
 8000fa6:	f7ff fedf 	bl	8000d68 <HAL_RTC_GetTime>
 8000faa:	4602      	mov	r2, r0
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d1f3      	bne.n	8000f98 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8000fb0:	7b2b      	ldrb	r3, [r5, #12]
 8000fb2:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8000fb4:	7be8      	ldrb	r0, [r5, #15]
 8000fb6:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8000fb8:	7b6e      	ldrb	r6, [r5, #13]
 8000fba:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8000fbc:	7ba9      	ldrb	r1, [r5, #14]
 8000fbe:	70a1      	strb	r1, [r4, #2]
  if(Format != RTC_FORMAT_BIN)
 8000fc0:	2f00      	cmp	r7, #0
 8000fc2:	d0ea      	beq.n	8000f9a <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8000fc4:	f7ff fddd 	bl	8000b82 <RTC_ByteToBcd2>
 8000fc8:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8000fca:	4630      	mov	r0, r6
 8000fcc:	f7ff fdd9 	bl	8000b82 <RTC_ByteToBcd2>
 8000fd0:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);  
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	f7ff fdd5 	bl	8000b82 <RTC_ByteToBcd2>
 8000fd8:	70a0      	strb	r0, [r4, #2]
 8000fda:	e7de      	b.n	8000f9a <HAL_RTC_GetDate+0x16>

08000fdc <HAL_RTC_WaitForSynchro>:
{
 8000fdc:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8000fde:	4604      	mov	r4, r0
 8000fe0:	b1a8      	cbz	r0, 800100e <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8000fe2:	6802      	ldr	r2, [r0, #0]
 8000fe4:	6853      	ldr	r3, [r2, #4]
 8000fe6:	f023 0308 	bic.w	r3, r3, #8
 8000fea:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000fec:	f7ff f8f0 	bl	80001d0 <HAL_GetTick>
 8000ff0:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	071b      	lsls	r3, r3, #28
 8000ff8:	d501      	bpl.n	8000ffe <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8000ffe:	f7ff f8e7 	bl	80001d0 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001008:	d9f3      	bls.n	8000ff2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800100a:	2003      	movs	r0, #3
}
 800100c:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
 8001010:	bd38      	pop	{r3, r4, r5, pc}
	...

08001014 <HAL_RTC_Init>:
{
 8001014:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001016:	4604      	mov	r4, r0
 8001018:	b170      	cbz	r0, 8001038 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800101a:	7c43      	ldrb	r3, [r0, #17]
 800101c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001020:	b913      	cbnz	r3, 8001028 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001022:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001024:	f000 fba4 	bl	8001770 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001028:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800102a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800102c:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800102e:	f7ff ffd5 	bl	8000fdc <HAL_RTC_WaitForSynchro>
 8001032:	b118      	cbz	r0, 800103c <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001034:	2304      	movs	r3, #4
 8001036:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001038:	2001      	movs	r0, #1
}
 800103a:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800103c:	4620      	mov	r0, r4
 800103e:	f7ff fdea 	bl	8000c16 <RTC_EnterInitMode>
 8001042:	2800      	cmp	r0, #0
 8001044:	d1f6      	bne.n	8001034 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001046:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001048:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800104a:	6853      	ldr	r3, [r2, #4]
 800104c:	f023 0307 	bic.w	r3, r3, #7
 8001050:	6053      	str	r3, [r2, #4]
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001054:	b118      	cbz	r0, 800105e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001056:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001058:	f021 0101 	bic.w	r1, r1, #1
 800105c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800105e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001060:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001064:	4303      	orrs	r3, r0
 8001066:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001068:	6860      	ldr	r0, [r4, #4]
 800106a:	1c43      	adds	r3, r0, #1
 800106c:	d105      	bne.n	800107a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff fcf8 	bl	8000a64 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001074:	2800      	cmp	r0, #0
 8001076:	d0dd      	beq.n	8001034 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001078:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800107a:	6822      	ldr	r2, [r4, #0]
 800107c:	6893      	ldr	r3, [r2, #8]
 800107e:	f023 030f 	bic.w	r3, r3, #15
 8001082:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001086:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001088:	68d3      	ldr	r3, [r2, #12]
 800108a:	b280      	uxth	r0, r0
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	4318      	orrs	r0, r3
 8001092:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff fdd5 	bl	8000c44 <RTC_ExitInitMode>
 800109a:	2301      	movs	r3, #1
 800109c:	b110      	cbz	r0, 80010a4 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800109e:	2204      	movs	r2, #4
 80010a0:	7462      	strb	r2, [r4, #17]
 80010a2:	e7c9      	b.n	8001038 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 80010a4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80010a6:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80010a8:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80010aa:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	bf00      	nop
 80010b0:	40006c00 	.word	0x40006c00

080010b4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010b4:	6a03      	ldr	r3, [r0, #32]
{
 80010b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010c2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80010ce:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80010d2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80010d4:	4d0a      	ldr	r5, [pc, #40]	; (8001100 <TIM_OC1_SetConfig+0x4c>)
 80010d6:	42a8      	cmp	r0, r5
 80010d8:	d10b      	bne.n	80010f2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80010dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80010e0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010e2:	698e      	ldr	r6, [r1, #24]
 80010e4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80010ea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80010ec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80010f0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010f2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80010f4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010f6:	684a      	ldr	r2, [r1, #4]
 80010f8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010fa:	6203      	str	r3, [r0, #32]
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
 80010fe:	bf00      	nop
 8001100:	40012c00 	.word	0x40012c00

08001104 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001104:	6a03      	ldr	r3, [r0, #32]
{
 8001106:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800110c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800110e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001110:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001112:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001114:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001116:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800111a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800111c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800111e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001122:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001126:	4d0b      	ldr	r5, [pc, #44]	; (8001154 <TIM_OC3_SetConfig+0x50>)
 8001128:	42a8      	cmp	r0, r5
 800112a:	d10d      	bne.n	8001148 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800112c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800112e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001132:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001136:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001138:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800113a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800113e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001144:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001148:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800114a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800114c:	684a      	ldr	r2, [r1, #4]
 800114e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001150:	6203      	str	r3, [r0, #32]
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	40012c00 	.word	0x40012c00

08001158 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001158:	6a03      	ldr	r3, [r0, #32]
{
 800115a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800115c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001160:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001162:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001164:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001166:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001168:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800116a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800116e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001172:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001178:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800117c:	4d06      	ldr	r5, [pc, #24]	; (8001198 <TIM_OC4_SetConfig+0x40>)
 800117e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001180:	bf02      	ittt	eq
 8001182:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001184:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001188:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800118c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800118e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001190:	684a      	ldr	r2, [r1, #4]
 8001192:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001194:	6203      	str	r3, [r0, #32]
 8001196:	bd30      	pop	{r4, r5, pc}
 8001198:	40012c00 	.word	0x40012c00

0800119c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800119c:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800119e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011a0:	4290      	cmp	r0, r2
 80011a2:	d00a      	beq.n	80011ba <TIM_Base_SetConfig+0x1e>
 80011a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011a8:	d007      	beq.n	80011ba <TIM_Base_SetConfig+0x1e>
 80011aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011ae:	4290      	cmp	r0, r2
 80011b0:	d003      	beq.n	80011ba <TIM_Base_SetConfig+0x1e>
 80011b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b6:	4290      	cmp	r0, r2
 80011b8:	d115      	bne.n	80011e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80011ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011c0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <TIM_Base_SetConfig+0x6c>)
 80011c4:	4290      	cmp	r0, r2
 80011c6:	d00a      	beq.n	80011de <TIM_Base_SetConfig+0x42>
 80011c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011cc:	d007      	beq.n	80011de <TIM_Base_SetConfig+0x42>
 80011ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d003      	beq.n	80011de <TIM_Base_SetConfig+0x42>
 80011d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011da:	4290      	cmp	r0, r2
 80011dc:	d103      	bne.n	80011e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011de:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011e4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80011e6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80011e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80011ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80011ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011f0:	688b      	ldr	r3, [r1, #8]
 80011f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011f4:	680b      	ldr	r3, [r1, #0]
 80011f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <TIM_Base_SetConfig+0x6c>)
 80011fa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80011fc:	bf04      	itt	eq
 80011fe:	690b      	ldreq	r3, [r1, #16]
 8001200:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001202:	2301      	movs	r3, #1
 8001204:	6143      	str	r3, [r0, #20]
 8001206:	4770      	bx	lr
 8001208:	40012c00 	.word	0x40012c00

0800120c <HAL_TIM_PWM_Init>:
{
 800120c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800120e:	4604      	mov	r4, r0
 8001210:	b1a0      	cbz	r0, 800123c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001212:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001216:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800121a:	b91b      	cbnz	r3, 8001224 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800121c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001220:	f000 fac4 	bl	80017ac <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001224:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001226:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800122c:	1d21      	adds	r1, r4, #4
 800122e:	f7ff ffb5 	bl	800119c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001232:	2301      	movs	r3, #1
  return HAL_OK;
 8001234:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001236:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800123a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800123c:	2001      	movs	r0, #1
}
 800123e:	bd10      	pop	{r4, pc}

08001240 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001240:	6a03      	ldr	r3, [r0, #32]
{
 8001242:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001244:	f023 0310 	bic.w	r3, r3, #16
 8001248:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800124a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800124c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800124e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001250:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001252:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001256:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800125a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800125c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001260:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001264:	4d0b      	ldr	r5, [pc, #44]	; (8001294 <TIM_OC2_SetConfig+0x54>)
 8001266:	42a8      	cmp	r0, r5
 8001268:	d10d      	bne.n	8001286 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800126a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800126c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001270:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001274:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001276:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001278:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800127c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800127e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001282:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001286:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001288:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800128a:	684a      	ldr	r2, [r1, #4]
 800128c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800128e:	6203      	str	r3, [r0, #32]
 8001290:	bd70      	pop	{r4, r5, r6, pc}
 8001292:	bf00      	nop
 8001294:	40012c00 	.word	0x40012c00

08001298 <HAL_TIM_PWM_ConfigChannel>:
{
 8001298:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800129a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800129e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f04f 0002 	mov.w	r0, #2
 80012a6:	d025      	beq.n	80012f4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80012a8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80012ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80012b2:	2a0c      	cmp	r2, #12
 80012b4:	d818      	bhi.n	80012e8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80012b6:	e8df f002 	tbb	[pc, r2]
 80012ba:	1707      	.short	0x1707
 80012bc:	171e1717 	.word	0x171e1717
 80012c0:	172f1717 	.word	0x172f1717
 80012c4:	1717      	.short	0x1717
 80012c6:	40          	.byte	0x40
 80012c7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	f7ff fef3 	bl	80010b4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	f042 0208 	orr.w	r2, r2, #8
 80012d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012da:	699a      	ldr	r2, [r3, #24]
 80012dc:	f022 0204 	bic.w	r2, r2, #4
 80012e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012e2:	699a      	ldr	r2, [r3, #24]
 80012e4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80012e6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80012e8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80012ea:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80012f6:	6820      	ldr	r0, [r4, #0]
 80012f8:	f7ff ffa2 	bl	8001240 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80012fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80012fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001316:	e7e6      	b.n	80012e6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001318:	6820      	ldr	r0, [r4, #0]
 800131a:	f7ff fef3 	bl	8001104 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800131e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001320:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	f042 0208 	orr.w	r2, r2, #8
 8001328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	f022 0204 	bic.w	r2, r2, #4
 8001330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001336:	61da      	str	r2, [r3, #28]
    break;
 8001338:	e7d6      	b.n	80012e8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800133a:	6820      	ldr	r0, [r4, #0]
 800133c:	f7ff ff0c 	bl	8001158 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001340:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001342:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800134a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800134c:	69da      	ldr	r2, [r3, #28]
 800134e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001354:	69da      	ldr	r2, [r3, #28]
 8001356:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800135a:	e7ec      	b.n	8001336 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800135c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800135c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800135e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001360:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001362:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001364:	ea23 0304 	bic.w	r3, r3, r4
 8001368:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800136a:	6a03      	ldr	r3, [r0, #32]
 800136c:	408a      	lsls	r2, r1
 800136e:	431a      	orrs	r2, r3
 8001370:	6202      	str	r2, [r0, #32]
 8001372:	bd10      	pop	{r4, pc}

08001374 <HAL_TIM_PWM_Start>:
{
 8001374:	b510      	push	{r4, lr}
 8001376:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001378:	2201      	movs	r2, #1
 800137a:	6800      	ldr	r0, [r0, #0]
 800137c:	f7ff ffee 	bl	800135c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_TIM_PWM_Start+0x28>)
}
 8001384:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001386:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001388:	bf02      	ittt	eq
 800138a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800138c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001390:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	bd10      	pop	{r4, pc}
 800139c:	40012c00 	.word	0x40012c00

080013a0 <HAL_TIM_PWM_Stop>:
{
 80013a0:	b510      	push	{r4, lr}
 80013a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6800      	ldr	r0, [r0, #0]
 80013a8:	f7ff ffd8 	bl	800135c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_TIM_PWM_Stop+0x58>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d10d      	bne.n	80013d0 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80013b4:	f241 1211 	movw	r2, #4369	; 0x1111
 80013b8:	6a19      	ldr	r1, [r3, #32]
 80013ba:	4211      	tst	r1, r2
 80013bc:	d108      	bne.n	80013d0 <HAL_TIM_PWM_Stop+0x30>
 80013be:	f240 4244 	movw	r2, #1092	; 0x444
 80013c2:	6a19      	ldr	r1, [r3, #32]
 80013c4:	4211      	tst	r1, r2
 80013c6:	bf02      	ittt	eq
 80013c8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013ca:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80013ce:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80013d0:	f241 1211 	movw	r2, #4369	; 0x1111
 80013d4:	6a19      	ldr	r1, [r3, #32]
 80013d6:	4211      	tst	r1, r2
 80013d8:	d108      	bne.n	80013ec <HAL_TIM_PWM_Stop+0x4c>
 80013da:	f240 4244 	movw	r2, #1092	; 0x444
 80013de:	6a19      	ldr	r1, [r3, #32]
 80013e0:	4211      	tst	r1, r2
 80013e2:	bf02      	ittt	eq
 80013e4:	681a      	ldreq	r2, [r3, #0]
 80013e6:	f022 0201 	biceq.w	r2, r2, #1
 80013ea:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	bf00      	nop
 80013f8:	40012c00 	.word	0x40012c00

080013fc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80013fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001400:	2b01      	cmp	r3, #1
 8001402:	d01f      	beq.n	8001444 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001404:	68cb      	ldr	r3, [r1, #12]
 8001406:	688a      	ldr	r2, [r1, #8]
 8001408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800140c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800140e:	684a      	ldr	r2, [r1, #4]
 8001410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001414:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001416:	680a      	ldr	r2, [r1, #0]
 8001418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800141c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800141e:	690a      	ldr	r2, [r1, #16]
 8001420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001424:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001426:	694a      	ldr	r2, [r1, #20]
 8001428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800142c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800142e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001430:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001434:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001436:	6802      	ldr	r2, [r0, #0]
 8001438:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800143a:	2300      	movs	r3, #0
 800143c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001440:	4618      	mov	r0, r3
 8001442:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001444:	2002      	movs	r0, #2
}
 8001446:	4770      	bx	lr

08001448 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001448:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800144c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800144e:	2b01      	cmp	r3, #1
 8001450:	f04f 0302 	mov.w	r3, #2
 8001454:	d018      	beq.n	8001488 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001456:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800145a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800145c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800145e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001460:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001462:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001466:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4322      	orrs	r2, r4
 800146c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001474:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	430a      	orrs	r2, r1
 800147a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800147c:	2301      	movs	r3, #1
 800147e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001482:	2300      	movs	r3, #0
 8001484:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001488:	4618      	mov	r0, r3

  return HAL_OK;
}
 800148a:	bd10      	pop	{r4, pc}

0800148c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148c:	2228      	movs	r2, #40	; 0x28
{
 800148e:	b530      	push	{r4, r5, lr}
 8001490:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	eb0d 0002 	add.w	r0, sp, r2
 8001496:	2100      	movs	r1, #0
 8001498:	f000 fa3e 	bl	8001918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	2214      	movs	r2, #20
 800149e:	2100      	movs	r1, #0
 80014a0:	eb0d 0002 	add.w	r0, sp, r2
 80014a4:	f000 fa38 	bl	8001918 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	2210      	movs	r2, #16
 80014aa:	2100      	movs	r1, #0
 80014ac:	a801      	add	r0, sp, #4
 80014ae:	f000 fa33 	bl	8001918 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80014b2:	2305      	movs	r3, #5
 80014b4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ba:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014bc:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014be:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ca:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f7fe ffc6 	bl	8000460 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014da:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014de:	4629      	mov	r1, r5
 80014e0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ea:	f7ff f981 	bl	80007f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014ee:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014f4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014f6:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f7ff fa3c 	bl	8000974 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80014fc:	b015      	add	sp, #84	; 0x54
 80014fe:	bd30      	pop	{r4, r5, pc}

08001500 <main>:

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	2400      	movs	r4, #0
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 8001506:	f7fe fe45 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800150a:	f7ff ffbf 	bl	800148c <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b58      	ldr	r3, [pc, #352]	; (8001670 <main+0x170>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	4621      	mov	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	699a      	ldr	r2, [r3, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001514:	a816      	add	r0, sp, #88	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	f042 0210 	orr.w	r2, r2, #16
 800151a:	619a      	str	r2, [r3, #24]
 800151c:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 800151e:	4e55      	ldr	r6, [pc, #340]	; (8001674 <main+0x174>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	f002 0210 	and.w	r2, r2, #16
 8001524:	9211      	str	r2, [sp, #68]	; 0x44
 8001526:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001528:	699a      	ldr	r2, [r3, #24]
  hrtc.Instance = RTC;
 800152a:	4f53      	ldr	r7, [pc, #332]	; (8001678 <main+0x178>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152c:	f042 0220 	orr.w	r2, r2, #32
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	699a      	ldr	r2, [r3, #24]
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BCD); // order is specific
 8001534:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800168c <main+0x18c>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	f002 0220 	and.w	r2, r2, #32
 800153c:	9212      	str	r2, [sp, #72]	; 0x48
 800153e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	699a      	ldr	r2, [r3, #24]
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BCD);
 8001542:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8001684 <main+0x184>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	f042 0204 	orr.w	r2, r2, #4
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	699b      	ldr	r3, [r3, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154e:	221c      	movs	r2, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	9313      	str	r3, [sp, #76]	; 0x4c
 8001556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	9414      	str	r4, [sp, #80]	; 0x50
 800155a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155c:	f000 f9dc 	bl	8001918 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001560:	4621      	mov	r1, r4
 8001562:	221c      	movs	r2, #28
 8001564:	a81d      	add	r0, sp, #116	; 0x74
 8001566:	f000 f9d7 	bl	8001918 <memset>
  htim1.Init.Prescaler = 40000;
 800156a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800156e:	4a43      	ldr	r2, [pc, #268]	; (800167c <main+0x17c>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001570:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 40000;
 8001572:	e886 000c 	stmia.w	r6, {r2, r3}
  htim1.Init.Period = 10000;
 8001576:	f242 7310 	movw	r3, #10000	; 0x2710
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = 10000;
 800157c:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8001580:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001584:	f7ff fe42 	bl	800120c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001588:	a914      	add	r1, sp, #80	; 0x50
 800158a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001590:	f7ff ff5a 	bl	8001448 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001596:	2204      	movs	r2, #4
 8001598:	a916      	add	r1, sp, #88	; 0x58
 800159a:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159c:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 800159e:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a2:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a4:	941a      	str	r4, [sp, #104]	; 0x68
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a6:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a8:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015aa:	f7ff fe75 	bl	8001298 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015b2:	a91d      	add	r1, sp, #116	; 0x74
 80015b4:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b6:	9322      	str	r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015b8:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ba:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015bc:	941f      	str	r4, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.DeadTime = 0;
 80015be:	9420      	str	r4, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015c0:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c2:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015c4:	f7ff ff1a 	bl	80013fc <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80015c8:	4630      	mov	r0, r6
 80015ca:	f000 f903 	bl	80017d4 <HAL_TIM_MspPostInit>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d2:	f04f 31ff 	mov.w	r1, #4294967295
 80015d6:	482a      	ldr	r0, [pc, #168]	; (8001680 <main+0x180>)
  RTC_TimeTypeDef sTime = {0};
 80015d8:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015dc:	e887 000b 	stmia.w	r7, {r0, r1, r3}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e0:	4638      	mov	r0, r7
  RTC_TimeTypeDef sTime = {0};
 80015e2:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  RTC_DateTypeDef DateToUpdate = {0};
 80015e6:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e8:	f7ff fd14 	bl	8001014 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015ec:	2201      	movs	r2, #1
 80015ee:	a916      	add	r1, sp, #88	; 0x58
 80015f0:	4638      	mov	r0, r7
  sTime.Hours = 0x0;
 80015f2:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
  sTime.Minutes = 0x0;
 80015f6:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
  sTime.Seconds = 0x0;
 80015fa:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015fe:	f7ff fb61 	bl	8000cc4 <HAL_RTC_SetTime>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001602:	2201      	movs	r2, #1
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001604:	a91d      	add	r1, sp, #116	; 0x74
 8001606:	4638      	mov	r0, r7
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001608:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800160c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  DateToUpdate.Date = 0x1;
 8001610:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  DateToUpdate.Year = 0x0;
 8001614:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001618:	f7ff fc5c 	bl	8000ed4 <HAL_RTC_SetDate>
  Set_Current_Time(hrtc); // syncs up RTC with the system clock at compile time.
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001624:	f000 f85c 	bl	80016e0 <Set_Current_Time>
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BCD); // order is specific
 8001628:	2201      	movs	r2, #1
 800162a:	4641      	mov	r1, r8
 800162c:	4638      	mov	r0, r7
 800162e:	f7ff fb9b 	bl	8000d68 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BCD);
 8001632:	2201      	movs	r2, #1
 8001634:	4913      	ldr	r1, [pc, #76]	; (8001684 <main+0x184>)
 8001636:	4638      	mov	r0, r7
 8001638:	f7ff fca4 	bl	8000f84 <HAL_RTC_GetDate>
	  if(userDate.WeekDay==RTC_WEEKDAY_THURSDAY){
 800163c:	f899 3000 	ldrb.w	r3, [r9]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d1f1      	bne.n	8001628 <main+0x128>
			  setPWM(htim1,TIM_CHANNEL_2,40000,10000);
 8001644:	f242 7210 	movw	r2, #10000	; 0x2710
 8001648:	466c      	mov	r4, sp
 800164a:	920e      	str	r2, [sp, #56]	; 0x38
 800164c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001650:	4d0d      	ldr	r5, [pc, #52]	; (8001688 <main+0x188>)
 8001652:	920d      	str	r2, [sp, #52]	; 0x34
 8001654:	930c      	str	r3, [sp, #48]	; 0x30
 8001656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001666:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800166a:	f000 f811 	bl	8001690 <setPWM>
 800166e:	e7db      	b.n	8001628 <main+0x128>
 8001670:	40021000 	.word	0x40021000
 8001674:	20000048 	.word	0x20000048
 8001678:	20000034 	.word	0x20000034
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40002800 	.word	0x40002800
 8001684:	20000028 	.word	0x20000028
 8001688:	20000058 	.word	0x20000058
 800168c:	2000002c 	.word	0x2000002c

08001690 <setPWM>:
#include "pwm.h"

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 8001690:	b084      	sub	sp, #16
 8001692:	b500      	push	{lr}
 8001694:	b089      	sub	sp, #36	; 0x24
 8001696:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800169a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800169e:	4670      	mov	r0, lr
 80016a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80016a2:	f7ff fe7d 	bl	80013a0 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 80016a6:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80016aa:	a80a      	add	r0, sp, #40	; 0x28
 timer.Init.Period = period; // set the period duration
 80016ac:	930d      	str	r3, [sp, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80016ae:	f7ff fdad 	bl	800120c <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b2:	2360      	movs	r3, #96	; 0x60
 80016b4:	9301      	str	r3, [sp, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80016b6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 sConfigOC.Pulse = pulse; // set the pulse duration
 80016bc:	9302      	str	r3, [sp, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016c0:	a901      	add	r1, sp, #4
 80016c2:	a80a      	add	r0, sp, #40	; 0x28
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	9303      	str	r3, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c6:	9305      	str	r3, [sp, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016c8:	f7ff fde6 	bl	8001298 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80016cc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80016ce:	a80a      	add	r0, sp, #40	; 0x28
 80016d0:	f7ff fe50 	bl	8001374 <HAL_TIM_PWM_Start>
}
 80016d4:	b009      	add	sp, #36	; 0x24
 80016d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80016da:	b004      	add	sp, #16
 80016dc:	4770      	bx	lr
	...

080016e0 <Set_Current_Time>:

void Set_Current_Time()
{


  RTC_TimeTypeDef sTime = {0};
 80016e0:	2300      	movs	r3, #0
{
 80016e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  RTC_DateTypeDef DateToUpdate = {0};
 80016e4:	9301      	str	r3, [sp, #4]
*/


  /**Set the time to current time.
  */
  sTime.Hours = HOUR;
 80016e6:	230e      	movs	r3, #14
  sTime.Minutes = MINUTE;
  sTime.Seconds = SECOND;
 80016e8:	251e      	movs	r5, #30
  sTime.Hours = HOUR;
 80016ea:	f88d 3000 	strb.w	r3, [sp]
  sTime.Minutes = MINUTE;
 80016ee:	231f      	movs	r3, #31

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016f0:	4c0d      	ldr	r4, [pc, #52]	; (8001728 <Set_Current_Time+0x48>)
 80016f2:	4669      	mov	r1, sp
 80016f4:	2201      	movs	r2, #1
 80016f6:	4620      	mov	r0, r4
  sTime.Minutes = MINUTE;
 80016f8:	f88d 3001 	strb.w	r3, [sp, #1]
  sTime.Seconds = SECOND;
 80016fc:	f88d 5002 	strb.w	r5, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001700:	f7ff fae0 	bl	8000cc4 <HAL_RTC_SetTime>
  uint8_t year = YEAR;


  //DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  //DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.WeekDay = dayofweek(DAY,MONTH,YEAR);
 8001704:	2303      	movs	r3, #3
  DateToUpdate.Month = MONTH;
 8001706:	2201      	movs	r2, #1
  DateToUpdate.WeekDay = dayofweek(DAY,MONTH,YEAR);
 8001708:	f88d 3004 	strb.w	r3, [sp, #4]
  DateToUpdate.Date = DAY;
  DateToUpdate.Year = YEAR-2000; // it is 100 years, so we set it to reference year 2000
 800170c:	2313      	movs	r3, #19

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800170e:	a901      	add	r1, sp, #4
 8001710:	4620      	mov	r0, r4
  DateToUpdate.Month = MONTH;
 8001712:	f88d 2005 	strb.w	r2, [sp, #5]
  DateToUpdate.Date = DAY;
 8001716:	f88d 5006 	strb.w	r5, [sp, #6]
  DateToUpdate.Year = YEAR-2000; // it is 100 years, so we set it to reference year 2000
 800171a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800171e:	f7ff fbd9 	bl	8000ed4 <HAL_RTC_SetDate>
    //Error_Handler();
	//crap
  }


}
 8001722:	b003      	add	sp, #12
 8001724:	bd30      	pop	{r4, r5, pc}
 8001726:	bf00      	nop
 8001728:	20000034 	.word	0x20000034

0800172c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_MspInit+0x3c>)
{
 800172e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	f042 0201 	orr.w	r2, r2, #1
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	f002 0201 	and.w	r2, r2, #1
 800173e:	9200      	str	r2, [sp, #0]
 8001740:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	69da      	ldr	r2, [r3, #28]
 8001744:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001748:	61da      	str	r2, [r3, #28]
 800174a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001756:	6853      	ldr	r3, [r2, #4]
 8001758:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800175c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	b002      	add	sp, #8
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000

08001770 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001770:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RTC_MspInit+0x30>)
 8001774:	6802      	ldr	r2, [r0, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d10e      	bne.n	8001798 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800177a:	f7fe fe6b 	bl	8000454 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RTC_MspInit+0x34>)
 8001780:	69da      	ldr	r2, [r3, #28]
 8001782:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001786:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001788:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_RTC_MspInit+0x38>)
 8001796:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001798:	b003      	add	sp, #12
 800179a:	f85d fb04 	ldr.w	pc, [sp], #4
 800179e:	bf00      	nop
 80017a0:	40002800 	.word	0x40002800
 80017a4:	40021000 	.word	0x40021000
 80017a8:	4242043c 	.word	0x4242043c

080017ac <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80017ac:	6802      	ldr	r2, [r0, #0]
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_TIM_PWM_MspInit+0x24>)
{
 80017b0:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d10a      	bne.n	80017cc <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017cc:	b002      	add	sp, #8
 80017ce:	4770      	bx	lr
 80017d0:	40012c00 	.word	0x40012c00

080017d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d4:	b510      	push	{r4, lr}
 80017d6:	4604      	mov	r4, r0
 80017d8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	2210      	movs	r2, #16
 80017dc:	2100      	movs	r1, #0
 80017de:	a802      	add	r0, sp, #8
 80017e0:	f000 f89a 	bl	8001918 <memset>
  if(htim->Instance==TIM1)
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_TIM_MspPostInit+0x48>)
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d114      	bne.n	8001816 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80017f0:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	f042 0204 	orr.w	r2, r2, #4
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f7fe fd3f 	bl	8000294 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001816:	b006      	add	sp, #24
 8001818:	bd10      	pop	{r4, pc}
 800181a:	bf00      	nop
 800181c:	40012c00 	.word	0x40012c00
 8001820:	40010800 	.word	0x40010800

08001824 <NMI_Handler>:
 8001824:	4770      	bx	lr

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	e7fe      	b.n	800182a <BusFault_Handler>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler>

0800182e <SVC_Handler>:
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f7fe bcc0 	b.w	80001b8 <HAL_IncTick>

08001838 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <SystemInit+0x40>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <SystemInit+0x44>)
 8001846:	400a      	ands	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001854:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800185c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001864:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001866:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800186a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800186c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <SystemInit+0x48>)
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	f8ff0000 	.word	0xf8ff0000
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001884:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001886:	e003      	b.n	8001890 <LoopCopyDataInit>

08001888 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800188a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800188c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800188e:	3104      	adds	r1, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001890:	480a      	ldr	r0, [pc, #40]	; (80018bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001894:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001896:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001898:	d3f6      	bcc.n	8001888 <CopyDataInit>
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800189c:	e002      	b.n	80018a4 <LoopFillZerobss>

0800189e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018a0:	f842 3b04 	str.w	r3, [r2], #4

080018a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018a8:	d3f9      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018aa:	f7ff ffc5 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f000 f80f 	bl	80018d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b2:	f7ff fe25 	bl	8001500 <main>
  bx lr
 80018b6:	4770      	bx	lr
  ldr r3, =_sidata
 80018b8:	08001980 	.word	0x08001980
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80018c4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80018c8:	20000088 	.word	0x20000088

080018cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>
	...

080018d0 <__libc_init_array>:
 80018d0:	b570      	push	{r4, r5, r6, lr}
 80018d2:	2500      	movs	r5, #0
 80018d4:	4e0c      	ldr	r6, [pc, #48]	; (8001908 <__libc_init_array+0x38>)
 80018d6:	4c0d      	ldr	r4, [pc, #52]	; (800190c <__libc_init_array+0x3c>)
 80018d8:	1ba4      	subs	r4, r4, r6
 80018da:	10a4      	asrs	r4, r4, #2
 80018dc:	42a5      	cmp	r5, r4
 80018de:	d109      	bne.n	80018f4 <__libc_init_array+0x24>
 80018e0:	f000 f822 	bl	8001928 <_init>
 80018e4:	2500      	movs	r5, #0
 80018e6:	4e0a      	ldr	r6, [pc, #40]	; (8001910 <__libc_init_array+0x40>)
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <__libc_init_array+0x44>)
 80018ea:	1ba4      	subs	r4, r4, r6
 80018ec:	10a4      	asrs	r4, r4, #2
 80018ee:	42a5      	cmp	r5, r4
 80018f0:	d105      	bne.n	80018fe <__libc_init_array+0x2e>
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
 80018f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018f8:	4798      	blx	r3
 80018fa:	3501      	adds	r5, #1
 80018fc:	e7ee      	b.n	80018dc <__libc_init_array+0xc>
 80018fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001902:	4798      	blx	r3
 8001904:	3501      	adds	r5, #1
 8001906:	e7f2      	b.n	80018ee <__libc_init_array+0x1e>
 8001908:	08001978 	.word	0x08001978
 800190c:	08001978 	.word	0x08001978
 8001910:	08001978 	.word	0x08001978
 8001914:	0800197c 	.word	0x0800197c

08001918 <memset>:
 8001918:	4603      	mov	r3, r0
 800191a:	4402      	add	r2, r0
 800191c:	4293      	cmp	r3, r2
 800191e:	d100      	bne.n	8001922 <memset+0xa>
 8001920:	4770      	bx	lr
 8001922:	f803 1b01 	strb.w	r1, [r3], #1
 8001926:	e7f9      	b.n	800191c <memset+0x4>

08001928 <_init>:
 8001928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192a:	bf00      	nop
 800192c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800192e:	bc08      	pop	{r3}
 8001930:	469e      	mov	lr, r3
 8001932:	4770      	bx	lr

08001934 <_fini>:
 8001934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001936:	bf00      	nop
 8001938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193a:	bc08      	pop	{r3}
 800193c:	469e      	mov	lr, r3
 800193e:	4770      	bx	lr
