
Sundial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000186c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001978  08001978  00011978  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019b0  080019b0  000119b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019b4  080019b4  000119b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080019b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000000c  080019c4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000088  080019c4  00020088  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012ff5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002968  00000000  00000000  0003302a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005955  00000000  00000000  00035992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000878  00000000  00000000  0003b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b48  00000000  00000000  0003bb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004ee8  00000000  00000000  0003c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003347  00000000  00000000  00041590  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000448d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000175c  00000000  00000000  00044954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001960 	.word	0x08001960

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001960 	.word	0x08001960

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fada 	bl	8001764 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000030 	.word	0x20000030
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000030 	.word	0x20000030

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000478:	2201      	movs	r2, #1
 800047a:	4b01      	ldr	r3, [pc, #4]	; (8000480 <HAL_PWR_EnableBkUpAccess+0x8>)
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	4770      	bx	lr
 8000480:	420e0020 	.word	0x420e0020

08000484 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000484:	6803      	ldr	r3, [r0, #0]
{
 8000486:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048a:	07db      	lsls	r3, r3, #31
{
 800048c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800048e:	d410      	bmi.n	80004b2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000490:	682b      	ldr	r3, [r5, #0]
 8000492:	079f      	lsls	r7, r3, #30
 8000494:	d45e      	bmi.n	8000554 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000496:	682b      	ldr	r3, [r5, #0]
 8000498:	0719      	lsls	r1, r3, #28
 800049a:	f100 8095 	bmi.w	80005c8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	075a      	lsls	r2, r3, #29
 80004a2:	f100 80bf 	bmi.w	8000624 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004a6:	69ea      	ldr	r2, [r5, #28]
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	f040 812d 	bne.w	8000708 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ae:	2000      	movs	r0, #0
 80004b0:	e014      	b.n	80004dc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b2:	4c90      	ldr	r4, [pc, #576]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 80004b4:	6863      	ldr	r3, [r4, #4]
 80004b6:	f003 030c 	and.w	r3, r3, #12
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d007      	beq.n	80004ce <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d10c      	bne.n	80004e2 <HAL_RCC_OscConfig+0x5e>
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	03de      	lsls	r6, r3, #15
 80004cc:	d509      	bpl.n	80004e2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ce:	6823      	ldr	r3, [r4, #0]
 80004d0:	039c      	lsls	r4, r3, #14
 80004d2:	d5dd      	bpl.n	8000490 <HAL_RCC_OscConfig+0xc>
 80004d4:	686b      	ldr	r3, [r5, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d1da      	bne.n	8000490 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004da:	2001      	movs	r0, #1
}
 80004dc:	b002      	add	sp, #8
 80004de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004e2:	686b      	ldr	r3, [r5, #4]
 80004e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004e8:	d110      	bne.n	800050c <HAL_RCC_OscConfig+0x88>
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004f2:	f7ff fe6d 	bl	80001d0 <HAL_GetTick>
 80004f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004f8:	6823      	ldr	r3, [r4, #0]
 80004fa:	0398      	lsls	r0, r3, #14
 80004fc:	d4c8      	bmi.n	8000490 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004fe:	f7ff fe67 	bl	80001d0 <HAL_GetTick>
 8000502:	1b80      	subs	r0, r0, r6
 8000504:	2864      	cmp	r0, #100	; 0x64
 8000506:	d9f7      	bls.n	80004f8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000508:	2003      	movs	r0, #3
 800050a:	e7e7      	b.n	80004dc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800050c:	b99b      	cbnz	r3, 8000536 <HAL_RCC_OscConfig+0xb2>
 800050e:	6823      	ldr	r3, [r4, #0]
 8000510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000514:	6023      	str	r3, [r4, #0]
 8000516:	6823      	ldr	r3, [r4, #0]
 8000518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800051e:	f7ff fe57 	bl	80001d0 <HAL_GetTick>
 8000522:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	0399      	lsls	r1, r3, #14
 8000528:	d5b2      	bpl.n	8000490 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800052a:	f7ff fe51 	bl	80001d0 <HAL_GetTick>
 800052e:	1b80      	subs	r0, r0, r6
 8000530:	2864      	cmp	r0, #100	; 0x64
 8000532:	d9f7      	bls.n	8000524 <HAL_RCC_OscConfig+0xa0>
 8000534:	e7e8      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	d103      	bne.n	8000546 <HAL_RCC_OscConfig+0xc2>
 800053e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000542:	6023      	str	r3, [r4, #0]
 8000544:	e7d1      	b.n	80004ea <HAL_RCC_OscConfig+0x66>
 8000546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800054a:	6023      	str	r3, [r4, #0]
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000552:	e7cd      	b.n	80004f0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000554:	4c67      	ldr	r4, [pc, #412]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 8000556:	6863      	ldr	r3, [r4, #4]
 8000558:	f013 0f0c 	tst.w	r3, #12
 800055c:	d007      	beq.n	800056e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800055e:	6863      	ldr	r3, [r4, #4]
 8000560:	f003 030c 	and.w	r3, r3, #12
 8000564:	2b08      	cmp	r3, #8
 8000566:	d110      	bne.n	800058a <HAL_RCC_OscConfig+0x106>
 8000568:	6863      	ldr	r3, [r4, #4]
 800056a:	03da      	lsls	r2, r3, #15
 800056c:	d40d      	bmi.n	800058a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	079b      	lsls	r3, r3, #30
 8000572:	d502      	bpl.n	800057a <HAL_RCC_OscConfig+0xf6>
 8000574:	692b      	ldr	r3, [r5, #16]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d1af      	bne.n	80004da <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	696a      	ldr	r2, [r5, #20]
 800057e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000582:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000586:	6023      	str	r3, [r4, #0]
 8000588:	e785      	b.n	8000496 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800058a:	692a      	ldr	r2, [r5, #16]
 800058c:	4b5a      	ldr	r3, [pc, #360]	; (80006f8 <HAL_RCC_OscConfig+0x274>)
 800058e:	b16a      	cbz	r2, 80005ac <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000594:	f7ff fe1c 	bl	80001d0 <HAL_GetTick>
 8000598:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	079f      	lsls	r7, r3, #30
 800059e:	d4ec      	bmi.n	800057a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005a0:	f7ff fe16 	bl	80001d0 <HAL_GetTick>
 80005a4:	1b80      	subs	r0, r0, r6
 80005a6:	2802      	cmp	r0, #2
 80005a8:	d9f7      	bls.n	800059a <HAL_RCC_OscConfig+0x116>
 80005aa:	e7ad      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ae:	f7ff fe0f 	bl	80001d0 <HAL_GetTick>
 80005b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	0798      	lsls	r0, r3, #30
 80005b8:	f57f af6d 	bpl.w	8000496 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005bc:	f7ff fe08 	bl	80001d0 <HAL_GetTick>
 80005c0:	1b80      	subs	r0, r0, r6
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d9f6      	bls.n	80005b4 <HAL_RCC_OscConfig+0x130>
 80005c6:	e79f      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005c8:	69aa      	ldr	r2, [r5, #24]
 80005ca:	4c4a      	ldr	r4, [pc, #296]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 80005cc:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <HAL_RCC_OscConfig+0x278>)
 80005ce:	b1da      	cbz	r2, 8000608 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005d4:	f7ff fdfc 	bl	80001d0 <HAL_GetTick>
 80005d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005dc:	079b      	lsls	r3, r3, #30
 80005de:	d50d      	bpl.n	80005fc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005e0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005e4:	4b46      	ldr	r3, [pc, #280]	; (8000700 <HAL_RCC_OscConfig+0x27c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80005ec:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005ee:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005f0:	9b01      	ldr	r3, [sp, #4]
 80005f2:	1e5a      	subs	r2, r3, #1
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f9      	bne.n	80005ee <HAL_RCC_OscConfig+0x16a>
 80005fa:	e750      	b.n	800049e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005fc:	f7ff fde8 	bl	80001d0 <HAL_GetTick>
 8000600:	1b80      	subs	r0, r0, r6
 8000602:	2802      	cmp	r0, #2
 8000604:	d9e9      	bls.n	80005da <HAL_RCC_OscConfig+0x156>
 8000606:	e77f      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000608:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800060a:	f7ff fde1 	bl	80001d0 <HAL_GetTick>
 800060e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000612:	079f      	lsls	r7, r3, #30
 8000614:	f57f af43 	bpl.w	800049e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000618:	f7ff fdda 	bl	80001d0 <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9f6      	bls.n	8000610 <HAL_RCC_OscConfig+0x18c>
 8000622:	e771      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000624:	4c33      	ldr	r4, [pc, #204]	; (80006f4 <HAL_RCC_OscConfig+0x270>)
 8000626:	69e3      	ldr	r3, [r4, #28]
 8000628:	00d8      	lsls	r0, r3, #3
 800062a:	d424      	bmi.n	8000676 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800062c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	69e3      	ldr	r3, [r4, #28]
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	61e3      	str	r3, [r4, #28]
 8000636:	69e3      	ldr	r3, [r4, #28]
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000640:	4e30      	ldr	r6, [pc, #192]	; (8000704 <HAL_RCC_OscConfig+0x280>)
 8000642:	6833      	ldr	r3, [r6, #0]
 8000644:	05d9      	lsls	r1, r3, #23
 8000646:	d518      	bpl.n	800067a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000648:	68eb      	ldr	r3, [r5, #12]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d126      	bne.n	800069c <HAL_RCC_OscConfig+0x218>
 800064e:	6a23      	ldr	r3, [r4, #32]
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000656:	f7ff fdbb 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800065a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800065e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000660:	6a23      	ldr	r3, [r4, #32]
 8000662:	079b      	lsls	r3, r3, #30
 8000664:	d53f      	bpl.n	80006e6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000666:	2f00      	cmp	r7, #0
 8000668:	f43f af1d 	beq.w	80004a6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800066c:	69e3      	ldr	r3, [r4, #28]
 800066e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000672:	61e3      	str	r3, [r4, #28]
 8000674:	e717      	b.n	80004a6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000676:	2700      	movs	r7, #0
 8000678:	e7e2      	b.n	8000640 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800067a:	6833      	ldr	r3, [r6, #0]
 800067c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000680:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000688:	6833      	ldr	r3, [r6, #0]
 800068a:	05da      	lsls	r2, r3, #23
 800068c:	d4dc      	bmi.n	8000648 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800068e:	f7ff fd9f 	bl	80001d0 <HAL_GetTick>
 8000692:	eba0 0008 	sub.w	r0, r0, r8
 8000696:	2864      	cmp	r0, #100	; 0x64
 8000698:	d9f6      	bls.n	8000688 <HAL_RCC_OscConfig+0x204>
 800069a:	e735      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800069c:	b9ab      	cbnz	r3, 80006ca <HAL_RCC_OscConfig+0x246>
 800069e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006a0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a4:	f023 0301 	bic.w	r3, r3, #1
 80006a8:	6223      	str	r3, [r4, #32]
 80006aa:	6a23      	ldr	r3, [r4, #32]
 80006ac:	f023 0304 	bic.w	r3, r3, #4
 80006b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006b8:	6a23      	ldr	r3, [r4, #32]
 80006ba:	0798      	lsls	r0, r3, #30
 80006bc:	d5d3      	bpl.n	8000666 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006be:	f7ff fd87 	bl	80001d0 <HAL_GetTick>
 80006c2:	1b80      	subs	r0, r0, r6
 80006c4:	4540      	cmp	r0, r8
 80006c6:	d9f7      	bls.n	80006b8 <HAL_RCC_OscConfig+0x234>
 80006c8:	e71e      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	6a23      	ldr	r3, [r4, #32]
 80006ce:	d103      	bne.n	80006d8 <HAL_RCC_OscConfig+0x254>
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6223      	str	r3, [r4, #32]
 80006d6:	e7ba      	b.n	800064e <HAL_RCC_OscConfig+0x1ca>
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	6223      	str	r3, [r4, #32]
 80006de:	6a23      	ldr	r3, [r4, #32]
 80006e0:	f023 0304 	bic.w	r3, r3, #4
 80006e4:	e7b6      	b.n	8000654 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e6:	f7ff fd73 	bl	80001d0 <HAL_GetTick>
 80006ea:	eba0 0008 	sub.w	r0, r0, r8
 80006ee:	42b0      	cmp	r0, r6
 80006f0:	d9b6      	bls.n	8000660 <HAL_RCC_OscConfig+0x1dc>
 80006f2:	e709      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
 80006f4:	40021000 	.word	0x40021000
 80006f8:	42420000 	.word	0x42420000
 80006fc:	42420480 	.word	0x42420480
 8000700:	20000008 	.word	0x20000008
 8000704:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000708:	4c22      	ldr	r4, [pc, #136]	; (8000794 <HAL_RCC_OscConfig+0x310>)
 800070a:	6863      	ldr	r3, [r4, #4]
 800070c:	f003 030c 	and.w	r3, r3, #12
 8000710:	2b08      	cmp	r3, #8
 8000712:	f43f aee2 	beq.w	80004da <HAL_RCC_OscConfig+0x56>
 8000716:	2300      	movs	r3, #0
 8000718:	4e1f      	ldr	r6, [pc, #124]	; (8000798 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800071c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800071e:	d12b      	bne.n	8000778 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000720:	f7ff fd56 	bl	80001d0 <HAL_GetTick>
 8000724:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	0199      	lsls	r1, r3, #6
 800072a:	d41f      	bmi.n	800076c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800072c:	6a2b      	ldr	r3, [r5, #32]
 800072e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000732:	d105      	bne.n	8000740 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000734:	6862      	ldr	r2, [r4, #4]
 8000736:	68a9      	ldr	r1, [r5, #8]
 8000738:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800073c:	430a      	orrs	r2, r1
 800073e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000740:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000742:	6862      	ldr	r2, [r4, #4]
 8000744:	430b      	orrs	r3, r1
 8000746:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800074a:	4313      	orrs	r3, r2
 800074c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800074e:	2301      	movs	r3, #1
 8000750:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000752:	f7ff fd3d 	bl	80001d0 <HAL_GetTick>
 8000756:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	019a      	lsls	r2, r3, #6
 800075c:	f53f aea7 	bmi.w	80004ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000760:	f7ff fd36 	bl	80001d0 <HAL_GetTick>
 8000764:	1b40      	subs	r0, r0, r5
 8000766:	2802      	cmp	r0, #2
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x2d4>
 800076a:	e6cd      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800076c:	f7ff fd30 	bl	80001d0 <HAL_GetTick>
 8000770:	1bc0      	subs	r0, r0, r7
 8000772:	2802      	cmp	r0, #2
 8000774:	d9d7      	bls.n	8000726 <HAL_RCC_OscConfig+0x2a2>
 8000776:	e6c7      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000778:	f7ff fd2a 	bl	80001d0 <HAL_GetTick>
 800077c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	f57f ae94 	bpl.w	80004ae <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000786:	f7ff fd23 	bl	80001d0 <HAL_GetTick>
 800078a:	1b40      	subs	r0, r0, r5
 800078c:	2802      	cmp	r0, #2
 800078e:	d9f6      	bls.n	800077e <HAL_RCC_OscConfig+0x2fa>
 8000790:	e6ba      	b.n	8000508 <HAL_RCC_OscConfig+0x84>
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	42420060 	.word	0x42420060

0800079c <HAL_RCC_GetSysClockFreq>:
{
 800079c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007a0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007a2:	ac02      	add	r4, sp, #8
 80007a4:	f103 0510 	add.w	r5, r3, #16
 80007a8:	4622      	mov	r2, r4
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	3308      	adds	r3, #8
 80007b0:	c203      	stmia	r2!, {r0, r1}
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	4614      	mov	r4, r2
 80007b6:	d1f7      	bne.n	80007a8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007b8:	2301      	movs	r3, #1
 80007ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80007be:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007c0:	4911      	ldr	r1, [pc, #68]	; (8000808 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007c2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007c6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007c8:	f003 020c 	and.w	r2, r3, #12
 80007cc:	2a08      	cmp	r2, #8
 80007ce:	d117      	bne.n	8000800 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007d0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007d4:	a806      	add	r0, sp, #24
 80007d6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007d8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007de:	d50c      	bpl.n	80007fa <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007e8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ea:	aa06      	add	r2, sp, #24
 80007ec:	4413      	add	r3, r2
 80007ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007f6:	b007      	add	sp, #28
 80007f8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <HAL_RCC_GetSysClockFreq+0x74>)
 80007fc:	4350      	muls	r0, r2
 80007fe:	e7fa      	b.n	80007f6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000802:	e7f8      	b.n	80007f6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000804:	08001978 	.word	0x08001978
 8000808:	40021000 	.word	0x40021000
 800080c:	007a1200 	.word	0x007a1200
 8000810:	003d0900 	.word	0x003d0900

08000814 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000814:	4a54      	ldr	r2, [pc, #336]	; (8000968 <HAL_RCC_ClockConfig+0x154>)
{
 8000816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081a:	6813      	ldr	r3, [r2, #0]
{
 800081c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	428b      	cmp	r3, r1
{
 8000824:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	d32a      	bcc.n	800087e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000828:	6829      	ldr	r1, [r5, #0]
 800082a:	078c      	lsls	r4, r1, #30
 800082c:	d434      	bmi.n	8000898 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800082e:	07ca      	lsls	r2, r1, #31
 8000830:	d447      	bmi.n	80008c2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000832:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <HAL_RCC_ClockConfig+0x154>)
 8000834:	6813      	ldr	r3, [r2, #0]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	429e      	cmp	r6, r3
 800083c:	f0c0 8082 	bcc.w	8000944 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000840:	682a      	ldr	r2, [r5, #0]
 8000842:	4c4a      	ldr	r4, [pc, #296]	; (800096c <HAL_RCC_ClockConfig+0x158>)
 8000844:	f012 0f04 	tst.w	r2, #4
 8000848:	f040 8087 	bne.w	800095a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800084c:	0713      	lsls	r3, r2, #28
 800084e:	d506      	bpl.n	800085e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	692a      	ldr	r2, [r5, #16]
 8000854:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000858:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800085c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800085e:	f7ff ff9d 	bl	800079c <HAL_RCC_GetSysClockFreq>
 8000862:	6863      	ldr	r3, [r4, #4]
 8000864:	4a42      	ldr	r2, [pc, #264]	; (8000970 <HAL_RCC_ClockConfig+0x15c>)
 8000866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800086a:	5cd3      	ldrb	r3, [r2, r3]
 800086c:	40d8      	lsrs	r0, r3
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <HAL_RCC_ClockConfig+0x160>)
 8000870:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fc6a 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000878:	2000      	movs	r0, #0
}
 800087a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	f023 0307 	bic.w	r3, r3, #7
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000888:	6813      	ldr	r3, [r2, #0]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	4299      	cmp	r1, r3
 8000890:	d0ca      	beq.n	8000828 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800089a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800089e:	bf1e      	ittt	ne
 80008a0:	685a      	ldrne	r2, [r3, #4]
 80008a2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008a6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008a8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008aa:	bf42      	ittt	mi
 80008ac:	685a      	ldrmi	r2, [r3, #4]
 80008ae:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008b2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	68a8      	ldr	r0, [r5, #8]
 80008b8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008bc:	4302      	orrs	r2, r0
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	e7b5      	b.n	800082e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c2:	686a      	ldr	r2, [r5, #4]
 80008c4:	4c29      	ldr	r4, [pc, #164]	; (800096c <HAL_RCC_ClockConfig+0x158>)
 80008c6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ca:	d11c      	bne.n	8000906 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d0:	d0df      	beq.n	8000892 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d8:	f023 0303 	bic.w	r3, r3, #3
 80008dc:	4313      	orrs	r3, r2
 80008de:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008e0:	f7ff fc76 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008e6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d114      	bne.n	8000916 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d09d      	beq.n	8000832 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f6:	f7ff fc6b 	bl	80001d0 <HAL_GetTick>
 80008fa:	1bc0      	subs	r0, r0, r7
 80008fc:	4540      	cmp	r0, r8
 80008fe:	d9f5      	bls.n	80008ec <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000900:	2003      	movs	r0, #3
 8000902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000906:	2a02      	cmp	r2, #2
 8000908:	d102      	bne.n	8000910 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800090a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800090e:	e7df      	b.n	80008d0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000910:	f013 0f02 	tst.w	r3, #2
 8000914:	e7dc      	b.n	80008d0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000916:	2b02      	cmp	r3, #2
 8000918:	d10f      	bne.n	800093a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800091a:	6863      	ldr	r3, [r4, #4]
 800091c:	f003 030c 	and.w	r3, r3, #12
 8000920:	2b08      	cmp	r3, #8
 8000922:	d086      	beq.n	8000832 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000924:	f7ff fc54 	bl	80001d0 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	4540      	cmp	r0, r8
 800092c:	d9f5      	bls.n	800091a <HAL_RCC_ClockConfig+0x106>
 800092e:	e7e7      	b.n	8000900 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000930:	f7ff fc4e 	bl	80001d0 <HAL_GetTick>
 8000934:	1bc0      	subs	r0, r0, r7
 8000936:	4540      	cmp	r0, r8
 8000938:	d8e2      	bhi.n	8000900 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800093a:	6863      	ldr	r3, [r4, #4]
 800093c:	f013 0f0c 	tst.w	r3, #12
 8000940:	d1f6      	bne.n	8000930 <HAL_RCC_ClockConfig+0x11c>
 8000942:	e776      	b.n	8000832 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000944:	6813      	ldr	r3, [r2, #0]
 8000946:	f023 0307 	bic.w	r3, r3, #7
 800094a:	4333      	orrs	r3, r6
 800094c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	429e      	cmp	r6, r3
 8000956:	d19c      	bne.n	8000892 <HAL_RCC_ClockConfig+0x7e>
 8000958:	e772      	b.n	8000840 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800095a:	6863      	ldr	r3, [r4, #4]
 800095c:	68e9      	ldr	r1, [r5, #12]
 800095e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000962:	430b      	orrs	r3, r1
 8000964:	6063      	str	r3, [r4, #4]
 8000966:	e771      	b.n	800084c <HAL_RCC_ClockConfig+0x38>
 8000968:	40022000 	.word	0x40022000
 800096c:	40021000 	.word	0x40021000
 8000970:	08001998 	.word	0x08001998
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_RCC_GetPCLK2Freq+0x14>)
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <HAL_RCC_GetPCLK2Freq+0x18>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000982:	5cd3      	ldrb	r3, [r2, r3]
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000986:	6810      	ldr	r0, [r2, #0]
} 
 8000988:	40d8      	lsrs	r0, r3
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000
 8000990:	080019a8 	.word	0x080019a8
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000998:	6803      	ldr	r3, [r0, #0]
{
 800099a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800099e:	07d9      	lsls	r1, r3, #31
{
 80009a0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009a2:	d520      	bpl.n	80009e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a4:	4c35      	ldr	r4, [pc, #212]	; (8000a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009a6:	69e3      	ldr	r3, [r4, #28]
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	d432      	bmi.n	8000a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80009ac:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	69e3      	ldr	r3, [r4, #28]
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61e3      	str	r3, [r4, #28]
 80009b6:	69e3      	ldr	r3, [r4, #28]
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c0:	4e2f      	ldr	r6, [pc, #188]	; (8000a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80009c2:	6833      	ldr	r3, [r6, #0]
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	d526      	bpl.n	8000a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80009c8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80009ca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80009ce:	d136      	bne.n	8000a3e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80009d0:	6a23      	ldr	r3, [r4, #32]
 80009d2:	686a      	ldr	r2, [r5, #4]
 80009d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009d8:	4313      	orrs	r3, r2
 80009da:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009dc:	b11f      	cbz	r7, 80009e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009de:	69e3      	ldr	r3, [r4, #28]
 80009e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009e4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80009e6:	6828      	ldr	r0, [r5, #0]
 80009e8:	0783      	lsls	r3, r0, #30
 80009ea:	d506      	bpl.n	80009fa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80009ec:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009ee:	68a9      	ldr	r1, [r5, #8]
 80009f0:	6853      	ldr	r3, [r2, #4]
 80009f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80009fa:	f010 0010 	ands.w	r0, r0, #16
 80009fe:	d01b      	beq.n	8000a38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a02:	68e9      	ldr	r1, [r5, #12]
 8000a04:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000a06:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6053      	str	r3, [r2, #4]
 8000a10:	e012      	b.n	8000a38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000a12:	2700      	movs	r7, #0
 8000a14:	e7d4      	b.n	80009c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a16:	6833      	ldr	r3, [r6, #0]
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a1e:	f7ff fbd7 	bl	80001d0 <HAL_GetTick>
 8000a22:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a24:	6833      	ldr	r3, [r6, #0]
 8000a26:	05d8      	lsls	r0, r3, #23
 8000a28:	d4ce      	bmi.n	80009c8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a2a:	f7ff fbd1 	bl	80001d0 <HAL_GetTick>
 8000a2e:	eba0 0008 	sub.w	r0, r0, r8
 8000a32:	2864      	cmp	r0, #100	; 0x64
 8000a34:	d9f6      	bls.n	8000a24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000a36:	2003      	movs	r0, #3
}
 8000a38:	b002      	add	sp, #8
 8000a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a3e:	686a      	ldr	r2, [r5, #4]
 8000a40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d0c3      	beq.n	80009d0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a48:	2001      	movs	r0, #1
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a4c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a4e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a50:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a56:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000a58:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000a5a:	07d9      	lsls	r1, r3, #31
 8000a5c:	d5b8      	bpl.n	80009d0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000a5e:	f7ff fbb7 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a62:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000a66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a68:	6a23      	ldr	r3, [r4, #32]
 8000a6a:	079a      	lsls	r2, r3, #30
 8000a6c:	d4b0      	bmi.n	80009d0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a6e:	f7ff fbaf 	bl	80001d0 <HAL_GetTick>
 8000a72:	1b80      	subs	r0, r0, r6
 8000a74:	4540      	cmp	r0, r8
 8000a76:	d9f7      	bls.n	8000a68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000a78:	e7dd      	b.n	8000a36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40007000 	.word	0x40007000
 8000a84:	42420440 	.word	0x42420440

08000a88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a8c:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000a8e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a90:	ad02      	add	r5, sp, #8
 8000a92:	f103 0610 	add.w	r6, r3, #16
 8000a96:	462a      	mov	r2, r5
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	6859      	ldr	r1, [r3, #4]
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	c203      	stmia	r2!, {r0, r1}
 8000aa0:	42b3      	cmp	r3, r6
 8000aa2:	4615      	mov	r5, r2
 8000aa4:	d1f7      	bne.n	8000a96 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f88d 3004 	strb.w	r3, [sp, #4]
 8000aac:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000aae:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ab0:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000ab4:	d047      	beq.n	8000b46 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000ab6:	2c10      	cmp	r4, #16
 8000ab8:	d017      	beq.n	8000aea <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000aba:	2c01      	cmp	r4, #1
 8000abc:	d14f      	bne.n	8000b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000abe:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000ac2:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000ac4:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000ac6:	4019      	ands	r1, r3
 8000ac8:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000acc:	d044      	beq.n	8000b58 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ad6:	d12d      	bne.n	8000b34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000ad8:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000adc:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000ade:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000ae2:	bf08      	it	eq
 8000ae4:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000ae6:	b006      	add	sp, #24
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000aec:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000af4:	d0f7      	beq.n	8000ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000af6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000afa:	a806      	add	r0, sp, #24
 8000afc:	4402      	add	r2, r0
 8000afe:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b02:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b04:	bf41      	itttt	mi
 8000b06:	685a      	ldrmi	r2, [r3, #4]
 8000b08:	a906      	addmi	r1, sp, #24
 8000b0a:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000b0e:	1852      	addmi	r2, r2, r1
 8000b10:	bf44      	itt	mi
 8000b12:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b16:	4a15      	ldrmi	r2, [pc, #84]	; (8000b6c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b18:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b1a:	bf4c      	ite	mi
 8000b1c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b20:	4a13      	ldrpl	r2, [pc, #76]	; (8000b70 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b22:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b24:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b28:	d4dd      	bmi.n	8000ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b2e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b32:	e7d8      	b.n	8000ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b38:	d111      	bne.n	8000b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000b3a:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000b3c:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000b40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b44:	e7cd      	b.n	8000ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b46:	f7ff ff17 	bl	8000978 <HAL_RCC_GetPCLK2Freq>
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000b52:	3301      	adds	r3, #1
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	e7ea      	b.n	8000b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000b58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b5c:	e7c3      	b.n	8000ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e7c1      	b.n	8000ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000b62:	bf00      	nop
 8000b64:	08001988 	.word	0x08001988
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	007a1200 	.word	0x007a1200
 8000b70:	003d0900 	.word	0x003d0900

08000b74 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b74:	6803      	ldr	r3, [r0, #0]
{
 8000b76:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b78:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000b7a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b7c:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000b7e:	b295      	uxth	r5, r2
 8000b80:	b28c      	uxth	r4, r1
 8000b82:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000b84:	bf1d      	ittte	ne
 8000b86:	69d8      	ldrne	r0, [r3, #28]
 8000b88:	b280      	uxthne	r0, r0
 8000b8a:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000b8e:	b280      	uxtheq	r0, r0
 8000b90:	bf08      	it	eq
 8000b92:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000b96:	bd30      	pop	{r4, r5, pc}

08000b98 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8000b9e:	b29b      	uxth	r3, r3
}
 8000ba0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ba4:	4770      	bx	lr

08000ba6 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8000ba6:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8000ba8:	2809      	cmp	r0, #9
 8000baa:	d803      	bhi.n	8000bb4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8000bac:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8000bb0:	b2c0      	uxtb	r0, r0
 8000bb2:	4770      	bx	lr
    Value -= 10U;
 8000bb4:	380a      	subs	r0, #10
    bcdhigh++;
 8000bb6:	3301      	adds	r3, #1
    Value -= 10U;
 8000bb8:	b2c0      	uxtb	r0, r0
 8000bba:	e7f5      	b.n	8000ba8 <RTC_ByteToBcd2+0x2>

08000bbc <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8000bbc:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8000bbe:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000bc0:	f000 000f 	and.w	r0, r0, #15
 8000bc4:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000bc8:	b2c0      	uxtb	r0, r0
 8000bca:	4770      	bx	lr

08000bcc <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8000bcc:	2902      	cmp	r1, #2
{
 8000bce:	b570      	push	{r4, r5, r6, lr}
 8000bd0:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8000bd4:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8000bd8:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8000bdc:	d81a      	bhi.n	8000c14 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8000bde:	434b      	muls	r3, r1
 8000be0:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8000be4:	fbb3 f0f6 	udiv	r0, r3, r6
 8000be8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bec:	fbb4 f3f3 	udiv	r3, r4, r3
 8000bf0:	3204      	adds	r2, #4
 8000bf2:	442a      	add	r2, r5
 8000bf4:	4410      	add	r0, r2
 8000bf6:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8000bfa:	4418      	add	r0, r3
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	fbb4 f4f3 	udiv	r4, r4, r3
 8000c02:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000c04:	2307      	movs	r3, #7
 8000c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000c0e:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8000c10:	b2c0      	uxtb	r0, r0
 8000c12:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000c14:	fb03 f001 	mul.w	r0, r3, r1
 8000c18:	fbb0 f0f6 	udiv	r0, r0, r6
 8000c1c:	3202      	adds	r2, #2
 8000c1e:	442a      	add	r2, r5
 8000c20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c24:	4410      	add	r0, r2
 8000c26:	2264      	movs	r2, #100	; 0x64
 8000c28:	fbb5 f3f3 	udiv	r3, r5, r3
 8000c2c:	fbb5 f2f2 	udiv	r2, r5, r2
 8000c30:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8000c34:	4418      	add	r0, r3
 8000c36:	1a80      	subs	r0, r0, r2
 8000c38:	e7e4      	b.n	8000c04 <RTC_WeekDayNum+0x38>

08000c3a <RTC_EnterInitMode>:
{
 8000c3a:	b538      	push	{r3, r4, r5, lr}
 8000c3c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000c3e:	f7ff fac7 	bl	80001d0 <HAL_GetTick>
 8000c42:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	0692      	lsls	r2, r2, #26
 8000c4a:	d505      	bpl.n	8000c58 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c4c:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8000c4e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c50:	f042 0210 	orr.w	r2, r2, #16
 8000c54:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c58:	f7ff faba 	bl	80001d0 <HAL_GetTick>
 8000c5c:	1b40      	subs	r0, r0, r5
 8000c5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c62:	d9ef      	bls.n	8000c44 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c64:	2003      	movs	r0, #3
}
 8000c66:	bd38      	pop	{r3, r4, r5, pc}

08000c68 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c68:	6802      	ldr	r2, [r0, #0]
{
 8000c6a:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c6c:	6853      	ldr	r3, [r2, #4]
{
 8000c6e:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c70:	f023 0310 	bic.w	r3, r3, #16
 8000c74:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c76:	f7ff faab 	bl	80001d0 <HAL_GetTick>
 8000c7a:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	069b      	lsls	r3, r3, #26
 8000c82:	d501      	bpl.n	8000c88 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8000c84:	2000      	movs	r0, #0
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c88:	f7ff faa2 	bl	80001d0 <HAL_GetTick>
 8000c8c:	1b40      	subs	r0, r0, r5
 8000c8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c92:	d9f3      	bls.n	8000c7c <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000c94:	2003      	movs	r0, #3
}
 8000c96:	bd38      	pop	{r3, r4, r5, pc}

08000c98 <RTC_WriteTimeCounter>:
{
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000c9e:	f7ff ffcc 	bl	8000c3a <RTC_EnterInitMode>
 8000ca2:	b958      	cbnz	r0, 8000cbc <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000ca8:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000caa:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cac:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cae:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cb0:	f7ff ffda 	bl	8000c68 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cb4:	3000      	adds	r0, #0
 8000cb6:	bf18      	it	ne
 8000cb8:	2001      	movne	r0, #1
 8000cba:	bd38      	pop	{r3, r4, r5, pc}
 8000cbc:	2001      	movs	r0, #1
}
 8000cbe:	bd38      	pop	{r3, r4, r5, pc}

08000cc0 <RTC_WriteAlarmCounter>:
{
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cc6:	f7ff ffb8 	bl	8000c3a <RTC_EnterInitMode>
 8000cca:	b958      	cbnz	r0, 8000ce4 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000cd0:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000cd2:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cd4:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000cd6:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cd8:	f7ff ffc6 	bl	8000c68 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cdc:	3000      	adds	r0, #0
 8000cde:	bf18      	it	ne
 8000ce0:	2001      	movne	r0, #1
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
 8000ce4:	2001      	movs	r0, #1
}
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}

08000ce8 <HAL_RTC_SetTime>:
{
 8000ce8:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8000cea:	4604      	mov	r4, r0
 8000cec:	b1e0      	cbz	r0, 8000d28 <HAL_RTC_SetTime+0x40>
 8000cee:	b1d9      	cbz	r1, 8000d28 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000cf0:	7c03      	ldrb	r3, [r0, #16]
 8000cf2:	2602      	movs	r6, #2
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d046      	beq.n	8000d86 <HAL_RTC_SetTime+0x9e>
 8000cf8:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000cfa:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8000cfc:	7403      	strb	r3, [r0, #16]
 8000cfe:	7808      	ldrb	r0, [r1, #0]
 8000d00:	784e      	ldrb	r6, [r1, #1]
 8000d02:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8000d04:	b992      	cbnz	r2, 8000d2c <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000d06:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d08:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000d0c:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d0e:	fb03 5000 	mla	r0, r3, r0, r5
 8000d12:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000d14:	4629      	mov	r1, r5
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff ffbe 	bl	8000c98 <RTC_WriteTimeCounter>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	b1b0      	cbz	r0, 8000d4e <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000d20:	2304      	movs	r3, #4
 8000d22:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000d24:	2300      	movs	r3, #0
 8000d26:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000d28:	2601      	movs	r6, #1
 8000d2a:	e02c      	b.n	8000d86 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d2c:	f7ff ff46 	bl	8000bbc <RTC_Bcd2ToByte>
 8000d30:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8000d32:	4630      	mov	r0, r6
 8000d34:	f7ff ff42 	bl	8000bbc <RTC_Bcd2ToByte>
 8000d38:	233c      	movs	r3, #60	; 0x3c
 8000d3a:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000d40:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8000d44:	4608      	mov	r0, r1
 8000d46:	f7ff ff39 	bl	8000bbc <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d4a:	4405      	add	r5, r0
 8000d4c:	e7e2      	b.n	8000d14 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d4e:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d50:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d52:	6853      	ldr	r3, [r2, #4]
 8000d54:	f023 0305 	bic.w	r3, r3, #5
 8000d58:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d5a:	f7ff ff1d 	bl	8000b98 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000d5e:	1c43      	adds	r3, r0, #1
 8000d60:	d00d      	beq.n	8000d7e <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8000d62:	4285      	cmp	r5, r0
 8000d64:	d90b      	bls.n	8000d7e <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000d66:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000d6a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff ffa6 	bl	8000cc0 <RTC_WriteAlarmCounter>
 8000d74:	b118      	cbz	r0, 8000d7e <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d76:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000d78:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d7a:	7463      	strb	r3, [r4, #17]
 8000d7c:	e7d4      	b.n	8000d28 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8000d82:	2300      	movs	r3, #0
 8000d84:	7423      	strb	r3, [r4, #16]
}
 8000d86:	4630      	mov	r0, r6
 8000d88:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d8c <HAL_RTC_GetTime>:
{
 8000d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d90:	460d      	mov	r5, r1
 8000d92:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8000d94:	4604      	mov	r4, r0
 8000d96:	b910      	cbnz	r0, 8000d9e <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 8000d98:	2001      	movs	r0, #1
 8000d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	d0fa      	beq.n	8000d98 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8000da2:	6803      	ldr	r3, [r0, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	075e      	lsls	r6, r3, #29
 8000da8:	d4f6      	bmi.n	8000d98 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000daa:	f7ff fee3 	bl	8000b74 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8000dae:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000db2:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000db6:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000db8:	fb02 0213 	mls	r2, r2, r3, r0
 8000dbc:	203c      	movs	r0, #60	; 0x3c
 8000dbe:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dc2:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8000dc6:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000dc8:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dca:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8000dcc:	f240 8085 	bls.w	8000eda <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 8000dd0:	2118      	movs	r1, #24
 8000dd2:	fbb3 f2f1 	udiv	r2, r3, r1
 8000dd6:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dda:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 8000ddc:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dde:	f7ff fedb 	bl	8000b98 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000de2:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000de4:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000de6:	d004      	beq.n	8000df2 <HAL_RTC_GetTime+0x66>
 8000de8:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8000dea:	bf2c      	ite	cs
 8000dec:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8000df0:	1bc6      	subcc	r6, r0, r7
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000df4:	4620      	mov	r0, r4
 8000df6:	fbb7 f9f3 	udiv	r9, r7, r3
 8000dfa:	fb03 7919 	mls	r9, r3, r9, r7
 8000dfe:	4649      	mov	r1, r9
 8000e00:	f7ff ff4a 	bl	8000c98 <RTC_WriteTimeCounter>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d1c7      	bne.n	8000d98 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000e08:	1c72      	adds	r2, r6, #1
 8000e0a:	d02f      	beq.n	8000e6c <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e0c:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff ff55 	bl	8000cc0 <RTC_WriteAlarmCounter>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d1be      	bne.n	8000d98 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8000e1a:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e1c:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8000e1e:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8000e22:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 8000e26:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e2a:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8000e2e:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8000e30:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8000e32:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	d11b      	bne.n	8000e70 <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 8000e38:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8000e3a:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8000e3c:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8000e3e:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8000e40:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8000e42:	f7ff fec3 	bl	8000bcc <RTC_WeekDayNum>
 8000e46:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 8000e48:	f1b8 0f00 	cmp.w	r8, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8000e4e:	7828      	ldrb	r0, [r5, #0]
 8000e50:	f7ff fea9 	bl	8000ba6 <RTC_ByteToBcd2>
 8000e54:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8000e56:	7868      	ldrb	r0, [r5, #1]
 8000e58:	f7ff fea5 	bl	8000ba6 <RTC_ByteToBcd2>
 8000e5c:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 8000e5e:	78a8      	ldrb	r0, [r5, #2]
 8000e60:	f7ff fea1 	bl	8000ba6 <RTC_ByteToBcd2>
 8000e64:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8000e66:	2000      	movs	r0, #0
 8000e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e7cf      	b.n	8000e10 <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e70:	1e4b      	subs	r3, r1, #1
 8000e72:	2b09      	cmp	r3, #9
 8000e74:	d835      	bhi.n	8000ee2 <HAL_RTC_GetTime+0x156>
 8000e76:	fa29 f303 	lsr.w	r3, r9, r3
 8000e7a:	07db      	lsls	r3, r3, #31
 8000e7c:	d42f      	bmi.n	8000ede <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8000e7e:	f021 0302 	bic.w	r3, r1, #2
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d001      	beq.n	8000e8a <HAL_RTC_GetTime+0xfe>
 8000e86:	2b09      	cmp	r3, #9
 8000e88:	d104      	bne.n	8000e94 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 8000e8a:	2a1d      	cmp	r2, #29
      if(day < 31U)
 8000e8c:	d906      	bls.n	8000e9c <HAL_RTC_GetTime+0x110>
        month++;
 8000e8e:	3101      	adds	r1, #1
        day = 1U;
 8000e90:	2201      	movs	r2, #1
 8000e92:	e02d      	b.n	8000ef0 <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8000e94:	2902      	cmp	r1, #2
 8000e96:	d12b      	bne.n	8000ef0 <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 8000e98:	2a1b      	cmp	r2, #27
 8000e9a:	d801      	bhi.n	8000ea0 <HAL_RTC_GetTime+0x114>
        day++;
 8000e9c:	3201      	adds	r2, #1
 8000e9e:	e027      	b.n	8000ef0 <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 8000ea0:	2a1c      	cmp	r2, #28
 8000ea2:	d113      	bne.n	8000ecc <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 8000ea4:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 8000ea6:	0793      	lsls	r3, r2, #30
 8000ea8:	d112      	bne.n	8000ed0 <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 8000eaa:	fbb2 f3fe 	udiv	r3, r2, lr
 8000eae:	fb0e 2313 	mls	r3, lr, r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b97b      	cbnz	r3, 8000ed6 <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 8000eb6:	fbb2 f3fc 	udiv	r3, r2, ip
 8000eba:	fb0c 2313 	mls	r3, ip, r3, r2
 8000ebe:	b29b      	uxth	r3, r3
          day++;
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf16      	itet	ne
 8000ec4:	2201      	movne	r2, #1
 8000ec6:	221d      	moveq	r2, #29
 8000ec8:	2103      	movne	r1, #3
 8000eca:	e011      	b.n	8000ef0 <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 8000ecc:	2a1d      	cmp	r2, #29
 8000ece:	d10f      	bne.n	8000ef0 <HAL_RTC_GetTime+0x164>
          day = 1U;
 8000ed0:	2201      	movs	r2, #1
          month++;
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	e00c      	b.n	8000ef0 <HAL_RTC_GetTime+0x164>
          day++;
 8000ed6:	221d      	movs	r2, #29
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 8000eda:	702b      	strb	r3, [r5, #0]
 8000edc:	e7b4      	b.n	8000e48 <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 8000ede:	2a1e      	cmp	r2, #30
 8000ee0:	e7d4      	b.n	8000e8c <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 8000ee2:	290c      	cmp	r1, #12
 8000ee4:	d1cb      	bne.n	8000e7e <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 8000ee6:	2a1e      	cmp	r2, #30
 8000ee8:	d9d8      	bls.n	8000e9c <HAL_RTC_GetTime+0x110>
          day = 1U;
 8000eea:	2201      	movs	r2, #1
          month = 1U;
 8000eec:	4611      	mov	r1, r2
          year++;
 8000eee:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8000ef0:	3601      	adds	r6, #1
 8000ef2:	e79f      	b.n	8000e34 <HAL_RTC_GetTime+0xa8>
 8000ef4:	00015180 	.word	0x00015180

08000ef8 <HAL_RTC_SetDate>:
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8000efc:	4604      	mov	r4, r0
 8000efe:	b358      	cbz	r0, 8000f58 <HAL_RTC_SetDate+0x60>
 8000f00:	b351      	cbz	r1, 8000f58 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8000f02:	7c03      	ldrb	r3, [r0, #16]
 8000f04:	2002      	movs	r0, #2
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d027      	beq.n	8000f5a <HAL_RTC_SetDate+0x62>
 8000f0a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8000f0c:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 8000f0e:	7423      	strb	r3, [r4, #16]
 8000f10:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8000f12:	bb1a      	cbnz	r2, 8000f5c <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8000f14:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8000f16:	784b      	ldrb	r3, [r1, #1]
 8000f18:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8000f1a:	788b      	ldrb	r3, [r1, #2]
 8000f1c:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8000f1e:	7ba2      	ldrb	r2, [r4, #14]
 8000f20:	7b61      	ldrb	r1, [r4, #13]
 8000f22:	7be0      	ldrb	r0, [r4, #15]
 8000f24:	f7ff fe52 	bl	8000bcc <RTC_WeekDayNum>
 8000f28:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8000f2a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fe21 	bl	8000b74 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_RTC_SetDate+0xac>)
 8000f34:	4298      	cmp	r0, r3
 8000f36:	d930      	bls.n	8000f9a <HAL_RTC_SetDate+0xa2>
 8000f38:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8000f3c:	fbb0 f5f3 	udiv	r5, r0, r3
 8000f40:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000f44:	4620      	mov	r0, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	f7ff fea6 	bl	8000c98 <RTC_WriteTimeCounter>
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	b188      	cbz	r0, 8000f74 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000f50:	2304      	movs	r3, #4
 8000f52:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8000f54:	2300      	movs	r3, #0
 8000f56:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
}
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8000f5c:	f7ff fe2e 	bl	8000bbc <RTC_Bcd2ToByte>
 8000f60:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8000f62:	7848      	ldrb	r0, [r1, #1]
 8000f64:	f7ff fe2a 	bl	8000bbc <RTC_Bcd2ToByte>
 8000f68:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8000f6a:	7888      	ldrb	r0, [r1, #2]
 8000f6c:	f7ff fe26 	bl	8000bbc <RTC_Bcd2ToByte>
 8000f70:	73a0      	strb	r0, [r4, #14]
 8000f72:	e7d4      	b.n	8000f1e <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff fe0f 	bl	8000b98 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000f7a:	1c43      	adds	r3, r0, #1
 8000f7c:	d00d      	beq.n	8000f9a <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8000f7e:	4285      	cmp	r5, r0
 8000f80:	d90b      	bls.n	8000f9a <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000f82:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000f86:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff fe98 	bl	8000cc0 <RTC_WriteAlarmCounter>
 8000f90:	b118      	cbz	r0, 8000f9a <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000f92:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000f94:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000f96:	7463      	strb	r3, [r4, #17]
 8000f98:	e7de      	b.n	8000f58 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8000f9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8000f9c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8000f9e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8000fa0:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	00015f8f 	.word	0x00015f8f

08000fa8 <HAL_RTC_GetDate>:
{
 8000fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000faa:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 8000fac:	2200      	movs	r2, #0
{
 8000fae:	460c      	mov	r4, r1
  RTC_TimeTypeDef stime = {0U};
 8000fb0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8000fb4:	f88d 2006 	strb.w	r2, [sp, #6]
  if((hrtc == NULL) || (sDate == NULL))
 8000fb8:	4605      	mov	r5, r0
 8000fba:	b918      	cbnz	r0, 8000fc4 <HAL_RTC_GetDate+0x1c>
     return HAL_ERROR;
 8000fbc:	2201      	movs	r2, #1
}
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	b003      	add	sp, #12
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((hrtc == NULL) || (sDate == NULL))
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	d0f9      	beq.n	8000fbc <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8000fc8:	a901      	add	r1, sp, #4
 8000fca:	f7ff fedf 	bl	8000d8c <HAL_RTC_GetTime>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d1f3      	bne.n	8000fbc <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8000fd4:	7b2b      	ldrb	r3, [r5, #12]
 8000fd6:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8000fd8:	7be8      	ldrb	r0, [r5, #15]
 8000fda:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8000fdc:	7b6e      	ldrb	r6, [r5, #13]
 8000fde:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8000fe0:	7ba9      	ldrb	r1, [r5, #14]
 8000fe2:	70a1      	strb	r1, [r4, #2]
  if(Format != RTC_FORMAT_BIN)
 8000fe4:	2f00      	cmp	r7, #0
 8000fe6:	d0ea      	beq.n	8000fbe <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8000fe8:	f7ff fddd 	bl	8000ba6 <RTC_ByteToBcd2>
 8000fec:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f7ff fdd9 	bl	8000ba6 <RTC_ByteToBcd2>
 8000ff4:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);  
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	f7ff fdd5 	bl	8000ba6 <RTC_ByteToBcd2>
 8000ffc:	70a0      	strb	r0, [r4, #2]
 8000ffe:	e7de      	b.n	8000fbe <HAL_RTC_GetDate+0x16>

08001000 <HAL_RTC_WaitForSynchro>:
{
 8001000:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001002:	4604      	mov	r4, r0
 8001004:	b1a8      	cbz	r0, 8001032 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001006:	6802      	ldr	r2, [r0, #0]
 8001008:	6853      	ldr	r3, [r2, #4]
 800100a:	f023 0308 	bic.w	r3, r3, #8
 800100e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001010:	f7ff f8de 	bl	80001d0 <HAL_GetTick>
 8001014:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	071b      	lsls	r3, r3, #28
 800101c:	d501      	bpl.n	8001022 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 800101e:	2000      	movs	r0, #0
 8001020:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8001022:	f7ff f8d5 	bl	80001d0 <HAL_GetTick>
 8001026:	1b40      	subs	r0, r0, r5
 8001028:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800102c:	d9f3      	bls.n	8001016 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
}
 8001030:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	bd38      	pop	{r3, r4, r5, pc}
	...

08001038 <HAL_RTC_Init>:
{
 8001038:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 800103a:	4604      	mov	r4, r0
 800103c:	b170      	cbz	r0, 800105c <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800103e:	7c43      	ldrb	r3, [r0, #17]
 8001040:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001044:	b913      	cbnz	r3, 800104c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001046:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001048:	f000 fbae 	bl	80017a8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800104c:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800104e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001050:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001052:	f7ff ffd5 	bl	8001000 <HAL_RTC_WaitForSynchro>
 8001056:	b118      	cbz	r0, 8001060 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001058:	2304      	movs	r3, #4
 800105a:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
}
 800105e:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001060:	4620      	mov	r0, r4
 8001062:	f7ff fdea 	bl	8000c3a <RTC_EnterInitMode>
 8001066:	2800      	cmp	r0, #0
 8001068:	d1f6      	bne.n	8001058 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800106a:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800106c:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800106e:	6853      	ldr	r3, [r2, #4]
 8001070:	f023 0307 	bic.w	r3, r3, #7
 8001074:	6053      	str	r3, [r2, #4]
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001078:	b118      	cbz	r0, 8001082 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800107a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800107c:	f021 0101 	bic.w	r1, r1, #1
 8001080:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001082:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001084:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001088:	4303      	orrs	r3, r0
 800108a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800108c:	6860      	ldr	r0, [r4, #4]
 800108e:	1c43      	adds	r3, r0, #1
 8001090:	d105      	bne.n	800109e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff fcf8 	bl	8000a88 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001098:	2800      	cmp	r0, #0
 800109a:	d0dd      	beq.n	8001058 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 800109c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	6893      	ldr	r3, [r2, #8]
 80010a2:	f023 030f 	bic.w	r3, r3, #15
 80010a6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80010aa:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80010ac:	68d3      	ldr	r3, [r2, #12]
 80010ae:	b280      	uxth	r0, r0
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	041b      	lsls	r3, r3, #16
 80010b4:	4318      	orrs	r0, r3
 80010b6:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff fdd5 	bl	8000c68 <RTC_ExitInitMode>
 80010be:	2301      	movs	r3, #1
 80010c0:	b110      	cbz	r0, 80010c8 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80010c2:	2204      	movs	r2, #4
 80010c4:	7462      	strb	r2, [r4, #17]
 80010c6:	e7c9      	b.n	800105c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 80010c8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80010ca:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80010cc:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80010ce:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	bf00      	nop
 80010d4:	40006c00 	.word	0x40006c00

080010d8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010d8:	6a03      	ldr	r3, [r0, #32]
{
 80010da:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010e6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80010f2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80010f6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80010f8:	4d0a      	ldr	r5, [pc, #40]	; (8001124 <TIM_OC1_SetConfig+0x4c>)
 80010fa:	42a8      	cmp	r0, r5
 80010fc:	d10b      	bne.n	8001116 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001100:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001104:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001106:	698e      	ldr	r6, [r1, #24]
 8001108:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800110a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800110e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001110:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001114:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001116:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001118:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800111a:	684a      	ldr	r2, [r1, #4]
 800111c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800111e:	6203      	str	r3, [r0, #32]
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00

08001128 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001128:	6a03      	ldr	r3, [r0, #32]
{
 800112a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800112c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001130:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001132:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001134:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001136:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001138:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800113a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800113e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001140:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001142:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001146:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800114a:	4d0b      	ldr	r5, [pc, #44]	; (8001178 <TIM_OC3_SetConfig+0x50>)
 800114c:	42a8      	cmp	r0, r5
 800114e:	d10d      	bne.n	800116c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001150:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001156:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800115a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800115c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800115e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001162:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001168:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800116c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800116e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001170:	684a      	ldr	r2, [r1, #4]
 8001172:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001174:	6203      	str	r3, [r0, #32]
 8001176:	bd70      	pop	{r4, r5, r6, pc}
 8001178:	40012c00 	.word	0x40012c00

0800117c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800117c:	6a03      	ldr	r3, [r0, #32]
{
 800117e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001184:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001186:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001188:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800118a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800118c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800118e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001192:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001196:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800119c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011a0:	4d06      	ldr	r5, [pc, #24]	; (80011bc <TIM_OC4_SetConfig+0x40>)
 80011a2:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80011a4:	bf02      	ittt	eq
 80011a6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011a8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80011ac:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011b4:	684a      	ldr	r2, [r1, #4]
 80011b6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011b8:	6203      	str	r3, [r0, #32]
 80011ba:	bd30      	pop	{r4, r5, pc}
 80011bc:	40012c00 	.word	0x40012c00

080011c0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80011c2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011c4:	4290      	cmp	r0, r2
 80011c6:	d00a      	beq.n	80011de <TIM_Base_SetConfig+0x1e>
 80011c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011cc:	d007      	beq.n	80011de <TIM_Base_SetConfig+0x1e>
 80011ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d003      	beq.n	80011de <TIM_Base_SetConfig+0x1e>
 80011d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011da:	4290      	cmp	r0, r2
 80011dc:	d115      	bne.n	800120a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80011de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011e4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <TIM_Base_SetConfig+0x6c>)
 80011e8:	4290      	cmp	r0, r2
 80011ea:	d00a      	beq.n	8001202 <TIM_Base_SetConfig+0x42>
 80011ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011f0:	d007      	beq.n	8001202 <TIM_Base_SetConfig+0x42>
 80011f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011f6:	4290      	cmp	r0, r2
 80011f8:	d003      	beq.n	8001202 <TIM_Base_SetConfig+0x42>
 80011fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fe:	4290      	cmp	r0, r2
 8001200:	d103      	bne.n	800120a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001202:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001208:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800120a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800120c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001210:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001212:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001214:	688b      	ldr	r3, [r1, #8]
 8001216:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001218:	680b      	ldr	r3, [r1, #0]
 800121a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <TIM_Base_SetConfig+0x6c>)
 800121e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001220:	bf04      	itt	eq
 8001222:	690b      	ldreq	r3, [r1, #16]
 8001224:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001226:	2301      	movs	r3, #1
 8001228:	6143      	str	r3, [r0, #20]
 800122a:	4770      	bx	lr
 800122c:	40012c00 	.word	0x40012c00

08001230 <HAL_TIM_PWM_Init>:
{
 8001230:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001232:	4604      	mov	r4, r0
 8001234:	b1a0      	cbz	r0, 8001260 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001236:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800123a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800123e:	b91b      	cbnz	r3, 8001248 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001240:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001244:	f000 face 	bl	80017e4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001248:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800124a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800124c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001250:	1d21      	adds	r1, r4, #4
 8001252:	f7ff ffb5 	bl	80011c0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001256:	2301      	movs	r3, #1
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800125a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800125e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001260:	2001      	movs	r0, #1
}
 8001262:	bd10      	pop	{r4, pc}

08001264 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001264:	6a03      	ldr	r3, [r0, #32]
{
 8001266:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001268:	f023 0310 	bic.w	r3, r3, #16
 800126c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800126e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001270:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001272:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001274:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001276:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800127a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800127e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001280:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001284:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001288:	4d0b      	ldr	r5, [pc, #44]	; (80012b8 <TIM_OC2_SetConfig+0x54>)
 800128a:	42a8      	cmp	r0, r5
 800128c:	d10d      	bne.n	80012aa <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800128e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001294:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001298:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800129a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800129c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012a0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80012a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012a6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80012aa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012ac:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80012ae:	684a      	ldr	r2, [r1, #4]
 80012b0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80012b2:	6203      	str	r3, [r0, #32]
 80012b4:	bd70      	pop	{r4, r5, r6, pc}
 80012b6:	bf00      	nop
 80012b8:	40012c00 	.word	0x40012c00

080012bc <HAL_TIM_PWM_ConfigChannel>:
{
 80012bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80012be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f04f 0002 	mov.w	r0, #2
 80012ca:	d025      	beq.n	8001318 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80012cc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012ce:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80012d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80012d6:	2a0c      	cmp	r2, #12
 80012d8:	d818      	bhi.n	800130c <HAL_TIM_PWM_ConfigChannel+0x50>
 80012da:	e8df f002 	tbb	[pc, r2]
 80012de:	1707      	.short	0x1707
 80012e0:	171e1717 	.word	0x171e1717
 80012e4:	172f1717 	.word	0x172f1717
 80012e8:	1717      	.short	0x1717
 80012ea:	40          	.byte	0x40
 80012eb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012ec:	6820      	ldr	r0, [r4, #0]
 80012ee:	f7ff fef3 	bl	80010d8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80012f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	f042 0208 	orr.w	r2, r2, #8
 80012fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	f022 0204 	bic.w	r2, r2, #4
 8001304:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800130a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800130c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800130e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001310:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001314:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001318:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800131a:	6820      	ldr	r0, [r4, #0]
 800131c:	f7ff ffa2 	bl	8001264 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001320:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001322:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001324:	699a      	ldr	r2, [r3, #24]
 8001326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800133a:	e7e6      	b.n	800130a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800133c:	6820      	ldr	r0, [r4, #0]
 800133e:	f7ff fef3 	bl	8001128 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001342:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001344:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	f042 0208 	orr.w	r2, r2, #8
 800134c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800134e:	69da      	ldr	r2, [r3, #28]
 8001350:	f022 0204 	bic.w	r2, r2, #4
 8001354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800135a:	61da      	str	r2, [r3, #28]
    break;
 800135c:	e7d6      	b.n	800130c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	f7ff ff0c 	bl	800117c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001364:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001366:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800136e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001370:	69da      	ldr	r2, [r3, #28]
 8001372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001376:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001378:	69da      	ldr	r2, [r3, #28]
 800137a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800137e:	e7ec      	b.n	800135a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001380 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001380:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001382:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001384:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001386:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001388:	ea23 0304 	bic.w	r3, r3, r4
 800138c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800138e:	6a03      	ldr	r3, [r0, #32]
 8001390:	408a      	lsls	r2, r1
 8001392:	431a      	orrs	r2, r3
 8001394:	6202      	str	r2, [r0, #32]
 8001396:	bd10      	pop	{r4, pc}

08001398 <HAL_TIM_PWM_Start>:
{
 8001398:	b510      	push	{r4, lr}
 800139a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800139c:	2201      	movs	r2, #1
 800139e:	6800      	ldr	r0, [r0, #0]
 80013a0:	f7ff ffee 	bl	8001380 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_TIM_PWM_Start+0x28>)
}
 80013a8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013aa:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80013ac:	bf02      	ittt	eq
 80013ae:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013b0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80013b4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bd10      	pop	{r4, pc}
 80013c0:	40012c00 	.word	0x40012c00

080013c4 <HAL_TIM_PWM_Stop>:
{
 80013c4:	b510      	push	{r4, lr}
 80013c6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6800      	ldr	r0, [r0, #0]
 80013cc:	f7ff ffd8 	bl	8001380 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_TIM_PWM_Stop+0x58>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d10d      	bne.n	80013f4 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80013d8:	f241 1211 	movw	r2, #4369	; 0x1111
 80013dc:	6a19      	ldr	r1, [r3, #32]
 80013de:	4211      	tst	r1, r2
 80013e0:	d108      	bne.n	80013f4 <HAL_TIM_PWM_Stop+0x30>
 80013e2:	f240 4244 	movw	r2, #1092	; 0x444
 80013e6:	6a19      	ldr	r1, [r3, #32]
 80013e8:	4211      	tst	r1, r2
 80013ea:	bf02      	ittt	eq
 80013ec:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013ee:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80013f2:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80013f4:	f241 1211 	movw	r2, #4369	; 0x1111
 80013f8:	6a19      	ldr	r1, [r3, #32]
 80013fa:	4211      	tst	r1, r2
 80013fc:	d108      	bne.n	8001410 <HAL_TIM_PWM_Stop+0x4c>
 80013fe:	f240 4244 	movw	r2, #1092	; 0x444
 8001402:	6a19      	ldr	r1, [r3, #32]
 8001404:	4211      	tst	r1, r2
 8001406:	bf02      	ittt	eq
 8001408:	681a      	ldreq	r2, [r3, #0]
 800140a:	f022 0201 	biceq.w	r2, r2, #1
 800140e:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001410:	2301      	movs	r3, #1
}
 8001412:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001418:	bd10      	pop	{r4, pc}
 800141a:	bf00      	nop
 800141c:	40012c00 	.word	0x40012c00

08001420 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001420:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d01f      	beq.n	8001468 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001428:	68cb      	ldr	r3, [r1, #12]
 800142a:	688a      	ldr	r2, [r1, #8]
 800142c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001430:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001432:	684a      	ldr	r2, [r1, #4]
 8001434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001438:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800143a:	680a      	ldr	r2, [r1, #0]
 800143c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001440:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001442:	690a      	ldr	r2, [r1, #16]
 8001444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001448:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800144a:	694a      	ldr	r2, [r1, #20]
 800144c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001450:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001452:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001454:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001458:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800145a:	6802      	ldr	r2, [r0, #0]
 800145c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800145e:	2300      	movs	r3, #0
 8001460:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001464:	4618      	mov	r0, r3
 8001466:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001468:	2002      	movs	r0, #2
}
 800146a:	4770      	bx	lr

0800146c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800146c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001470:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001472:	2b01      	cmp	r3, #1
 8001474:	f04f 0302 	mov.w	r3, #2
 8001478:	d018      	beq.n	80014ac <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800147a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800147e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001480:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001482:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001484:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001486:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800148a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4322      	orrs	r2, r4
 8001490:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001498:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014a6:	2300      	movs	r3, #0
 80014a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014ac:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014ae:	bd10      	pop	{r4, pc}

080014b0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b0:	2228      	movs	r2, #40	; 0x28
{
 80014b2:	b530      	push	{r4, r5, lr}
 80014b4:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	eb0d 0002 	add.w	r0, sp, r2
 80014ba:	2100      	movs	r1, #0
 80014bc:	f000 fa48 	bl	8001950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	2214      	movs	r2, #20
 80014c2:	2100      	movs	r1, #0
 80014c4:	eb0d 0002 	add.w	r0, sp, r2
 80014c8:	f000 fa42 	bl	8001950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	2210      	movs	r2, #16
 80014ce:	2100      	movs	r1, #0
 80014d0:	a801      	add	r0, sp, #4
 80014d2:	f000 fa3d 	bl	8001950 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80014d6:	2305      	movs	r3, #5
 80014d8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014de:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ea:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014ec:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ee:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f7fe ffc6 	bl	8000484 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fe:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001502:	4629      	mov	r1, r5
 8001504:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001506:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001508:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	f7ff f981 	bl	8000814 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001512:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001516:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001518:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800151a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	f7ff fa3c 	bl	8000998 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001520:	b015      	add	sp, #84	; 0x54
 8001522:	bd30      	pop	{r4, r5, pc}

08001524 <main>:

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	2400      	movs	r4, #0
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 800152a:	f7fe fe33 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800152e:	f7ff ffbf 	bl	80014b0 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <main+0x180>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001534:	4621      	mov	r1, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	699a      	ldr	r2, [r3, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001538:	a816      	add	r0, sp, #88	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	f042 0210 	orr.w	r2, r2, #16
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8001542:	4e59      	ldr	r6, [pc, #356]	; (80016a8 <main+0x184>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	f002 0210 	and.w	r2, r2, #16
 8001548:	9211      	str	r2, [sp, #68]	; 0x44
 800154a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154c:	699a      	ldr	r2, [r3, #24]
  hrtc.Instance = RTC;
 800154e:	4f57      	ldr	r7, [pc, #348]	; (80016ac <main+0x188>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	f042 0220 	orr.w	r2, r2, #32
 8001554:	619a      	str	r2, [r3, #24]
 8001556:	699a      	ldr	r2, [r3, #24]
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BIN); // order is specific
 8001558:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80016b8 <main+0x194>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155c:	f002 0220 	and.w	r2, r2, #32
 8001560:	9212      	str	r2, [sp, #72]	; 0x48
 8001562:	9a12      	ldr	r2, [sp, #72]	; 0x48
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	699a      	ldr	r2, [r3, #24]
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BIN);
 8001566:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80016bc <main+0x198>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	f042 0204 	orr.w	r2, r2, #4
 800156e:	619a      	str	r2, [r3, #24]
 8001570:	699b      	ldr	r3, [r3, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	221c      	movs	r2, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	9313      	str	r3, [sp, #76]	; 0x4c
 800157a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	9414      	str	r4, [sp, #80]	; 0x50
 800157e:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001580:	f000 f9e6 	bl	8001950 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001584:	4621      	mov	r1, r4
 8001586:	221c      	movs	r2, #28
 8001588:	a81d      	add	r0, sp, #116	; 0x74
 800158a:	f000 f9e1 	bl	8001950 <memset>
  htim1.Init.Prescaler = 4000;
 800158e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001592:	4a47      	ldr	r2, [pc, #284]	; (80016b0 <main+0x18c>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001594:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 4000;
 8001596:	e886 000c 	stmia.w	r6, {r2, r3}
  htim1.Init.Period = 500;
 800159a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	60b4      	str	r4, [r6, #8]
  htim1.Init.Period = 500;
 80015a0:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	6134      	str	r4, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	6174      	str	r4, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015a8:	f7ff fe42 	bl	8001230 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ac:	a914      	add	r1, sp, #80	; 0x50
 80015ae:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b4:	f7ff ff5a 	bl	800146c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ba:	2204      	movs	r2, #4
 80015bc:	a916      	add	r1, sp, #88	; 0x58
 80015be:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c0:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 80015c2:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c4:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c6:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c8:	941a      	str	r4, [sp, #104]	; 0x68
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ca:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ce:	f7ff fe75 	bl	80012bc <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015d6:	a91d      	add	r1, sp, #116	; 0x74
 80015d8:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015da:	9322      	str	r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015dc:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015de:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e0:	941f      	str	r4, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	9420      	str	r4, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e4:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e6:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e8:	f7ff ff1a 	bl	8001420 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 80015ec:	4630      	mov	r0, r6
 80015ee:	f000 f90d 	bl	800180c <HAL_TIM_MspPostInit>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80015f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295
 80015fa:	482e      	ldr	r0, [pc, #184]	; (80016b4 <main+0x190>)
  RTC_TimeTypeDef sTime = {0};
 80015fc:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001600:	e887 000b 	stmia.w	r7, {r0, r1, r3}
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001604:	4638      	mov	r0, r7
  RTC_TimeTypeDef sTime = {0};
 8001606:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  RTC_DateTypeDef DateToUpdate = {0};
 800160a:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800160c:	f7ff fd14 	bl	8001038 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001610:	2201      	movs	r2, #1
 8001612:	a916      	add	r1, sp, #88	; 0x58
 8001614:	4638      	mov	r0, r7
  sTime.Hours = 0x0;
 8001616:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
  sTime.Minutes = 0x0;
 800161a:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
  sTime.Seconds = 0x0;
 800161e:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001622:	f7ff fb61 	bl	8000ce8 <HAL_RTC_SetTime>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001626:	2201      	movs	r2, #1
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001628:	a91d      	add	r1, sp, #116	; 0x74
 800162a:	4638      	mov	r0, r7
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800162c:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001630:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
  DateToUpdate.Date = 0x1;
 8001634:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
  DateToUpdate.Year = 0x0;
 8001638:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800163c:	f7ff fc5c 	bl	8000ef8 <HAL_RTC_SetDate>
  Set_Current_Time(hrtc); // syncs up RTC with the system clock at compile time.
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001648:	f000 f864 	bl	8001714 <Set_Current_Time>
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BIN); // order is specific
 800164c:	2200      	movs	r2, #0
 800164e:	491a      	ldr	r1, [pc, #104]	; (80016b8 <main+0x194>)
 8001650:	4638      	mov	r0, r7
 8001652:	f7ff fb9b 	bl	8000d8c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BIN);
 8001656:	2200      	movs	r2, #0
 8001658:	4918      	ldr	r1, [pc, #96]	; (80016bc <main+0x198>)
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff fca4 	bl	8000fa8 <HAL_RTC_GetDate>
	  if(userDate.WeekDay==RTC_WEEKDAY_THURSDAY){
 8001660:	f899 3000 	ldrb.w	r3, [r9]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d1f1      	bne.n	800164c <main+0x128>
		  if(userTime.Hours==13){
 8001668:	f898 2000 	ldrb.w	r2, [r8]
			  setPWM(htim1,TIM_CHANNEL_2,500,0);
 800166c:	466c      	mov	r4, sp
		  if(userTime.Hours==13){
 800166e:	2a0d      	cmp	r2, #13
			  setPWM(htim1,TIM_CHANNEL_2,500,100);
 8001670:	bf0c      	ite	eq
 8001672:	2164      	moveq	r1, #100	; 0x64
			  setPWM(htim1,TIM_CHANNEL_2,500,0);
 8001674:	2100      	movne	r1, #0
 8001676:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800167a:	4d11      	ldr	r5, [pc, #68]	; (80016c0 <main+0x19c>)
 800167c:	910e      	str	r1, [sp, #56]	; 0x38
 800167e:	920d      	str	r2, [sp, #52]	; 0x34
 8001680:	930c      	str	r3, [sp, #48]	; 0x30
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001692:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001696:	f000 f815 	bl	80016c4 <setPWM>
			  HAL_Delay(10);
 800169a:	200a      	movs	r0, #10
 800169c:	f7fe fd9e 	bl	80001dc <HAL_Delay>
 80016a0:	e7d4      	b.n	800164c <main+0x128>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	20000048 	.word	0x20000048
 80016ac:	20000034 	.word	0x20000034
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40002800 	.word	0x40002800
 80016b8:	2000002c 	.word	0x2000002c
 80016bc:	20000028 	.word	0x20000028
 80016c0:	20000058 	.word	0x20000058

080016c4 <setPWM>:
#include "pwm.h"

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 80016c4:	b084      	sub	sp, #16
 80016c6:	b500      	push	{lr}
 80016c8:	b089      	sub	sp, #36	; 0x24
 80016ca:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80016ce:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 80016d2:	4670      	mov	r0, lr
 80016d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80016d6:	f7ff fe75 	bl	80013c4 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 80016da:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80016de:	a80a      	add	r0, sp, #40	; 0x28
 timer.Init.Period = period; // set the period duration
 80016e0:	930d      	str	r3, [sp, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 80016e2:	f7ff fda5 	bl	8001230 <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	9301      	str	r3, [sp, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80016ea:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 sConfigOC.Pulse = pulse; // set the pulse duration
 80016f0:	9302      	str	r3, [sp, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f2:	2300      	movs	r3, #0
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016f4:	a901      	add	r1, sp, #4
 80016f6:	a80a      	add	r0, sp, #40	; 0x28
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	9303      	str	r3, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fa:	9305      	str	r3, [sp, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80016fc:	f7ff fdde 	bl	80012bc <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001700:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001702:	a80a      	add	r0, sp, #40	; 0x28
 8001704:	f7ff fe48 	bl	8001398 <HAL_TIM_PWM_Start>
}
 8001708:	b009      	add	sp, #36	; 0x24
 800170a:	f85d eb04 	ldr.w	lr, [sp], #4
 800170e:	b004      	add	sp, #16
 8001710:	4770      	bx	lr
	...

08001714 <Set_Current_Time>:
*/


  /**Set the time to current time.
  */
  sTime.Hours = HOUR;
 8001714:	230d      	movs	r3, #13
{
 8001716:	b537      	push	{r0, r1, r2, r4, r5, lr}
  sTime.Hours = HOUR;
 8001718:	f88d 3000 	strb.w	r3, [sp]
  sTime.Minutes = (BUILD_MIN_CH0-'0')*10+(BUILD_MIN_CH1-'0');
 800171c:	2325      	movs	r3, #37	; 0x25
  RTC_TimeTypeDef sTime = {0};
 800171e:	2400      	movs	r4, #0
  sTime.Minutes = (BUILD_MIN_CH0-'0')*10+(BUILD_MIN_CH1-'0');
 8001720:	f88d 3001 	strb.w	r3, [sp, #1]
  sTime.Seconds = SECOND;
 8001724:	2326      	movs	r3, #38	; 0x26

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001726:	4d0e      	ldr	r5, [pc, #56]	; (8001760 <Set_Current_Time+0x4c>)
 8001728:	4622      	mov	r2, r4
 800172a:	4669      	mov	r1, sp
 800172c:	4628      	mov	r0, r5
  sTime.Seconds = SECOND;
 800172e:	f88d 3002 	strb.w	r3, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001732:	9401      	str	r4, [sp, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001734:	f7ff fad8 	bl	8000ce8 <HAL_RTC_SetTime>
  uint8_t year = YEAR;


  //DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  //DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.WeekDay = dayofweek(DAY,MONTH,YEAR);
 8001738:	2304      	movs	r3, #4
 800173a:	f88d 3004 	strb.w	r3, [sp, #4]
  DateToUpdate.Month = MONTH;
 800173e:	2301      	movs	r3, #1
 8001740:	f88d 3005 	strb.w	r3, [sp, #5]
  DateToUpdate.Date = DAY;
 8001744:	231f      	movs	r3, #31
 8001746:	f88d 3006 	strb.w	r3, [sp, #6]
  DateToUpdate.Year = YEAR-2000; // it is 100 years, so we set it to reference year 2000
 800174a:	2313      	movs	r3, #19

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800174c:	4622      	mov	r2, r4
 800174e:	a901      	add	r1, sp, #4
 8001750:	4628      	mov	r0, r5
  DateToUpdate.Year = YEAR-2000; // it is 100 years, so we set it to reference year 2000
 8001752:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001756:	f7ff fbcf 	bl	8000ef8 <HAL_RTC_SetDate>
    //Error_Handler();
	//crap
  }


}
 800175a:	b003      	add	sp, #12
 800175c:	bd30      	pop	{r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20000034 	.word	0x20000034

08001764 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_MspInit+0x3c>)
{
 8001766:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001768:	699a      	ldr	r2, [r3, #24]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	f002 0201 	and.w	r2, r2, #1
 8001776:	9200      	str	r2, [sp, #0]
 8001778:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	69da      	ldr	r2, [r3, #28]
 800177c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001780:	61da      	str	r2, [r3, #28]
 8001782:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800178e:	6853      	ldr	r3, [r2, #4]
 8001790:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	b002      	add	sp, #8
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000

080017a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017a8:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RTC_MspInit+0x30>)
 80017ac:	6802      	ldr	r2, [r0, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d10e      	bne.n	80017d0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80017b2:	f7fe fe61 	bl	8000478 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RTC_MspInit+0x34>)
 80017b8:	69da      	ldr	r2, [r3, #28]
 80017ba:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80017be:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017c0:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_RTC_MspInit+0x38>)
 80017ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017d0:	b003      	add	sp, #12
 80017d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80017d6:	bf00      	nop
 80017d8:	40002800 	.word	0x40002800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	4242043c 	.word	0x4242043c

080017e4 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80017e4:	6802      	ldr	r2, [r0, #0]
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_TIM_PWM_MspInit+0x24>)
{
 80017e8:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d10a      	bne.n	8001804 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ee:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001804:	b002      	add	sp, #8
 8001806:	4770      	bx	lr
 8001808:	40012c00 	.word	0x40012c00

0800180c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	4604      	mov	r4, r0
 8001810:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	2210      	movs	r2, #16
 8001814:	2100      	movs	r1, #0
 8001816:	a802      	add	r0, sp, #8
 8001818:	f000 f89a 	bl	8001950 <memset>
  if(htim->Instance==TIM1)
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_TIM_MspPostInit+0x48>)
 8001820:	429a      	cmp	r2, r3
 8001822:	d114      	bne.n	800184e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001828:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	f042 0204 	orr.w	r2, r2, #4
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001842:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f7fe fd35 	bl	80002b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800184e:	b006      	add	sp, #24
 8001850:	bd10      	pop	{r4, pc}
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00
 8001858:	40010800 	.word	0x40010800

0800185c <NMI_Handler>:
 800185c:	4770      	bx	lr

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	e7fe      	b.n	800185e <HardFault_Handler>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	e7fe      	b.n	8001862 <BusFault_Handler>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler>

08001866 <SVC_Handler>:
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:
 8001868:	4770      	bx	lr

0800186a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f7fe bca4 	b.w	80001b8 <HAL_IncTick>

08001870 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <SystemInit+0x40>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <SystemInit+0x44>)
 800187e:	400a      	ands	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800188c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001894:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800189c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800189e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80018a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80018a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <SystemInit+0x48>)
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	f8ff0000 	.word	0xf8ff0000
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018be:	e003      	b.n	80018c8 <LoopCopyDataInit>

080018c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018c6:	3104      	adds	r1, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018d0:	d3f6      	bcc.n	80018c0 <CopyDataInit>
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018d4:	e002      	b.n	80018dc <LoopFillZerobss>

080018d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018d8:	f842 3b04 	str.w	r3, [r2], #4

080018dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018e0:	d3f9      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff ffc5 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f000 f80f 	bl	8001908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ea:	f7ff fe1b 	bl	8001524 <main>
  bx lr
 80018ee:	4770      	bx	lr
  ldr r3, =_sidata
 80018f0:	080019b8 	.word	0x080019b8
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80018fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001900:	20000088 	.word	0x20000088

08001904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_2_IRQHandler>
	...

08001908 <__libc_init_array>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	2500      	movs	r5, #0
 800190c:	4e0c      	ldr	r6, [pc, #48]	; (8001940 <__libc_init_array+0x38>)
 800190e:	4c0d      	ldr	r4, [pc, #52]	; (8001944 <__libc_init_array+0x3c>)
 8001910:	1ba4      	subs	r4, r4, r6
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	42a5      	cmp	r5, r4
 8001916:	d109      	bne.n	800192c <__libc_init_array+0x24>
 8001918:	f000 f822 	bl	8001960 <_init>
 800191c:	2500      	movs	r5, #0
 800191e:	4e0a      	ldr	r6, [pc, #40]	; (8001948 <__libc_init_array+0x40>)
 8001920:	4c0a      	ldr	r4, [pc, #40]	; (800194c <__libc_init_array+0x44>)
 8001922:	1ba4      	subs	r4, r4, r6
 8001924:	10a4      	asrs	r4, r4, #2
 8001926:	42a5      	cmp	r5, r4
 8001928:	d105      	bne.n	8001936 <__libc_init_array+0x2e>
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001930:	4798      	blx	r3
 8001932:	3501      	adds	r5, #1
 8001934:	e7ee      	b.n	8001914 <__libc_init_array+0xc>
 8001936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800193a:	4798      	blx	r3
 800193c:	3501      	adds	r5, #1
 800193e:	e7f2      	b.n	8001926 <__libc_init_array+0x1e>
 8001940:	080019b0 	.word	0x080019b0
 8001944:	080019b0 	.word	0x080019b0
 8001948:	080019b0 	.word	0x080019b0
 800194c:	080019b4 	.word	0x080019b4

08001950 <memset>:
 8001950:	4603      	mov	r3, r0
 8001952:	4402      	add	r2, r0
 8001954:	4293      	cmp	r3, r2
 8001956:	d100      	bne.n	800195a <memset+0xa>
 8001958:	4770      	bx	lr
 800195a:	f803 1b01 	strb.w	r1, [r3], #1
 800195e:	e7f9      	b.n	8001954 <memset+0x4>

08001960 <_init>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	bf00      	nop
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr

0800196c <_fini>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	bf00      	nop
 8001970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001972:	bc08      	pop	{r3}
 8001974:	469e      	mov	lr, r3
 8001976:	4770      	bx	lr
