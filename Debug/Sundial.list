
Sundial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003148  08003148  00013148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000228  20000000  08003150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b4  20000228  08003378  00020228  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002dc  08003378  000202dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013058  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002925  00000000  00000000  000332a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000058ee  00000000  00000000  00035bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000880  00000000  00000000  0003b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ae8  00000000  00000000  0003bd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004ed9  00000000  00000000  0003c828  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003373  00000000  00000000  00041701  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044a74  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002210  00000000  00000000  00044af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000018  00000000  00000000  00046e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000123  00000000  00000000  00046d00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000228 	.word	0x20000228
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec4 	.word	0x08002ec4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000022c 	.word	0x2000022c
 8000148:	08002ec4 	.word	0x08002ec4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000170:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <HAL_InitTick+0x3c>)
{
 8000174:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000176:	7818      	ldrb	r0, [r3, #0]
 8000178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <HAL_InitTick+0x40>)
 8000182:	6810      	ldr	r0, [r2, #0]
 8000184:	fbb0 f0f3 	udiv	r0, r0, r3
 8000188:	f000 f880 	bl	800028c <HAL_SYSTICK_Config>
 800018c:	4604      	mov	r4, r0
 800018e:	b958      	cbnz	r0, 80001a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000190:	2d0f      	cmp	r5, #15
 8000192:	d809      	bhi.n	80001a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000194:	4602      	mov	r2, r0
 8000196:	4629      	mov	r1, r5
 8000198:	f04f 30ff 	mov.w	r0, #4294967295
 800019c:	f000 f842 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <HAL_InitTick+0x44>)
 80001a2:	4620      	mov	r0, r4
 80001a4:	601d      	str	r5, [r3, #0]
 80001a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80001a8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80001aa:	bd38      	pop	{r3, r4, r5, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	20000008 	.word	0x20000008
 80001b4:	20000004 	.word	0x20000004

080001b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <HAL_Init+0x20>)
{
 80001ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001bc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001be:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	f043 0310 	orr.w	r3, r3, #16
 80001c4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c6:	f000 f81b 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ca:	2000      	movs	r0, #0
 80001cc:	f7ff ffd0 	bl	8000170 <HAL_InitTick>
  HAL_MspInit();
 80001d0:	f001 fafc 	bl	80017cc <HAL_MspInit>
}
 80001d4:	2000      	movs	r0, #0
 80001d6:	bd08      	pop	{r3, pc}
 80001d8:	40022000 	.word	0x40022000

080001dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001dc:	4a03      	ldr	r2, [pc, #12]	; (80001ec <HAL_IncTick+0x10>)
 80001de:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <HAL_IncTick+0x14>)
 80001e0:	6811      	ldr	r1, [r2, #0]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	440b      	add	r3, r1
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	20000280 	.word	0x20000280
 80001f0:	20000000 	.word	0x20000000

080001f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001f4:	4b01      	ldr	r3, [pc, #4]	; (80001fc <HAL_GetTick+0x8>)
 80001f6:	6818      	ldr	r0, [r3, #0]
}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000280 	.word	0x20000280

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>
	...

08000484 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000484:	2201      	movs	r2, #1
 8000486:	4b01      	ldr	r3, [pc, #4]	; (800048c <HAL_PWR_EnableBkUpAccess+0x8>)
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	4770      	bx	lr
 800048c:	420e0020 	.word	0x420e0020

08000490 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000490:	6803      	ldr	r3, [r0, #0]
{
 8000492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000496:	07db      	lsls	r3, r3, #31
{
 8000498:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049a:	d410      	bmi.n	80004be <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800049c:	682b      	ldr	r3, [r5, #0]
 800049e:	079f      	lsls	r7, r3, #30
 80004a0:	d45e      	bmi.n	8000560 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004a2:	682b      	ldr	r3, [r5, #0]
 80004a4:	0719      	lsls	r1, r3, #28
 80004a6:	f100 8095 	bmi.w	80005d4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004aa:	682b      	ldr	r3, [r5, #0]
 80004ac:	075a      	lsls	r2, r3, #29
 80004ae:	f100 80bf 	bmi.w	8000630 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004b2:	69ea      	ldr	r2, [r5, #28]
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	f040 812d 	bne.w	8000714 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ba:	2000      	movs	r0, #0
 80004bc:	e014      	b.n	80004e8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004be:	4c90      	ldr	r4, [pc, #576]	; (8000700 <HAL_RCC_OscConfig+0x270>)
 80004c0:	6863      	ldr	r3, [r4, #4]
 80004c2:	f003 030c 	and.w	r3, r3, #12
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d007      	beq.n	80004da <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ca:	6863      	ldr	r3, [r4, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	2b08      	cmp	r3, #8
 80004d2:	d10c      	bne.n	80004ee <HAL_RCC_OscConfig+0x5e>
 80004d4:	6863      	ldr	r3, [r4, #4]
 80004d6:	03de      	lsls	r6, r3, #15
 80004d8:	d509      	bpl.n	80004ee <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004da:	6823      	ldr	r3, [r4, #0]
 80004dc:	039c      	lsls	r4, r3, #14
 80004de:	d5dd      	bpl.n	800049c <HAL_RCC_OscConfig+0xc>
 80004e0:	686b      	ldr	r3, [r5, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1da      	bne.n	800049c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004e6:	2001      	movs	r0, #1
}
 80004e8:	b002      	add	sp, #8
 80004ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ee:	686b      	ldr	r3, [r5, #4]
 80004f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004f4:	d110      	bne.n	8000518 <HAL_RCC_OscConfig+0x88>
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004fe:	f7ff fe79 	bl	80001f4 <HAL_GetTick>
 8000502:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	0398      	lsls	r0, r3, #14
 8000508:	d4c8      	bmi.n	800049c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800050a:	f7ff fe73 	bl	80001f4 <HAL_GetTick>
 800050e:	1b80      	subs	r0, r0, r6
 8000510:	2864      	cmp	r0, #100	; 0x64
 8000512:	d9f7      	bls.n	8000504 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000514:	2003      	movs	r0, #3
 8000516:	e7e7      	b.n	80004e8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000518:	b99b      	cbnz	r3, 8000542 <HAL_RCC_OscConfig+0xb2>
 800051a:	6823      	ldr	r3, [r4, #0]
 800051c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000520:	6023      	str	r3, [r4, #0]
 8000522:	6823      	ldr	r3, [r4, #0]
 8000524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000528:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800052a:	f7ff fe63 	bl	80001f4 <HAL_GetTick>
 800052e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000530:	6823      	ldr	r3, [r4, #0]
 8000532:	0399      	lsls	r1, r3, #14
 8000534:	d5b2      	bpl.n	800049c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000536:	f7ff fe5d 	bl	80001f4 <HAL_GetTick>
 800053a:	1b80      	subs	r0, r0, r6
 800053c:	2864      	cmp	r0, #100	; 0x64
 800053e:	d9f7      	bls.n	8000530 <HAL_RCC_OscConfig+0xa0>
 8000540:	e7e8      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	d103      	bne.n	8000552 <HAL_RCC_OscConfig+0xc2>
 800054a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054e:	6023      	str	r3, [r4, #0]
 8000550:	e7d1      	b.n	80004f6 <HAL_RCC_OscConfig+0x66>
 8000552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000556:	6023      	str	r3, [r4, #0]
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800055e:	e7cd      	b.n	80004fc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000560:	4c67      	ldr	r4, [pc, #412]	; (8000700 <HAL_RCC_OscConfig+0x270>)
 8000562:	6863      	ldr	r3, [r4, #4]
 8000564:	f013 0f0c 	tst.w	r3, #12
 8000568:	d007      	beq.n	800057a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800056a:	6863      	ldr	r3, [r4, #4]
 800056c:	f003 030c 	and.w	r3, r3, #12
 8000570:	2b08      	cmp	r3, #8
 8000572:	d110      	bne.n	8000596 <HAL_RCC_OscConfig+0x106>
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	03da      	lsls	r2, r3, #15
 8000578:	d40d      	bmi.n	8000596 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	079b      	lsls	r3, r3, #30
 800057e:	d502      	bpl.n	8000586 <HAL_RCC_OscConfig+0xf6>
 8000580:	692b      	ldr	r3, [r5, #16]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d1af      	bne.n	80004e6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	696a      	ldr	r2, [r5, #20]
 800058a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800058e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000592:	6023      	str	r3, [r4, #0]
 8000594:	e785      	b.n	80004a2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000596:	692a      	ldr	r2, [r5, #16]
 8000598:	4b5a      	ldr	r3, [pc, #360]	; (8000704 <HAL_RCC_OscConfig+0x274>)
 800059a:	b16a      	cbz	r2, 80005b8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005a0:	f7ff fe28 	bl	80001f4 <HAL_GetTick>
 80005a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005a6:	6823      	ldr	r3, [r4, #0]
 80005a8:	079f      	lsls	r7, r3, #30
 80005aa:	d4ec      	bmi.n	8000586 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005ac:	f7ff fe22 	bl	80001f4 <HAL_GetTick>
 80005b0:	1b80      	subs	r0, r0, r6
 80005b2:	2802      	cmp	r0, #2
 80005b4:	d9f7      	bls.n	80005a6 <HAL_RCC_OscConfig+0x116>
 80005b6:	e7ad      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ba:	f7ff fe1b 	bl	80001f4 <HAL_GetTick>
 80005be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005c0:	6823      	ldr	r3, [r4, #0]
 80005c2:	0798      	lsls	r0, r3, #30
 80005c4:	f57f af6d 	bpl.w	80004a2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005c8:	f7ff fe14 	bl	80001f4 <HAL_GetTick>
 80005cc:	1b80      	subs	r0, r0, r6
 80005ce:	2802      	cmp	r0, #2
 80005d0:	d9f6      	bls.n	80005c0 <HAL_RCC_OscConfig+0x130>
 80005d2:	e79f      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005d4:	69aa      	ldr	r2, [r5, #24]
 80005d6:	4c4a      	ldr	r4, [pc, #296]	; (8000700 <HAL_RCC_OscConfig+0x270>)
 80005d8:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <HAL_RCC_OscConfig+0x278>)
 80005da:	b1da      	cbz	r2, 8000614 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005e0:	f7ff fe08 	bl	80001f4 <HAL_GetTick>
 80005e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005e8:	079b      	lsls	r3, r3, #30
 80005ea:	d50d      	bpl.n	8000608 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005f0:	4b46      	ldr	r3, [pc, #280]	; (800070c <HAL_RCC_OscConfig+0x27c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005fa:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005fc:	9b01      	ldr	r3, [sp, #4]
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f9      	bne.n	80005fa <HAL_RCC_OscConfig+0x16a>
 8000606:	e750      	b.n	80004aa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000608:	f7ff fdf4 	bl	80001f4 <HAL_GetTick>
 800060c:	1b80      	subs	r0, r0, r6
 800060e:	2802      	cmp	r0, #2
 8000610:	d9e9      	bls.n	80005e6 <HAL_RCC_OscConfig+0x156>
 8000612:	e77f      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000614:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000616:	f7ff fded 	bl	80001f4 <HAL_GetTick>
 800061a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800061c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800061e:	079f      	lsls	r7, r3, #30
 8000620:	f57f af43 	bpl.w	80004aa <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000624:	f7ff fde6 	bl	80001f4 <HAL_GetTick>
 8000628:	1b80      	subs	r0, r0, r6
 800062a:	2802      	cmp	r0, #2
 800062c:	d9f6      	bls.n	800061c <HAL_RCC_OscConfig+0x18c>
 800062e:	e771      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000630:	4c33      	ldr	r4, [pc, #204]	; (8000700 <HAL_RCC_OscConfig+0x270>)
 8000632:	69e3      	ldr	r3, [r4, #28]
 8000634:	00d8      	lsls	r0, r3, #3
 8000636:	d424      	bmi.n	8000682 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000638:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	69e3      	ldr	r3, [r4, #28]
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61e3      	str	r3, [r4, #28]
 8000642:	69e3      	ldr	r3, [r4, #28]
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800064c:	4e30      	ldr	r6, [pc, #192]	; (8000710 <HAL_RCC_OscConfig+0x280>)
 800064e:	6833      	ldr	r3, [r6, #0]
 8000650:	05d9      	lsls	r1, r3, #23
 8000652:	d518      	bpl.n	8000686 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000654:	68eb      	ldr	r3, [r5, #12]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d126      	bne.n	80006a8 <HAL_RCC_OscConfig+0x218>
 800065a:	6a23      	ldr	r3, [r4, #32]
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000662:	f7ff fdc7 	bl	80001f4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000666:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800066a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800066c:	6a23      	ldr	r3, [r4, #32]
 800066e:	079b      	lsls	r3, r3, #30
 8000670:	d53f      	bpl.n	80006f2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000672:	2f00      	cmp	r7, #0
 8000674:	f43f af1d 	beq.w	80004b2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000678:	69e3      	ldr	r3, [r4, #28]
 800067a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800067e:	61e3      	str	r3, [r4, #28]
 8000680:	e717      	b.n	80004b2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000682:	2700      	movs	r7, #0
 8000684:	e7e2      	b.n	800064c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000686:	6833      	ldr	r3, [r6, #0]
 8000688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800068e:	f7ff fdb1 	bl	80001f4 <HAL_GetTick>
 8000692:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000694:	6833      	ldr	r3, [r6, #0]
 8000696:	05da      	lsls	r2, r3, #23
 8000698:	d4dc      	bmi.n	8000654 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800069a:	f7ff fdab 	bl	80001f4 <HAL_GetTick>
 800069e:	eba0 0008 	sub.w	r0, r0, r8
 80006a2:	2864      	cmp	r0, #100	; 0x64
 80006a4:	d9f6      	bls.n	8000694 <HAL_RCC_OscConfig+0x204>
 80006a6:	e735      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a8:	b9ab      	cbnz	r3, 80006d6 <HAL_RCC_OscConfig+0x246>
 80006aa:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b0:	f023 0301 	bic.w	r3, r3, #1
 80006b4:	6223      	str	r3, [r4, #32]
 80006b6:	6a23      	ldr	r3, [r4, #32]
 80006b8:	f023 0304 	bic.w	r3, r3, #4
 80006bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006be:	f7ff fd99 	bl	80001f4 <HAL_GetTick>
 80006c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006c4:	6a23      	ldr	r3, [r4, #32]
 80006c6:	0798      	lsls	r0, r3, #30
 80006c8:	d5d3      	bpl.n	8000672 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006ca:	f7ff fd93 	bl	80001f4 <HAL_GetTick>
 80006ce:	1b80      	subs	r0, r0, r6
 80006d0:	4540      	cmp	r0, r8
 80006d2:	d9f7      	bls.n	80006c4 <HAL_RCC_OscConfig+0x234>
 80006d4:	e71e      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d6:	2b05      	cmp	r3, #5
 80006d8:	6a23      	ldr	r3, [r4, #32]
 80006da:	d103      	bne.n	80006e4 <HAL_RCC_OscConfig+0x254>
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6223      	str	r3, [r4, #32]
 80006e2:	e7ba      	b.n	800065a <HAL_RCC_OscConfig+0x1ca>
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6223      	str	r3, [r4, #32]
 80006ea:	6a23      	ldr	r3, [r4, #32]
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	e7b6      	b.n	8000660 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006f2:	f7ff fd7f 	bl	80001f4 <HAL_GetTick>
 80006f6:	eba0 0008 	sub.w	r0, r0, r8
 80006fa:	42b0      	cmp	r0, r6
 80006fc:	d9b6      	bls.n	800066c <HAL_RCC_OscConfig+0x1dc>
 80006fe:	e709      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
 8000700:	40021000 	.word	0x40021000
 8000704:	42420000 	.word	0x42420000
 8000708:	42420480 	.word	0x42420480
 800070c:	20000008 	.word	0x20000008
 8000710:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000714:	4c22      	ldr	r4, [pc, #136]	; (80007a0 <HAL_RCC_OscConfig+0x310>)
 8000716:	6863      	ldr	r3, [r4, #4]
 8000718:	f003 030c 	and.w	r3, r3, #12
 800071c:	2b08      	cmp	r3, #8
 800071e:	f43f aee2 	beq.w	80004e6 <HAL_RCC_OscConfig+0x56>
 8000722:	2300      	movs	r3, #0
 8000724:	4e1f      	ldr	r6, [pc, #124]	; (80007a4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000726:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000728:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800072a:	d12b      	bne.n	8000784 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800072c:	f7ff fd62 	bl	80001f4 <HAL_GetTick>
 8000730:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	0199      	lsls	r1, r3, #6
 8000736:	d41f      	bmi.n	8000778 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000738:	6a2b      	ldr	r3, [r5, #32]
 800073a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800073e:	d105      	bne.n	800074c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000740:	6862      	ldr	r2, [r4, #4]
 8000742:	68a9      	ldr	r1, [r5, #8]
 8000744:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000748:	430a      	orrs	r2, r1
 800074a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800074c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800074e:	6862      	ldr	r2, [r4, #4]
 8000750:	430b      	orrs	r3, r1
 8000752:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000756:	4313      	orrs	r3, r2
 8000758:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800075a:	2301      	movs	r3, #1
 800075c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800075e:	f7ff fd49 	bl	80001f4 <HAL_GetTick>
 8000762:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	019a      	lsls	r2, r3, #6
 8000768:	f53f aea7 	bmi.w	80004ba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800076c:	f7ff fd42 	bl	80001f4 <HAL_GetTick>
 8000770:	1b40      	subs	r0, r0, r5
 8000772:	2802      	cmp	r0, #2
 8000774:	d9f6      	bls.n	8000764 <HAL_RCC_OscConfig+0x2d4>
 8000776:	e6cd      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000778:	f7ff fd3c 	bl	80001f4 <HAL_GetTick>
 800077c:	1bc0      	subs	r0, r0, r7
 800077e:	2802      	cmp	r0, #2
 8000780:	d9d7      	bls.n	8000732 <HAL_RCC_OscConfig+0x2a2>
 8000782:	e6c7      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000784:	f7ff fd36 	bl	80001f4 <HAL_GetTick>
 8000788:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	019b      	lsls	r3, r3, #6
 800078e:	f57f ae94 	bpl.w	80004ba <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000792:	f7ff fd2f 	bl	80001f4 <HAL_GetTick>
 8000796:	1b40      	subs	r0, r0, r5
 8000798:	2802      	cmp	r0, #2
 800079a:	d9f6      	bls.n	800078a <HAL_RCC_OscConfig+0x2fa>
 800079c:	e6ba      	b.n	8000514 <HAL_RCC_OscConfig+0x84>
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	42420060 	.word	0x42420060

080007a8 <HAL_RCC_GetSysClockFreq>:
{
 80007a8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007ac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ae:	ac02      	add	r4, sp, #8
 80007b0:	f103 0510 	add.w	r5, r3, #16
 80007b4:	4622      	mov	r2, r4
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	6859      	ldr	r1, [r3, #4]
 80007ba:	3308      	adds	r3, #8
 80007bc:	c203      	stmia	r2!, {r0, r1}
 80007be:	42ab      	cmp	r3, r5
 80007c0:	4614      	mov	r4, r2
 80007c2:	d1f7      	bne.n	80007b4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007c4:	2301      	movs	r3, #1
 80007c6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007ca:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007cc:	4911      	ldr	r1, [pc, #68]	; (8000814 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ce:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007d2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007d4:	f003 020c 	and.w	r2, r3, #12
 80007d8:	2a08      	cmp	r2, #8
 80007da:	d117      	bne.n	800080c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007dc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007e0:	a806      	add	r0, sp, #24
 80007e2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007e4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007e6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ea:	d50c      	bpl.n	8000806 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ec:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007f4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f6:	aa06      	add	r2, sp, #24
 80007f8:	4413      	add	r3, r2
 80007fa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007fe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000802:	b007      	add	sp, #28
 8000804:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <HAL_RCC_GetSysClockFreq+0x74>)
 8000808:	4350      	muls	r0, r2
 800080a:	e7fa      	b.n	8000802 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800080e:	e7f8      	b.n	8000802 <HAL_RCC_GetSysClockFreq+0x5a>
 8000810:	08002edc 	.word	0x08002edc
 8000814:	40021000 	.word	0x40021000
 8000818:	007a1200 	.word	0x007a1200
 800081c:	003d0900 	.word	0x003d0900

08000820 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000820:	4a54      	ldr	r2, [pc, #336]	; (8000974 <HAL_RCC_ClockConfig+0x154>)
{
 8000822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000826:	6813      	ldr	r3, [r2, #0]
{
 8000828:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	428b      	cmp	r3, r1
{
 8000830:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000832:	d32a      	bcc.n	800088a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000834:	6829      	ldr	r1, [r5, #0]
 8000836:	078c      	lsls	r4, r1, #30
 8000838:	d434      	bmi.n	80008a4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800083a:	07ca      	lsls	r2, r1, #31
 800083c:	d447      	bmi.n	80008ce <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800083e:	4a4d      	ldr	r2, [pc, #308]	; (8000974 <HAL_RCC_ClockConfig+0x154>)
 8000840:	6813      	ldr	r3, [r2, #0]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	429e      	cmp	r6, r3
 8000848:	f0c0 8082 	bcc.w	8000950 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800084c:	682a      	ldr	r2, [r5, #0]
 800084e:	4c4a      	ldr	r4, [pc, #296]	; (8000978 <HAL_RCC_ClockConfig+0x158>)
 8000850:	f012 0f04 	tst.w	r2, #4
 8000854:	f040 8087 	bne.w	8000966 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000858:	0713      	lsls	r3, r2, #28
 800085a:	d506      	bpl.n	800086a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800085c:	6863      	ldr	r3, [r4, #4]
 800085e:	692a      	ldr	r2, [r5, #16]
 8000860:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000864:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000868:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800086a:	f7ff ff9d 	bl	80007a8 <HAL_RCC_GetSysClockFreq>
 800086e:	6863      	ldr	r3, [r4, #4]
 8000870:	4a42      	ldr	r2, [pc, #264]	; (800097c <HAL_RCC_ClockConfig+0x15c>)
 8000872:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	40d8      	lsrs	r0, r3
 800087a:	4b41      	ldr	r3, [pc, #260]	; (8000980 <HAL_RCC_ClockConfig+0x160>)
 800087c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fc76 	bl	8000170 <HAL_InitTick>
  return HAL_OK;
 8000884:	2000      	movs	r0, #0
}
 8000886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	f023 0307 	bic.w	r3, r3, #7
 8000890:	430b      	orrs	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000894:	6813      	ldr	r3, [r2, #0]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	4299      	cmp	r1, r3
 800089c:	d0ca      	beq.n	8000834 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800089e:	2001      	movs	r0, #1
 80008a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008a4:	4b34      	ldr	r3, [pc, #208]	; (8000978 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008a6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008aa:	bf1e      	ittt	ne
 80008ac:	685a      	ldrne	r2, [r3, #4]
 80008ae:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008b2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008b6:	bf42      	ittt	mi
 80008b8:	685a      	ldrmi	r2, [r3, #4]
 80008ba:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008be:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	68a8      	ldr	r0, [r5, #8]
 80008c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008c8:	4302      	orrs	r2, r0
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	e7b5      	b.n	800083a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ce:	686a      	ldr	r2, [r5, #4]
 80008d0:	4c29      	ldr	r4, [pc, #164]	; (8000978 <HAL_RCC_ClockConfig+0x158>)
 80008d2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008d6:	d11c      	bne.n	8000912 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008dc:	d0df      	beq.n	800089e <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008de:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008e4:	f023 0303 	bic.w	r3, r3, #3
 80008e8:	4313      	orrs	r3, r2
 80008ea:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008ec:	f7ff fc82 	bl	80001f4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f0:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008f2:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d114      	bne.n	8000922 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008f8:	6863      	ldr	r3, [r4, #4]
 80008fa:	f003 030c 	and.w	r3, r3, #12
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d09d      	beq.n	800083e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000902:	f7ff fc77 	bl	80001f4 <HAL_GetTick>
 8000906:	1bc0      	subs	r0, r0, r7
 8000908:	4540      	cmp	r0, r8
 800090a:	d9f5      	bls.n	80008f8 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 800090c:	2003      	movs	r0, #3
 800090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000912:	2a02      	cmp	r2, #2
 8000914:	d102      	bne.n	800091c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000916:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800091a:	e7df      	b.n	80008dc <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091c:	f013 0f02 	tst.w	r3, #2
 8000920:	e7dc      	b.n	80008dc <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000922:	2b02      	cmp	r3, #2
 8000924:	d10f      	bne.n	8000946 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000926:	6863      	ldr	r3, [r4, #4]
 8000928:	f003 030c 	and.w	r3, r3, #12
 800092c:	2b08      	cmp	r3, #8
 800092e:	d086      	beq.n	800083e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000930:	f7ff fc60 	bl	80001f4 <HAL_GetTick>
 8000934:	1bc0      	subs	r0, r0, r7
 8000936:	4540      	cmp	r0, r8
 8000938:	d9f5      	bls.n	8000926 <HAL_RCC_ClockConfig+0x106>
 800093a:	e7e7      	b.n	800090c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800093c:	f7ff fc5a 	bl	80001f4 <HAL_GetTick>
 8000940:	1bc0      	subs	r0, r0, r7
 8000942:	4540      	cmp	r0, r8
 8000944:	d8e2      	bhi.n	800090c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000946:	6863      	ldr	r3, [r4, #4]
 8000948:	f013 0f0c 	tst.w	r3, #12
 800094c:	d1f6      	bne.n	800093c <HAL_RCC_ClockConfig+0x11c>
 800094e:	e776      	b.n	800083e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000950:	6813      	ldr	r3, [r2, #0]
 8000952:	f023 0307 	bic.w	r3, r3, #7
 8000956:	4333      	orrs	r3, r6
 8000958:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800095a:	6813      	ldr	r3, [r2, #0]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	429e      	cmp	r6, r3
 8000962:	d19c      	bne.n	800089e <HAL_RCC_ClockConfig+0x7e>
 8000964:	e772      	b.n	800084c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	68e9      	ldr	r1, [r5, #12]
 800096a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800096e:	430b      	orrs	r3, r1
 8000970:	6063      	str	r3, [r4, #4]
 8000972:	e771      	b.n	8000858 <HAL_RCC_ClockConfig+0x38>
 8000974:	40022000 	.word	0x40022000
 8000978:	40021000 	.word	0x40021000
 800097c:	08002f08 	.word	0x08002f08
 8000980:	20000008 	.word	0x20000008

08000984 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000992:	6810      	ldr	r0, [r2, #0]
} 
 8000994:	40d8      	lsrs	r0, r3
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000
 800099c:	08002f18 	.word	0x08002f18
 80009a0:	20000008 	.word	0x20000008

080009a4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009a4:	6803      	ldr	r3, [r0, #0]
{
 80009a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009aa:	07d9      	lsls	r1, r3, #31
{
 80009ac:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009ae:	d520      	bpl.n	80009f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b0:	4c35      	ldr	r4, [pc, #212]	; (8000a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009b2:	69e3      	ldr	r3, [r4, #28]
 80009b4:	00da      	lsls	r2, r3, #3
 80009b6:	d432      	bmi.n	8000a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80009b8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	69e3      	ldr	r3, [r4, #28]
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61e3      	str	r3, [r4, #28]
 80009c2:	69e3      	ldr	r3, [r4, #28]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009cc:	4e2f      	ldr	r6, [pc, #188]	; (8000a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80009ce:	6833      	ldr	r3, [r6, #0]
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	d526      	bpl.n	8000a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80009d4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80009d6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80009da:	d136      	bne.n	8000a4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80009dc:	6a23      	ldr	r3, [r4, #32]
 80009de:	686a      	ldr	r2, [r5, #4]
 80009e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e4:	4313      	orrs	r3, r2
 80009e6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009e8:	b11f      	cbz	r7, 80009f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ea:	69e3      	ldr	r3, [r4, #28]
 80009ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009f0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80009f2:	6828      	ldr	r0, [r5, #0]
 80009f4:	0783      	lsls	r3, r0, #30
 80009f6:	d506      	bpl.n	8000a06 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80009f8:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009fa:	68a9      	ldr	r1, [r5, #8]
 80009fc:	6853      	ldr	r3, [r2, #4]
 80009fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000a06:	f010 0010 	ands.w	r0, r0, #16
 8000a0a:	d01b      	beq.n	8000a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a0e:	68e9      	ldr	r1, [r5, #12]
 8000a10:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000a12:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6053      	str	r3, [r2, #4]
 8000a1c:	e012      	b.n	8000a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000a1e:	2700      	movs	r7, #0
 8000a20:	e7d4      	b.n	80009cc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a22:	6833      	ldr	r3, [r6, #0]
 8000a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fbe3 	bl	80001f4 <HAL_GetTick>
 8000a2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	6833      	ldr	r3, [r6, #0]
 8000a32:	05d8      	lsls	r0, r3, #23
 8000a34:	d4ce      	bmi.n	80009d4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a36:	f7ff fbdd 	bl	80001f4 <HAL_GetTick>
 8000a3a:	eba0 0008 	sub.w	r0, r0, r8
 8000a3e:	2864      	cmp	r0, #100	; 0x64
 8000a40:	d9f6      	bls.n	8000a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000a42:	2003      	movs	r0, #3
}
 8000a44:	b002      	add	sp, #8
 8000a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a4a:	686a      	ldr	r2, [r5, #4]
 8000a4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d0c3      	beq.n	80009dc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a54:	2001      	movs	r0, #1
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a58:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a5a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a5c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a62:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000a64:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000a66:	07d9      	lsls	r1, r3, #31
 8000a68:	d5b8      	bpl.n	80009dc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000a6a:	f7ff fbc3 	bl	80001f4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a6e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000a72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a74:	6a23      	ldr	r3, [r4, #32]
 8000a76:	079a      	lsls	r2, r3, #30
 8000a78:	d4b0      	bmi.n	80009dc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a7a:	f7ff fbbb 	bl	80001f4 <HAL_GetTick>
 8000a7e:	1b80      	subs	r0, r0, r6
 8000a80:	4540      	cmp	r0, r8
 8000a82:	d9f7      	bls.n	8000a74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000a84:	e7dd      	b.n	8000a42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	42420440 	.word	0x42420440

08000a94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000a9a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a9c:	ad02      	add	r5, sp, #8
 8000a9e:	f103 0610 	add.w	r6, r3, #16
 8000aa2:	462a      	mov	r2, r5
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	6859      	ldr	r1, [r3, #4]
 8000aa8:	3308      	adds	r3, #8
 8000aaa:	c203      	stmia	r2!, {r0, r1}
 8000aac:	42b3      	cmp	r3, r6
 8000aae:	4615      	mov	r5, r2
 8000ab0:	d1f7      	bne.n	8000aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ab8:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000aba:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000abc:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000ac0:	d047      	beq.n	8000b52 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000ac2:	2c10      	cmp	r4, #16
 8000ac4:	d017      	beq.n	8000af6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000ac6:	2c01      	cmp	r4, #1
 8000ac8:	d14f      	bne.n	8000b6a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000aca:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000ace:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000ad0:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000ad2:	4019      	ands	r1, r3
 8000ad4:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000ad8:	d044      	beq.n	8000b64 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ae2:	d12d      	bne.n	8000b40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000ae4:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000ae8:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000aea:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000aee:	bf08      	it	eq
 8000af0:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000af2:	b006      	add	sp, #24
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000af8:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000b00:	d0f7      	beq.n	8000af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b02:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000b06:	a806      	add	r0, sp, #24
 8000b08:	4402      	add	r2, r0
 8000b0a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b0e:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b10:	bf41      	itttt	mi
 8000b12:	685a      	ldrmi	r2, [r3, #4]
 8000b14:	a906      	addmi	r1, sp, #24
 8000b16:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000b1a:	1852      	addmi	r2, r2, r1
 8000b1c:	bf44      	itt	mi
 8000b1e:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b22:	4a15      	ldrmi	r2, [pc, #84]	; (8000b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b24:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b26:	bf4c      	ite	mi
 8000b28:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b2c:	4a13      	ldrpl	r2, [pc, #76]	; (8000b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b2e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b30:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b34:	d4dd      	bmi.n	8000af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000b36:	2303      	movs	r3, #3
 8000b38:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b3a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b3e:	e7d8      	b.n	8000af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b44:	d111      	bne.n	8000b6a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000b46:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000b48:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000b4c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b50:	e7cd      	b.n	8000aee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b52:	f7ff ff17 	bl	8000984 <HAL_RCC_GetPCLK2Freq>
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000b5e:	3301      	adds	r3, #1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	e7ea      	b.n	8000b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000b64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b68:	e7c3      	b.n	8000af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e7c1      	b.n	8000af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000b6e:	bf00      	nop
 8000b70:	08002eec 	.word	0x08002eec
 8000b74:	40021000 	.word	0x40021000
 8000b78:	007a1200 	.word	0x007a1200
 8000b7c:	003d0900 	.word	0x003d0900

08000b80 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b80:	6803      	ldr	r3, [r0, #0]
{
 8000b82:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b84:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000b86:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b88:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000b8a:	b295      	uxth	r5, r2
 8000b8c:	b28c      	uxth	r4, r1
 8000b8e:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000b90:	bf1d      	ittte	ne
 8000b92:	69d8      	ldrne	r0, [r3, #28]
 8000b94:	b280      	uxthne	r0, r0
 8000b96:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000b9a:	b280      	uxtheq	r0, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000ba2:	bd30      	pop	{r4, r5, pc}

08000ba4 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000ba4:	6803      	ldr	r3, [r0, #0]
 8000ba6:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8000baa:	b29b      	uxth	r3, r3
}
 8000bac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bb0:	4770      	bx	lr

08000bb2 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8000bb2:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8000bb4:	2809      	cmp	r0, #9
 8000bb6:	d803      	bhi.n	8000bc0 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8000bb8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8000bbc:	b2c0      	uxtb	r0, r0
 8000bbe:	4770      	bx	lr
    Value -= 10U;
 8000bc0:	380a      	subs	r0, #10
    bcdhigh++;
 8000bc2:	3301      	adds	r3, #1
    Value -= 10U;
 8000bc4:	b2c0      	uxtb	r0, r0
 8000bc6:	e7f5      	b.n	8000bb4 <RTC_ByteToBcd2+0x2>

08000bc8 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8000bc8:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8000bca:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000bcc:	f000 000f 	and.w	r0, r0, #15
 8000bd0:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000bd4:	b2c0      	uxtb	r0, r0
 8000bd6:	4770      	bx	lr

08000bd8 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8000bd8:	2902      	cmp	r1, #2
{
 8000bda:	b570      	push	{r4, r5, r6, lr}
 8000bdc:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8000be0:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8000be4:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8000be8:	d81a      	bhi.n	8000c20 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8000bea:	434b      	muls	r3, r1
 8000bec:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8000bf0:	fbb3 f0f6 	udiv	r0, r3, r6
 8000bf4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bf8:	fbb4 f3f3 	udiv	r3, r4, r3
 8000bfc:	3204      	adds	r2, #4
 8000bfe:	442a      	add	r2, r5
 8000c00:	4410      	add	r0, r2
 8000c02:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8000c06:	4418      	add	r0, r3
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	fbb4 f4f3 	udiv	r4, r4, r3
 8000c0e:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000c10:	2307      	movs	r3, #7
 8000c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000c1a:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8000c1c:	b2c0      	uxtb	r0, r0
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000c20:	fb03 f001 	mul.w	r0, r3, r1
 8000c24:	fbb0 f0f6 	udiv	r0, r0, r6
 8000c28:	3202      	adds	r2, #2
 8000c2a:	442a      	add	r2, r5
 8000c2c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c30:	4410      	add	r0, r2
 8000c32:	2264      	movs	r2, #100	; 0x64
 8000c34:	fbb5 f3f3 	udiv	r3, r5, r3
 8000c38:	fbb5 f2f2 	udiv	r2, r5, r2
 8000c3c:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8000c40:	4418      	add	r0, r3
 8000c42:	1a80      	subs	r0, r0, r2
 8000c44:	e7e4      	b.n	8000c10 <RTC_WeekDayNum+0x38>

08000c46 <RTC_EnterInitMode>:
{
 8000c46:	b538      	push	{r3, r4, r5, lr}
 8000c48:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000c4a:	f7ff fad3 	bl	80001f4 <HAL_GetTick>
 8000c4e:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	0692      	lsls	r2, r2, #26
 8000c56:	d505      	bpl.n	8000c64 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c58:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8000c5a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c5c:	f042 0210 	orr.w	r2, r2, #16
 8000c60:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c64:	f7ff fac6 	bl	80001f4 <HAL_GetTick>
 8000c68:	1b40      	subs	r0, r0, r5
 8000c6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c6e:	d9ef      	bls.n	8000c50 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c70:	2003      	movs	r0, #3
}
 8000c72:	bd38      	pop	{r3, r4, r5, pc}

08000c74 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c74:	6802      	ldr	r2, [r0, #0]
{
 8000c76:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c78:	6853      	ldr	r3, [r2, #4]
{
 8000c7a:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c7c:	f023 0310 	bic.w	r3, r3, #16
 8000c80:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c82:	f7ff fab7 	bl	80001f4 <HAL_GetTick>
 8000c86:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	069b      	lsls	r3, r3, #26
 8000c8e:	d501      	bpl.n	8000c94 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8000c90:	2000      	movs	r0, #0
 8000c92:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c94:	f7ff faae 	bl	80001f4 <HAL_GetTick>
 8000c98:	1b40      	subs	r0, r0, r5
 8000c9a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c9e:	d9f3      	bls.n	8000c88 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000ca0:	2003      	movs	r0, #3
}
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}

08000ca4 <RTC_WriteTimeCounter>:
{
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4605      	mov	r5, r0
 8000ca8:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000caa:	f7ff ffcc 	bl	8000c46 <RTC_EnterInitMode>
 8000cae:	b958      	cbnz	r0, 8000cc8 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cb4:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000cb6:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cb8:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cba:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cbc:	f7ff ffda 	bl	8000c74 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cc0:	3000      	adds	r0, #0
 8000cc2:	bf18      	it	ne
 8000cc4:	2001      	movne	r0, #1
 8000cc6:	bd38      	pop	{r3, r4, r5, pc}
 8000cc8:	2001      	movs	r0, #1
}
 8000cca:	bd38      	pop	{r3, r4, r5, pc}

08000ccc <RTC_WriteAlarmCounter>:
{
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4605      	mov	r5, r0
 8000cd0:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cd2:	f7ff ffb8 	bl	8000c46 <RTC_EnterInitMode>
 8000cd6:	b958      	cbnz	r0, 8000cf0 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000cdc:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000cde:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000ce0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000ce2:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000ce4:	f7ff ffc6 	bl	8000c74 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000ce8:	3000      	adds	r0, #0
 8000cea:	bf18      	it	ne
 8000cec:	2001      	movne	r0, #1
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	2001      	movs	r0, #1
}
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}

08000cf4 <HAL_RTC_SetTime>:
{
 8000cf4:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	b1e0      	cbz	r0, 8000d34 <HAL_RTC_SetTime+0x40>
 8000cfa:	b1d9      	cbz	r1, 8000d34 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000cfc:	7c03      	ldrb	r3, [r0, #16]
 8000cfe:	2602      	movs	r6, #2
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d046      	beq.n	8000d92 <HAL_RTC_SetTime+0x9e>
 8000d04:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000d06:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8000d08:	7403      	strb	r3, [r0, #16]
 8000d0a:	7808      	ldrb	r0, [r1, #0]
 8000d0c:	784e      	ldrb	r6, [r1, #1]
 8000d0e:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8000d10:	b992      	cbnz	r2, 8000d38 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000d12:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d14:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000d18:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d1a:	fb03 5000 	mla	r0, r3, r0, r5
 8000d1e:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000d20:	4629      	mov	r1, r5
 8000d22:	4620      	mov	r0, r4
 8000d24:	f7ff ffbe 	bl	8000ca4 <RTC_WriteTimeCounter>
 8000d28:	4606      	mov	r6, r0
 8000d2a:	b1b0      	cbz	r0, 8000d5a <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000d30:	2300      	movs	r3, #0
 8000d32:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000d34:	2601      	movs	r6, #1
 8000d36:	e02c      	b.n	8000d92 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d38:	f7ff ff46 	bl	8000bc8 <RTC_Bcd2ToByte>
 8000d3c:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8000d3e:	4630      	mov	r0, r6
 8000d40:	f7ff ff42 	bl	8000bc8 <RTC_Bcd2ToByte>
 8000d44:	233c      	movs	r3, #60	; 0x3c
 8000d46:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d48:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000d4c:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8000d50:	4608      	mov	r0, r1
 8000d52:	f7ff ff39 	bl	8000bc8 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d56:	4405      	add	r5, r0
 8000d58:	e7e2      	b.n	8000d20 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d5a:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d5c:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d5e:	6853      	ldr	r3, [r2, #4]
 8000d60:	f023 0305 	bic.w	r3, r3, #5
 8000d64:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d66:	f7ff ff1d 	bl	8000ba4 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000d6a:	1c43      	adds	r3, r0, #1
 8000d6c:	d00d      	beq.n	8000d8a <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8000d6e:	4285      	cmp	r5, r0
 8000d70:	d90b      	bls.n	8000d8a <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000d72:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000d76:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff ffa6 	bl	8000ccc <RTC_WriteAlarmCounter>
 8000d80:	b118      	cbz	r0, 8000d8a <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d82:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000d84:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d86:	7463      	strb	r3, [r4, #17]
 8000d88:	e7d4      	b.n	8000d34 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8000d8e:	2300      	movs	r3, #0
 8000d90:	7423      	strb	r3, [r4, #16]
}
 8000d92:	4630      	mov	r0, r6
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d98 <HAL_RTC_GetTime>:
{
 8000d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d9c:	460d      	mov	r5, r1
 8000d9e:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8000da0:	4604      	mov	r4, r0
 8000da2:	b910      	cbnz	r0, 8000daa <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
 8000da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d0fa      	beq.n	8000da4 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8000dae:	6803      	ldr	r3, [r0, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	075e      	lsls	r6, r3, #29
 8000db4:	d4f6      	bmi.n	8000da4 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000db6:	f7ff fee3 	bl	8000b80 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8000dba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000dbe:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000dc2:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000dc4:	fb02 0213 	mls	r2, r2, r3, r0
 8000dc8:	203c      	movs	r0, #60	; 0x3c
 8000dca:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dce:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8000dd2:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000dd4:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dd6:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8000dd8:	f240 8085 	bls.w	8000ee6 <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 8000ddc:	2118      	movs	r1, #24
 8000dde:	fbb3 f2f1 	udiv	r2, r3, r1
 8000de2:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000de6:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 8000de8:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dea:	f7ff fedb 	bl	8000ba4 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000dee:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000df0:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000df2:	d004      	beq.n	8000dfe <HAL_RTC_GetTime+0x66>
 8000df4:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8000df6:	bf2c      	ite	cs
 8000df8:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8000dfc:	1bc6      	subcc	r6, r0, r7
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000e00:	4620      	mov	r0, r4
 8000e02:	fbb7 f9f3 	udiv	r9, r7, r3
 8000e06:	fb03 7919 	mls	r9, r3, r9, r7
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	f7ff ff4a 	bl	8000ca4 <RTC_WriteTimeCounter>
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d1c7      	bne.n	8000da4 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000e14:	1c72      	adds	r2, r6, #1
 8000e16:	d02f      	beq.n	8000e78 <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e18:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff ff55 	bl	8000ccc <RTC_WriteAlarmCounter>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d1be      	bne.n	8000da4 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e28:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8000e2a:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8000e2e:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 8000e32:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e36:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8000e3a:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8000e3c:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8000e3e:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e40:	42b7      	cmp	r7, r6
 8000e42:	d11b      	bne.n	8000e7c <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 8000e44:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8000e46:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8000e48:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8000e4a:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8000e4c:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8000e4e:	f7ff fec3 	bl	8000bd8 <RTC_WeekDayNum>
 8000e52:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 8000e54:	f1b8 0f00 	cmp.w	r8, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8000e5a:	7828      	ldrb	r0, [r5, #0]
 8000e5c:	f7ff fea9 	bl	8000bb2 <RTC_ByteToBcd2>
 8000e60:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8000e62:	7868      	ldrb	r0, [r5, #1]
 8000e64:	f7ff fea5 	bl	8000bb2 <RTC_ByteToBcd2>
 8000e68:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 8000e6a:	78a8      	ldrb	r0, [r5, #2]
 8000e6c:	f7ff fea1 	bl	8000bb2 <RTC_ByteToBcd2>
 8000e70:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8000e72:	2000      	movs	r0, #0
 8000e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e7cf      	b.n	8000e1c <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e7c:	1e4b      	subs	r3, r1, #1
 8000e7e:	2b09      	cmp	r3, #9
 8000e80:	d835      	bhi.n	8000eee <HAL_RTC_GetTime+0x156>
 8000e82:	fa29 f303 	lsr.w	r3, r9, r3
 8000e86:	07db      	lsls	r3, r3, #31
 8000e88:	d42f      	bmi.n	8000eea <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8000e8a:	f021 0302 	bic.w	r3, r1, #2
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d001      	beq.n	8000e96 <HAL_RTC_GetTime+0xfe>
 8000e92:	2b09      	cmp	r3, #9
 8000e94:	d104      	bne.n	8000ea0 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 8000e96:	2a1d      	cmp	r2, #29
      if(day < 31U)
 8000e98:	d906      	bls.n	8000ea8 <HAL_RTC_GetTime+0x110>
        month++;
 8000e9a:	3101      	adds	r1, #1
        day = 1U;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	e02d      	b.n	8000efc <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8000ea0:	2902      	cmp	r1, #2
 8000ea2:	d12b      	bne.n	8000efc <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 8000ea4:	2a1b      	cmp	r2, #27
 8000ea6:	d801      	bhi.n	8000eac <HAL_RTC_GetTime+0x114>
        day++;
 8000ea8:	3201      	adds	r2, #1
 8000eaa:	e027      	b.n	8000efc <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 8000eac:	2a1c      	cmp	r2, #28
 8000eae:	d113      	bne.n	8000ed8 <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 8000eb0:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 8000eb2:	0793      	lsls	r3, r2, #30
 8000eb4:	d112      	bne.n	8000edc <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 8000eb6:	fbb2 f3fe 	udiv	r3, r2, lr
 8000eba:	fb0e 2313 	mls	r3, lr, r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b97b      	cbnz	r3, 8000ee2 <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 8000ec2:	fbb2 f3fc 	udiv	r3, r2, ip
 8000ec6:	fb0c 2313 	mls	r3, ip, r3, r2
 8000eca:	b29b      	uxth	r3, r3
          day++;
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	bf16      	itet	ne
 8000ed0:	2201      	movne	r2, #1
 8000ed2:	221d      	moveq	r2, #29
 8000ed4:	2103      	movne	r1, #3
 8000ed6:	e011      	b.n	8000efc <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 8000ed8:	2a1d      	cmp	r2, #29
 8000eda:	d10f      	bne.n	8000efc <HAL_RTC_GetTime+0x164>
          day = 1U;
 8000edc:	2201      	movs	r2, #1
          month++;
 8000ede:	2103      	movs	r1, #3
 8000ee0:	e00c      	b.n	8000efc <HAL_RTC_GetTime+0x164>
          day++;
 8000ee2:	221d      	movs	r2, #29
 8000ee4:	e00a      	b.n	8000efc <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 8000ee6:	702b      	strb	r3, [r5, #0]
 8000ee8:	e7b4      	b.n	8000e54 <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 8000eea:	2a1e      	cmp	r2, #30
 8000eec:	e7d4      	b.n	8000e98 <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 8000eee:	290c      	cmp	r1, #12
 8000ef0:	d1cb      	bne.n	8000e8a <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 8000ef2:	2a1e      	cmp	r2, #30
 8000ef4:	d9d8      	bls.n	8000ea8 <HAL_RTC_GetTime+0x110>
          day = 1U;
 8000ef6:	2201      	movs	r2, #1
          month = 1U;
 8000ef8:	4611      	mov	r1, r2
          year++;
 8000efa:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8000efc:	3601      	adds	r6, #1
 8000efe:	e79f      	b.n	8000e40 <HAL_RTC_GetTime+0xa8>
 8000f00:	00015180 	.word	0x00015180

08000f04 <HAL_RTC_SetDate>:
{
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8000f08:	4604      	mov	r4, r0
 8000f0a:	b358      	cbz	r0, 8000f64 <HAL_RTC_SetDate+0x60>
 8000f0c:	b351      	cbz	r1, 8000f64 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8000f0e:	7c03      	ldrb	r3, [r0, #16]
 8000f10:	2002      	movs	r0, #2
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d027      	beq.n	8000f66 <HAL_RTC_SetDate+0x62>
 8000f16:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8000f18:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 8000f1a:	7423      	strb	r3, [r4, #16]
 8000f1c:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8000f1e:	bb1a      	cbnz	r2, 8000f68 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8000f20:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8000f22:	784b      	ldrb	r3, [r1, #1]
 8000f24:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8000f26:	788b      	ldrb	r3, [r1, #2]
 8000f28:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8000f2a:	7ba2      	ldrb	r2, [r4, #14]
 8000f2c:	7b61      	ldrb	r1, [r4, #13]
 8000f2e:	7be0      	ldrb	r0, [r4, #15]
 8000f30:	f7ff fe52 	bl	8000bd8 <RTC_WeekDayNum>
 8000f34:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8000f36:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f7ff fe21 	bl	8000b80 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_RTC_SetDate+0xac>)
 8000f40:	4298      	cmp	r0, r3
 8000f42:	d930      	bls.n	8000fa6 <HAL_RTC_SetDate+0xa2>
 8000f44:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8000f48:	fbb0 f5f3 	udiv	r5, r0, r3
 8000f4c:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000f50:	4620      	mov	r0, r4
 8000f52:	4629      	mov	r1, r5
 8000f54:	f7ff fea6 	bl	8000ca4 <RTC_WriteTimeCounter>
 8000f58:	4606      	mov	r6, r0
 8000f5a:	b188      	cbz	r0, 8000f80 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8000f60:	2300      	movs	r3, #0
 8000f62:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
}
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8000f68:	f7ff fe2e 	bl	8000bc8 <RTC_Bcd2ToByte>
 8000f6c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8000f6e:	7848      	ldrb	r0, [r1, #1]
 8000f70:	f7ff fe2a 	bl	8000bc8 <RTC_Bcd2ToByte>
 8000f74:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8000f76:	7888      	ldrb	r0, [r1, #2]
 8000f78:	f7ff fe26 	bl	8000bc8 <RTC_Bcd2ToByte>
 8000f7c:	73a0      	strb	r0, [r4, #14]
 8000f7e:	e7d4      	b.n	8000f2a <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff fe0f 	bl	8000ba4 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	d00d      	beq.n	8000fa6 <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8000f8a:	4285      	cmp	r5, r0
 8000f8c:	d90b      	bls.n	8000fa6 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000f8e:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000f92:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff fe98 	bl	8000ccc <RTC_WriteAlarmCounter>
 8000f9c:	b118      	cbz	r0, 8000fa6 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000f9e:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000fa0:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000fa2:	7463      	strb	r3, [r4, #17]
 8000fa4:	e7de      	b.n	8000f64 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8000fa6:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8000fa8:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8000faa:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8000fac:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8000fae:	bd70      	pop	{r4, r5, r6, pc}
 8000fb0:	00015f8f 	.word	0x00015f8f

08000fb4 <HAL_RTC_GetDate>:
{
 8000fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fb6:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 8000fb8:	2200      	movs	r2, #0
{
 8000fba:	460c      	mov	r4, r1
  RTC_TimeTypeDef stime = {0U};
 8000fbc:	f8ad 2004 	strh.w	r2, [sp, #4]
 8000fc0:	f88d 2006 	strb.w	r2, [sp, #6]
  if((hrtc == NULL) || (sDate == NULL))
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	b918      	cbnz	r0, 8000fd0 <HAL_RTC_GetDate+0x1c>
     return HAL_ERROR;
 8000fc8:	2201      	movs	r2, #1
}
 8000fca:	4610      	mov	r0, r2
 8000fcc:	b003      	add	sp, #12
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((hrtc == NULL) || (sDate == NULL))
 8000fd0:	2900      	cmp	r1, #0
 8000fd2:	d0f9      	beq.n	8000fc8 <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8000fd4:	a901      	add	r1, sp, #4
 8000fd6:	f7ff fedf 	bl	8000d98 <HAL_RTC_GetTime>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d1f3      	bne.n	8000fc8 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8000fe0:	7b2b      	ldrb	r3, [r5, #12]
 8000fe2:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8000fe4:	7be8      	ldrb	r0, [r5, #15]
 8000fe6:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8000fe8:	7b6e      	ldrb	r6, [r5, #13]
 8000fea:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8000fec:	7ba9      	ldrb	r1, [r5, #14]
 8000fee:	70a1      	strb	r1, [r4, #2]
  if(Format != RTC_FORMAT_BIN)
 8000ff0:	2f00      	cmp	r7, #0
 8000ff2:	d0ea      	beq.n	8000fca <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8000ff4:	f7ff fddd 	bl	8000bb2 <RTC_ByteToBcd2>
 8000ff8:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	f7ff fdd9 	bl	8000bb2 <RTC_ByteToBcd2>
 8001000:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);  
 8001002:	4608      	mov	r0, r1
 8001004:	f7ff fdd5 	bl	8000bb2 <RTC_ByteToBcd2>
 8001008:	70a0      	strb	r0, [r4, #2]
 800100a:	e7de      	b.n	8000fca <HAL_RTC_GetDate+0x16>

0800100c <HAL_RTC_WaitForSynchro>:
{
 800100c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800100e:	4604      	mov	r4, r0
 8001010:	b1a8      	cbz	r0, 800103e <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	6853      	ldr	r3, [r2, #4]
 8001016:	f023 0308 	bic.w	r3, r3, #8
 800101a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800101c:	f7ff f8ea 	bl	80001f4 <HAL_GetTick>
 8001020:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	071b      	lsls	r3, r3, #28
 8001028:	d501      	bpl.n	800102e <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 800102a:	2000      	movs	r0, #0
 800102c:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800102e:	f7ff f8e1 	bl	80001f4 <HAL_GetTick>
 8001032:	1b40      	subs	r0, r0, r5
 8001034:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001038:	d9f3      	bls.n	8001022 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800103a:	2003      	movs	r0, #3
}
 800103c:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
 8001040:	bd38      	pop	{r3, r4, r5, pc}
	...

08001044 <HAL_RTC_Init>:
{
 8001044:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001046:	4604      	mov	r4, r0
 8001048:	b170      	cbz	r0, 8001068 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800104a:	7c43      	ldrb	r3, [r0, #17]
 800104c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001050:	b913      	cbnz	r3, 8001058 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001052:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001054:	f000 fbdc 	bl	8001810 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001058:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800105a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800105c:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800105e:	f7ff ffd5 	bl	800100c <HAL_RTC_WaitForSynchro>
 8001062:	b118      	cbz	r0, 800106c <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001064:	2304      	movs	r3, #4
 8001066:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001068:	2001      	movs	r0, #1
}
 800106a:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff fdea 	bl	8000c46 <RTC_EnterInitMode>
 8001072:	2800      	cmp	r0, #0
 8001074:	d1f6      	bne.n	8001064 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001076:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001078:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	f023 0307 	bic.w	r3, r3, #7
 8001080:	6053      	str	r3, [r2, #4]
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001084:	b118      	cbz	r0, 800108e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001086:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001088:	f021 0101 	bic.w	r1, r1, #1
 800108c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800108e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001090:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001094:	4303      	orrs	r3, r0
 8001096:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001098:	6860      	ldr	r0, [r4, #4]
 800109a:	1c43      	adds	r3, r0, #1
 800109c:	d105      	bne.n	80010aa <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff fcf8 	bl	8000a94 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d0dd      	beq.n	8001064 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80010a8:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	6893      	ldr	r3, [r2, #8]
 80010ae:	f023 030f 	bic.w	r3, r3, #15
 80010b2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80010b6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80010b8:	68d3      	ldr	r3, [r2, #12]
 80010ba:	b280      	uxth	r0, r0
 80010bc:	0c1b      	lsrs	r3, r3, #16
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	4318      	orrs	r0, r3
 80010c2:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fdd5 	bl	8000c74 <RTC_ExitInitMode>
 80010ca:	2301      	movs	r3, #1
 80010cc:	b110      	cbz	r0, 80010d4 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80010ce:	2204      	movs	r2, #4
 80010d0:	7462      	strb	r2, [r4, #17]
 80010d2:	e7c9      	b.n	8001068 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 80010d4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80010d6:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80010d8:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80010da:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80010dc:	bd10      	pop	{r4, pc}
 80010de:	bf00      	nop
 80010e0:	40006c00 	.word	0x40006c00

080010e4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010e4:	6a03      	ldr	r3, [r0, #32]
{
 80010e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010f0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010f2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80010fe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001102:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001104:	4d0a      	ldr	r5, [pc, #40]	; (8001130 <TIM_OC1_SetConfig+0x4c>)
 8001106:	42a8      	cmp	r0, r5
 8001108:	d10b      	bne.n	8001122 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800110a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800110c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001110:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001112:	698e      	ldr	r6, [r1, #24]
 8001114:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001116:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800111a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800111c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001120:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001122:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001124:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001126:	684a      	ldr	r2, [r1, #4]
 8001128:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800112a:	6203      	str	r3, [r0, #32]
 800112c:	bd70      	pop	{r4, r5, r6, pc}
 800112e:	bf00      	nop
 8001130:	40012c00 	.word	0x40012c00

08001134 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001134:	6a03      	ldr	r3, [r0, #32]
{
 8001136:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800113c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800113e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001140:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001142:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001144:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001146:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800114a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800114c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800114e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001152:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001156:	4d0b      	ldr	r5, [pc, #44]	; (8001184 <TIM_OC3_SetConfig+0x50>)
 8001158:	42a8      	cmp	r0, r5
 800115a:	d10d      	bne.n	8001178 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800115c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800115e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001162:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001166:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001168:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800116a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800116e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001174:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001178:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800117a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800117c:	684a      	ldr	r2, [r1, #4]
 800117e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001180:	6203      	str	r3, [r0, #32]
 8001182:	bd70      	pop	{r4, r5, r6, pc}
 8001184:	40012c00 	.word	0x40012c00

08001188 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001188:	6a03      	ldr	r3, [r0, #32]
{
 800118a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800118c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001190:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001192:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001194:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001196:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001198:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800119a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800119e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80011a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80011a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011ac:	4d06      	ldr	r5, [pc, #24]	; (80011c8 <TIM_OC4_SetConfig+0x40>)
 80011ae:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80011b0:	bf02      	ittt	eq
 80011b2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80011b4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80011b8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80011c0:	684a      	ldr	r2, [r1, #4]
 80011c2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011c4:	6203      	str	r3, [r0, #32]
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	40012c00 	.word	0x40012c00

080011cc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80011ce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d00a      	beq.n	80011ea <TIM_Base_SetConfig+0x1e>
 80011d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011d8:	d007      	beq.n	80011ea <TIM_Base_SetConfig+0x1e>
 80011da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011de:	4290      	cmp	r0, r2
 80011e0:	d003      	beq.n	80011ea <TIM_Base_SetConfig+0x1e>
 80011e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e6:	4290      	cmp	r0, r2
 80011e8:	d115      	bne.n	8001216 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80011ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011f0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <TIM_Base_SetConfig+0x6c>)
 80011f4:	4290      	cmp	r0, r2
 80011f6:	d00a      	beq.n	800120e <TIM_Base_SetConfig+0x42>
 80011f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011fc:	d007      	beq.n	800120e <TIM_Base_SetConfig+0x42>
 80011fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001202:	4290      	cmp	r0, r2
 8001204:	d003      	beq.n	800120e <TIM_Base_SetConfig+0x42>
 8001206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120a:	4290      	cmp	r0, r2
 800120c:	d103      	bne.n	8001216 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800120e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001214:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001216:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800121c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800121e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001220:	688b      	ldr	r3, [r1, #8]
 8001222:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001224:	680b      	ldr	r3, [r1, #0]
 8001226:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <TIM_Base_SetConfig+0x6c>)
 800122a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800122c:	bf04      	itt	eq
 800122e:	690b      	ldreq	r3, [r1, #16]
 8001230:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001232:	2301      	movs	r3, #1
 8001234:	6143      	str	r3, [r0, #20]
 8001236:	4770      	bx	lr
 8001238:	40012c00 	.word	0x40012c00

0800123c <HAL_TIM_PWM_Init>:
{
 800123c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800123e:	4604      	mov	r4, r0
 8001240:	b1a0      	cbz	r0, 800126c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001242:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001246:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800124a:	b91b      	cbnz	r3, 8001254 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800124c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001250:	f000 fafc 	bl	800184c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001254:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001256:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001258:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800125c:	1d21      	adds	r1, r4, #4
 800125e:	f7ff ffb5 	bl	80011cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001262:	2301      	movs	r3, #1
  return HAL_OK;
 8001264:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001266:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800126a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
}
 800126e:	bd10      	pop	{r4, pc}

08001270 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001270:	6a03      	ldr	r3, [r0, #32]
{
 8001272:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001274:	f023 0310 	bic.w	r3, r3, #16
 8001278:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800127a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800127c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800127e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001280:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001282:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001286:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800128a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800128c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001290:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001294:	4d0b      	ldr	r5, [pc, #44]	; (80012c4 <TIM_OC2_SetConfig+0x54>)
 8001296:	42a8      	cmp	r0, r5
 8001298:	d10d      	bne.n	80012b6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800129a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800129c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012a4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80012a6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012a8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012ac:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80012ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80012b2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80012b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80012ba:	684a      	ldr	r2, [r1, #4]
 80012bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80012be:	6203      	str	r3, [r0, #32]
 80012c0:	bd70      	pop	{r4, r5, r6, pc}
 80012c2:	bf00      	nop
 80012c4:	40012c00 	.word	0x40012c00

080012c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80012c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80012ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80012ce:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	f04f 0002 	mov.w	r0, #2
 80012d6:	d025      	beq.n	8001324 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80012d8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012da:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80012de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80012e2:	2a0c      	cmp	r2, #12
 80012e4:	d818      	bhi.n	8001318 <HAL_TIM_PWM_ConfigChannel+0x50>
 80012e6:	e8df f002 	tbb	[pc, r2]
 80012ea:	1707      	.short	0x1707
 80012ec:	171e1717 	.word	0x171e1717
 80012f0:	172f1717 	.word	0x172f1717
 80012f4:	1717      	.short	0x1717
 80012f6:	40          	.byte	0x40
 80012f7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80012f8:	6820      	ldr	r0, [r4, #0]
 80012fa:	f7ff fef3 	bl	80010e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80012fe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001300:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	f042 0208 	orr.w	r2, r2, #8
 8001308:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	f022 0204 	bic.w	r2, r2, #4
 8001310:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001316:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001318:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800131a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800131c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001320:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001324:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001326:	6820      	ldr	r0, [r4, #0]
 8001328:	f7ff ffa2 	bl	8001270 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800132c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800132e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001340:	699a      	ldr	r2, [r3, #24]
 8001342:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001346:	e7e6      	b.n	8001316 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	f7ff fef3 	bl	8001134 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800134e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001350:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	f042 0208 	orr.w	r2, r2, #8
 8001358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	f022 0204 	bic.w	r2, r2, #4
 8001360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001362:	69da      	ldr	r2, [r3, #28]
 8001364:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001366:	61da      	str	r2, [r3, #28]
    break;
 8001368:	e7d6      	b.n	8001318 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800136a:	6820      	ldr	r0, [r4, #0]
 800136c:	f7ff ff0c 	bl	8001188 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001370:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001372:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800137a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800137c:	69da      	ldr	r2, [r3, #28]
 800137e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001382:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001384:	69da      	ldr	r2, [r3, #28]
 8001386:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800138a:	e7ec      	b.n	8001366 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800138c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800138c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800138e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001390:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001392:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001394:	ea23 0304 	bic.w	r3, r3, r4
 8001398:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800139a:	6a03      	ldr	r3, [r0, #32]
 800139c:	408a      	lsls	r2, r1
 800139e:	431a      	orrs	r2, r3
 80013a0:	6202      	str	r2, [r0, #32]
 80013a2:	bd10      	pop	{r4, pc}

080013a4 <HAL_TIM_PWM_Start>:
{
 80013a4:	b510      	push	{r4, lr}
 80013a6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80013a8:	2201      	movs	r2, #1
 80013aa:	6800      	ldr	r0, [r0, #0]
 80013ac:	f7ff ffee 	bl	800138c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_TIM_PWM_Start+0x28>)
}
 80013b4:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013b6:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80013b8:	bf02      	ittt	eq
 80013ba:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013bc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80013c0:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bd10      	pop	{r4, pc}
 80013cc:	40012c00 	.word	0x40012c00

080013d0 <HAL_TIM_PWM_Stop>:
{
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6800      	ldr	r0, [r0, #0]
 80013d8:	f7ff ffd8 	bl	800138c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_TIM_PWM_Stop+0x58>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10d      	bne.n	8001400 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80013e4:	f241 1211 	movw	r2, #4369	; 0x1111
 80013e8:	6a19      	ldr	r1, [r3, #32]
 80013ea:	4211      	tst	r1, r2
 80013ec:	d108      	bne.n	8001400 <HAL_TIM_PWM_Stop+0x30>
 80013ee:	f240 4244 	movw	r2, #1092	; 0x444
 80013f2:	6a19      	ldr	r1, [r3, #32]
 80013f4:	4211      	tst	r1, r2
 80013f6:	bf02      	ittt	eq
 80013f8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013fa:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80013fe:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001400:	f241 1211 	movw	r2, #4369	; 0x1111
 8001404:	6a19      	ldr	r1, [r3, #32]
 8001406:	4211      	tst	r1, r2
 8001408:	d108      	bne.n	800141c <HAL_TIM_PWM_Stop+0x4c>
 800140a:	f240 4244 	movw	r2, #1092	; 0x444
 800140e:	6a19      	ldr	r1, [r3, #32]
 8001410:	4211      	tst	r1, r2
 8001412:	bf02      	ittt	eq
 8001414:	681a      	ldreq	r2, [r3, #0]
 8001416:	f022 0201 	biceq.w	r2, r2, #1
 800141a:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800141c:	2301      	movs	r3, #1
}
 800141e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001420:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001424:	bd10      	pop	{r4, pc}
 8001426:	bf00      	nop
 8001428:	40012c00 	.word	0x40012c00

0800142c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800142c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d01f      	beq.n	8001474 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001434:	68cb      	ldr	r3, [r1, #12]
 8001436:	688a      	ldr	r2, [r1, #8]
 8001438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800143c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800143e:	684a      	ldr	r2, [r1, #4]
 8001440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001444:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001446:	680a      	ldr	r2, [r1, #0]
 8001448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800144c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800144e:	690a      	ldr	r2, [r1, #16]
 8001450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001454:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001456:	694a      	ldr	r2, [r1, #20]
 8001458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800145c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800145e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001464:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001466:	6802      	ldr	r2, [r0, #0]
 8001468:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800146a:	2300      	movs	r3, #0
 800146c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001470:	4618      	mov	r0, r3
 8001472:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001474:	2002      	movs	r0, #2
}
 8001476:	4770      	bx	lr

08001478 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001478:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800147c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800147e:	2b01      	cmp	r3, #1
 8001480:	f04f 0302 	mov.w	r3, #2
 8001484:	d018      	beq.n	80014b8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001486:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800148a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800148c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800148e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001490:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001496:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4322      	orrs	r2, r4
 800149c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014b2:	2300      	movs	r3, #0
 80014b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80014b8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80014ba:	bd10      	pop	{r4, pc}

080014bc <on_Led>:
#include "bluepill.h"

void on_Led(void){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, HIGH);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	4801      	ldr	r0, [pc, #4]	; (80014c8 <on_Led+0xc>)
 80014c4:	f7fe bfd8 	b.w	8000478 <HAL_GPIO_WritePin>
 80014c8:	40011000 	.word	0x40011000

080014cc <off_Led>:
}

void off_Led(void){
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, LOW);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4801      	ldr	r0, [pc, #4]	; (80014d8 <off_Led+0xc>)
 80014d4:	f7fe bfd0 	b.w	8000478 <HAL_GPIO_WritePin>
 80014d8:	40011000 	.word	0x40011000

080014dc <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014dc:	2228      	movs	r2, #40	; 0x28
{
 80014de:	b530      	push	{r4, r5, lr}
 80014e0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	eb0d 0002 	add.w	r0, sp, r2
 80014e6:	2100      	movs	r1, #0
 80014e8:	f000 fb6c 	bl	8001bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	2214      	movs	r2, #20
 80014ee:	2100      	movs	r1, #0
 80014f0:	eb0d 0002 	add.w	r0, sp, r2
 80014f4:	f000 fb66 	bl	8001bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	2210      	movs	r2, #16
 80014fa:	2100      	movs	r1, #0
 80014fc:	a801      	add	r0, sp, #4
 80014fe:	f000 fb61 	bl	8001bc4 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001502:	2305      	movs	r3, #5
 8001504:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800150a:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001510:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001512:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001518:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800151a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f7fe ffb6 	bl	8000490 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152e:	4629      	mov	r1, r5
 8001530:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001534:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	9506      	str	r5, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153a:	f7ff f971 	bl	8000820 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800153e:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001542:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001544:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001546:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	f7ff fa2c 	bl	80009a4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800154c:	b015      	add	sp, #84	; 0x54
 800154e:	bd30      	pop	{r4, r5, pc}

08001550 <Set_Current_Time>:
/* USER CODE BEGIN 4 */

void Set_Current_Time(void)
{

  RTC_TimeTypeDef sTime = {0};
 8001550:	2300      	movs	r3, #0
{
 8001552:	b530      	push	{r4, r5, lr}
 8001554:	b085      	sub	sp, #20
  RTC_DateTypeDef DateToUpdate = {0};
  time_t rawtime;
  struct tm * timeinfo;
  time ( &rawtime );
 8001556:	a803      	add	r0, sp, #12
  RTC_TimeTypeDef sTime = {0};
 8001558:	f8ad 3004 	strh.w	r3, [sp, #4]
 800155c:	f88d 3006 	strb.w	r3, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8001560:	9302      	str	r3, [sp, #8]
  time ( &rawtime );
 8001562:	f000 fbf1 	bl	8001d48 <time>
  timeinfo = localtime( &rawtime );
 8001566:	a803      	add	r0, sp, #12
 8001568:	f000 fa26 	bl	80019b8 <localtime>
 800156c:	4604      	mov	r4, r0



  /**Set the time to current time.
  */
  sTime.Hours = timeinfo->tm_hour;
 800156e:	6883      	ldr	r3, [r0, #8]
  sTime.Minutes = timeinfo->tm_min;
  sTime.Seconds = timeinfo->tm_sec;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001570:	4d11      	ldr	r5, [pc, #68]	; (80015b8 <Set_Current_Time+0x68>)
  sTime.Hours = timeinfo->tm_hour;
 8001572:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = timeinfo->tm_min;
 8001576:	6843      	ldr	r3, [r0, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001578:	a901      	add	r1, sp, #4
  sTime.Minutes = timeinfo->tm_min;
 800157a:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = timeinfo->tm_sec;
 800157e:	6803      	ldr	r3, [r0, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001580:	2201      	movs	r2, #1
 8001582:	4628      	mov	r0, r5
  sTime.Seconds = timeinfo->tm_sec;
 8001584:	f88d 3006 	strb.w	r3, [sp, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001588:	f7ff fbb4 	bl	8000cf4 <HAL_RTC_SetTime>
    Error_Handler();
  }

  //DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  //DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.WeekDay = timeinfo->tm_wday;
 800158c:	69a3      	ldr	r3, [r4, #24]
  DateToUpdate.Month = (timeinfo->tm_mon)+1;
  DateToUpdate.Date = timeinfo->tm_mday;
  DateToUpdate.Year = (timeinfo->tm_year)+1990-2000; // it is 100 years, but current time is years from 1990, so we set it to reference year 2000

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800158e:	2201      	movs	r2, #1
  DateToUpdate.WeekDay = timeinfo->tm_wday;
 8001590:	f88d 3008 	strb.w	r3, [sp, #8]
  DateToUpdate.Month = (timeinfo->tm_mon)+1;
 8001594:	6923      	ldr	r3, [r4, #16]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001596:	a902      	add	r1, sp, #8
  DateToUpdate.Month = (timeinfo->tm_mon)+1;
 8001598:	3301      	adds	r3, #1
 800159a:	f88d 3009 	strb.w	r3, [sp, #9]
  DateToUpdate.Date = timeinfo->tm_mday;
 800159e:	68e3      	ldr	r3, [r4, #12]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80015a0:	4628      	mov	r0, r5
  DateToUpdate.Date = timeinfo->tm_mday;
 80015a2:	f88d 300a 	strb.w	r3, [sp, #10]
  DateToUpdate.Year = (timeinfo->tm_year)+1990-2000; // it is 100 years, but current time is years from 1990, so we set it to reference year 2000
 80015a6:	6963      	ldr	r3, [r4, #20]
 80015a8:	3b0a      	subs	r3, #10
 80015aa:	f88d 300b 	strb.w	r3, [sp, #11]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80015ae:	f7ff fca9 	bl	8000f04 <HAL_RTC_SetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015b2:	b005      	add	sp, #20
 80015b4:	bd30      	pop	{r4, r5, pc}
 80015b6:	bf00      	nop
 80015b8:	20000284 	.word	0x20000284

080015bc <main>:
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0a4      	sub	sp, #144	; 0x90
  HAL_Init();
 80015c0:	f7fe fdfa 	bl	80001b8 <HAL_Init>
  SystemClock_Config();
 80015c4:	f7ff ff8a 	bl	80014dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	2210      	movs	r2, #16
 80015ca:	2100      	movs	r1, #0
 80015cc:	a81d      	add	r0, sp, #116	; 0x74
 80015ce:	f000 faf9 	bl	8001bc4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	4b61      	ldr	r3, [pc, #388]	; (8001758 <main+0x19c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015da:	4860      	ldr	r0, [pc, #384]	; (800175c <main+0x1a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	f042 0210 	orr.w	r2, r2, #16
 80015e0:	619a      	str	r2, [r3, #24]
 80015e2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	f002 0210 	and.w	r2, r2, #16
 80015ea:	9211      	str	r2, [sp, #68]	; 0x44
 80015ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	f042 0220 	orr.w	r2, r2, #32
 80015f6:	619a      	str	r2, [r3, #24]
 80015f8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015fa:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	f002 0220 	and.w	r2, r2, #32
 8001602:	9212      	str	r2, [sp, #72]	; 0x48
 8001604:	9a12      	ldr	r2, [sp, #72]	; 0x48
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8001608:	4d55      	ldr	r5, [pc, #340]	; (8001760 <main+0x1a4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	f042 0204 	orr.w	r2, r2, #4
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	9313      	str	r3, [sp, #76]	; 0x4c
 800161a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800161c:	f7fe ff2c 	bl	8000478 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	a91d      	add	r1, sp, #116	; 0x74
 8001624:	484d      	ldr	r0, [pc, #308]	; (800175c <main+0x1a0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	9320      	str	r3, [sp, #128]	; 0x80
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001628:	971d      	str	r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	961e      	str	r6, [sp, #120]	; 0x78
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	941f      	str	r4, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	f7fe fe43 	bl	80002b8 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	221c      	movs	r2, #28
 8001634:	4621      	mov	r1, r4
 8001636:	a816      	add	r0, sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	9414      	str	r4, [sp, #80]	; 0x50
 800163a:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	f000 fac2 	bl	8001bc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001640:	221c      	movs	r2, #28
 8001642:	4621      	mov	r1, r4
 8001644:	a81d      	add	r0, sp, #116	; 0x74
 8001646:	f000 fabd 	bl	8001bc4 <memset>
  htim1.Instance = TIM1;
 800164a:	4b46      	ldr	r3, [pc, #280]	; (8001764 <main+0x1a8>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800164c:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 800164e:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 8001654:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001658:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800165c:	f7ff fdee 	bl	800123c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001660:	a914      	add	r1, sp, #80	; 0x50
 8001662:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001668:	f7ff ff06 	bl	8001478 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166e:	2204      	movs	r2, #4
 8001670:	a916      	add	r1, sp, #88	; 0x58
 8001672:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 8001676:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001678:	9418      	str	r4, [sp, #96]	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800167a:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167c:	941a      	str	r4, [sp, #104]	; 0x68
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	941b      	str	r4, [sp, #108]	; 0x6c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001680:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001682:	f7ff fe21 	bl	80012c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001686:	a91d      	add	r1, sp, #116	; 0x74
 8001688:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800168a:	9722      	str	r7, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800168c:	941d      	str	r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800168e:	941e      	str	r4, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001690:	941f      	str	r4, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001692:	9420      	str	r4, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001694:	9421      	str	r4, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001696:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001698:	f7ff fec8 	bl	800142c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 800169c:	4628      	mov	r0, r5
 800169e:	f000 f8e9 	bl	8001874 <HAL_TIM_MspPostInit>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80016a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a6:	f04f 32ff 	mov.w	r2, #4294967295
  hrtc.Instance = RTC;
 80016aa:	4f2f      	ldr	r7, [pc, #188]	; (8001768 <main+0x1ac>)
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80016ac:	492f      	ldr	r1, [pc, #188]	; (800176c <main+0x1b0>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ae:	4638      	mov	r0, r7
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80016b0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
  RTC_TimeTypeDef sTime = {0};
 80016b4:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
 80016b8:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  RTC_DateTypeDef DateToUpdate = {0};
 80016bc:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016be:	f7ff fcc1 	bl	8001044 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016c2:	4632      	mov	r2, r6
 80016c4:	a916      	add	r1, sp, #88	; 0x58
 80016c6:	4638      	mov	r0, r7
  sTime.Hours = 0x0;
 80016c8:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
  sTime.Minutes = 0x0;
 80016cc:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
  sTime.Seconds = 0x0;
 80016d0:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016d4:	f7ff fb0e 	bl	8000cf4 <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80016d8:	4632      	mov	r2, r6
 80016da:	a91d      	add	r1, sp, #116	; 0x74
 80016dc:	4638      	mov	r0, r7
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016de:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80016e2:	f88d 6075 	strb.w	r6, [sp, #117]	; 0x75
  DateToUpdate.Date = 0x1;
 80016e6:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
  DateToUpdate.Year = 0x0;
 80016ea:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
 80016ee:	462e      	mov	r6, r5
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80016f0:	f7ff fc08 	bl	8000f04 <HAL_RTC_SetDate>
  Set_Current_Time(); // syncs up RTC with the system clock at compile time.
 80016f4:	f7ff ff2c 	bl	8001550 <Set_Current_Time>
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BCD);
 80016f8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001770 <main+0x1b4>
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BCD);
 80016fc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001774 <main+0x1b8>
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BCD);
 8001700:	2201      	movs	r2, #1
 8001702:	491b      	ldr	r1, [pc, #108]	; (8001770 <main+0x1b4>)
 8001704:	4638      	mov	r0, r7
 8001706:	f7ff fc55 	bl	8000fb4 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BCD);
 800170a:	2201      	movs	r2, #1
 800170c:	4919      	ldr	r1, [pc, #100]	; (8001774 <main+0x1b8>)
 800170e:	4638      	mov	r0, r7
 8001710:	f7ff fb42 	bl	8000d98 <HAL_RTC_GetTime>
	  if(userDate.WeekDay==RTC_WEEKDAY_MONDAY){
 8001714:	f898 3000 	ldrb.w	r3, [r8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d1f1      	bne.n	8001700 <main+0x144>
		  if(userTime.Hours==6){
 800171c:	f899 3000 	ldrb.w	r3, [r9]
 8001720:	2b06      	cmp	r3, #6
 8001722:	d116      	bne.n	8001752 <main+0x196>
			  setPWM(htim1,TIM_CHANNEL_1,255,128);
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	930e      	str	r3, [sp, #56]	; 0x38
 8001728:	23ff      	movs	r3, #255	; 0xff
 800172a:	466c      	mov	r4, sp
 800172c:	930d      	str	r3, [sp, #52]	; 0x34
 800172e:	2300      	movs	r3, #0
 8001730:	4d11      	ldr	r5, [pc, #68]	; (8001778 <main+0x1bc>)
 8001732:	930c      	str	r3, [sp, #48]	; 0x30
 8001734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001744:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001748:	f000 f818 	bl	800177c <setPWM>
			  on_Led();
 800174c:	f7ff feb6 	bl	80014bc <on_Led>
 8001750:	e7d6      	b.n	8001700 <main+0x144>
			  off_Led();
 8001752:	f7ff febb 	bl	80014cc <off_Led>
 8001756:	e7d3      	b.n	8001700 <main+0x144>
 8001758:	40021000 	.word	0x40021000
 800175c:	40011000 	.word	0x40011000
 8001760:	20000298 	.word	0x20000298
 8001764:	40012c00 	.word	0x40012c00
 8001768:	20000284 	.word	0x20000284
 800176c:	40002800 	.word	0x40002800
 8001770:	20000244 	.word	0x20000244
 8001774:	20000248 	.word	0x20000248
 8001778:	200002a8 	.word	0x200002a8

0800177c <setPWM>:
#include "pwm.h"

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 800177c:	b084      	sub	sp, #16
 800177e:	b500      	push	{lr}
 8001780:	b089      	sub	sp, #36	; 0x24
 8001782:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001786:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800178a:	4670      	mov	r0, lr
 800178c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800178e:	f7ff fe1f 	bl	80013d0 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 8001792:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001796:	a80a      	add	r0, sp, #40	; 0x28
 timer.Init.Period = period; // set the period duration
 8001798:	930d      	str	r3, [sp, #52]	; 0x34
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800179a:	f7ff fd4f 	bl	800123c <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179e:	2360      	movs	r3, #96	; 0x60
 80017a0:	9301      	str	r3, [sp, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 80017a2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80017a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 sConfigOC.Pulse = pulse; // set the pulse duration
 80017a8:	9302      	str	r3, [sp, #8]
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80017ac:	a901      	add	r1, sp, #4
 80017ae:	a80a      	add	r0, sp, #40	; 0x28
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	9303      	str	r3, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	9305      	str	r3, [sp, #20]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 80017b4:	f7ff fd88 	bl	80012c8 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 80017b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80017ba:	a80a      	add	r0, sp, #40	; 0x28
 80017bc:	f7ff fdf2 	bl	80013a4 <HAL_TIM_PWM_Start>
}
 80017c0:	b009      	add	sp, #36	; 0x24
 80017c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80017c6:	b004      	add	sp, #16
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_MspInit+0x3c>)
{
 80017ce:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	f002 0201 	and.w	r2, r2, #1
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017e8:	61da      	str	r2, [r3, #28]
 80017ea:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017f6:	6853      	ldr	r3, [r2, #4]
 80017f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	b002      	add	sp, #8
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000

08001810 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001810:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RTC_MspInit+0x30>)
 8001814:	6802      	ldr	r2, [r0, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d10e      	bne.n	8001838 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800181a:	f7fe fe33 	bl	8000484 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RTC_MspInit+0x34>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001826:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001828:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_RTC_MspInit+0x38>)
 8001836:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001838:	b003      	add	sp, #12
 800183a:	f85d fb04 	ldr.w	pc, [sp], #4
 800183e:	bf00      	nop
 8001840:	40002800 	.word	0x40002800
 8001844:	40021000 	.word	0x40021000
 8001848:	4242043c 	.word	0x4242043c

0800184c <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 800184c:	6802      	ldr	r2, [r0, #0]
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_TIM_PWM_MspInit+0x24>)
{
 8001850:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8001852:	429a      	cmp	r2, r3
 8001854:	d10a      	bne.n	800186c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001856:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001860:	619a      	str	r2, [r3, #24]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800186c:	b002      	add	sp, #8
 800186e:	4770      	bx	lr
 8001870:	40012c00 	.word	0x40012c00

08001874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001874:	b510      	push	{r4, lr}
 8001876:	4604      	mov	r4, r0
 8001878:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	2210      	movs	r2, #16
 800187c:	2100      	movs	r1, #0
 800187e:	a802      	add	r0, sp, #8
 8001880:	f000 f9a0 	bl	8001bc4 <memset>
  if(htim->Instance==TIM1)
 8001884:	6822      	ldr	r2, [r4, #0]
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_TIM_MspPostInit+0x48>)
 8001888:	429a      	cmp	r2, r3
 800188a:	d114      	bne.n	80018b6 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001890:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	f042 0204 	orr.w	r2, r2, #4
 8001898:	619a      	str	r2, [r3, #24]
 800189a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f7fe fd01 	bl	80002b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018b6:	b006      	add	sp, #24
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	bf00      	nop
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40010800 	.word	0x40010800

080018c4 <NMI_Handler>:
 80018c4:	4770      	bx	lr

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler>

080018ce <SVC_Handler>:
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f7fe bc82 	b.w	80001dc <HAL_IncTick>

080018d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <SystemInit+0x40>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	4a0d      	ldr	r2, [pc, #52]	; (800191c <SystemInit+0x44>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018f4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018fc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001904:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001906:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800190a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800190c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <SystemInit+0x48>)
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	f8ff0000 	.word	0xf8ff0000
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001924:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001926:	e003      	b.n	8001930 <LoopCopyDataInit>

08001928 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800192a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800192c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800192e:	3104      	adds	r1, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001934:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001936:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001938:	d3f6      	bcc.n	8001928 <CopyDataInit>
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800193c:	e002      	b.n	8001944 <LoopFillZerobss>

0800193e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001940:	f842 3b04 	str.w	r3, [r2], #4

08001944 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001948:	d3f9      	bcc.n	800193e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800194a:	f7ff ffc5 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f000 f80f 	bl	8001970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff fe33 	bl	80015bc <main>
  bx lr
 8001956:	4770      	bx	lr
  ldr r3, =_sidata
 8001958:	08003150 	.word	0x08003150
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001960:	20000228 	.word	0x20000228
  ldr r2, =_sbss
 8001964:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 8001968:	200002dc 	.word	0x200002dc

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <__libc_init_array>:
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	2500      	movs	r5, #0
 8001974:	4e0c      	ldr	r6, [pc, #48]	; (80019a8 <__libc_init_array+0x38>)
 8001976:	4c0d      	ldr	r4, [pc, #52]	; (80019ac <__libc_init_array+0x3c>)
 8001978:	1ba4      	subs	r4, r4, r6
 800197a:	10a4      	asrs	r4, r4, #2
 800197c:	42a5      	cmp	r5, r4
 800197e:	d109      	bne.n	8001994 <__libc_init_array+0x24>
 8001980:	f001 faa0 	bl	8002ec4 <_init>
 8001984:	2500      	movs	r5, #0
 8001986:	4e0a      	ldr	r6, [pc, #40]	; (80019b0 <__libc_init_array+0x40>)
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <__libc_init_array+0x44>)
 800198a:	1ba4      	subs	r4, r4, r6
 800198c:	10a4      	asrs	r4, r4, #2
 800198e:	42a5      	cmp	r5, r4
 8001990:	d105      	bne.n	800199e <__libc_init_array+0x2e>
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001998:	4798      	blx	r3
 800199a:	3501      	adds	r5, #1
 800199c:	e7ee      	b.n	800197c <__libc_init_array+0xc>
 800199e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a2:	4798      	blx	r3
 80019a4:	3501      	adds	r5, #1
 80019a6:	e7f2      	b.n	800198e <__libc_init_array+0x1e>
 80019a8:	08003148 	.word	0x08003148
 80019ac:	08003148 	.word	0x08003148
 80019b0:	08003148 	.word	0x08003148
 80019b4:	0800314c 	.word	0x0800314c

080019b8 <localtime>:
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <localtime+0x20>)
 80019bc:	4605      	mov	r5, r0
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019c2:	b91b      	cbnz	r3, 80019cc <localtime+0x14>
 80019c4:	2024      	movs	r0, #36	; 0x24
 80019c6:	f000 f8ed 	bl	8001ba4 <malloc>
 80019ca:	63e0      	str	r0, [r4, #60]	; 0x3c
 80019cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80019ce:	4628      	mov	r0, r5
 80019d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019d4:	f000 b802 	b.w	80019dc <localtime_r>
 80019d8:	20000054 	.word	0x20000054

080019dc <localtime_r>:
 80019dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e0:	460c      	mov	r4, r1
 80019e2:	4680      	mov	r8, r0
 80019e4:	f000 fc50 	bl	8002288 <__gettzinfo>
 80019e8:	4621      	mov	r1, r4
 80019ea:	4607      	mov	r7, r0
 80019ec:	4640      	mov	r0, r8
 80019ee:	f000 fc4f 	bl	8002290 <gmtime_r>
 80019f2:	6946      	ldr	r6, [r0, #20]
 80019f4:	4604      	mov	r4, r0
 80019f6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80019fa:	07b3      	lsls	r3, r6, #30
 80019fc:	d105      	bne.n	8001a0a <localtime_r+0x2e>
 80019fe:	2264      	movs	r2, #100	; 0x64
 8001a00:	fb96 f3f2 	sdiv	r3, r6, r2
 8001a04:	fb02 6313 	mls	r3, r2, r3, r6
 8001a08:	b9fb      	cbnz	r3, 8001a4a <localtime_r+0x6e>
 8001a0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001a0e:	fb96 f5f3 	sdiv	r5, r6, r3
 8001a12:	fb03 6515 	mls	r5, r3, r5, r6
 8001a16:	fab5 f585 	clz	r5, r5
 8001a1a:	096d      	lsrs	r5, r5, #5
 8001a1c:	2230      	movs	r2, #48	; 0x30
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <localtime_r+0x1c0>)
 8001a20:	fb02 3505 	mla	r5, r2, r5, r3
 8001a24:	f000 fa4c 	bl	8001ec0 <__tz_lock>
 8001a28:	f000 fa4c 	bl	8001ec4 <_tzset_unlocked>
 8001a2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <localtime_r+0x1c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b1e3      	cbz	r3, 8001a6c <localtime_r+0x90>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	429e      	cmp	r6, r3
 8001a36:	d10a      	bne.n	8001a4e <localtime_r+0x72>
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	b969      	cbnz	r1, 8001a5e <localtime_r+0x82>
 8001a42:	4293      	cmp	r3, r2
 8001a44:	db0d      	blt.n	8001a62 <localtime_r+0x86>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e010      	b.n	8001a6c <localtime_r+0x90>
 8001a4a:	2501      	movs	r5, #1
 8001a4c:	e7e6      	b.n	8001a1c <localtime_r+0x40>
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f000 f98e 	bl	8001d70 <__tzcalc_limits>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d1ef      	bne.n	8001a38 <localtime_r+0x5c>
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	e006      	b.n	8001a6c <localtime_r+0x90>
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	db54      	blt.n	8001b0c <localtime_r+0x130>
 8001a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a64:	4293      	cmp	r3, r2
 8001a66:	bfac      	ite	ge
 8001a68:	2300      	movge	r3, #0
 8001a6a:	2301      	movlt	r3, #1
 8001a6c:	6223      	str	r3, [r4, #32]
 8001a6e:	6a23      	ldr	r3, [r4, #32]
 8001a70:	203c      	movs	r0, #60	; 0x3c
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a78:	bf0c      	ite	eq
 8001a7a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8001a7c:	6a39      	ldrne	r1, [r7, #32]
 8001a7e:	fb91 f6f3 	sdiv	r6, r1, r3
 8001a82:	fb03 1316 	mls	r3, r3, r6, r1
 8001a86:	fb93 f2f0 	sdiv	r2, r3, r0
 8001a8a:	fb00 3012 	mls	r0, r0, r2, r3
 8001a8e:	6861      	ldr	r1, [r4, #4]
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	1a89      	subs	r1, r1, r2
 8001a94:	68a2      	ldr	r2, [r4, #8]
 8001a96:	1a1b      	subs	r3, r3, r0
 8001a98:	1b92      	subs	r2, r2, r6
 8001a9a:	2b3b      	cmp	r3, #59	; 0x3b
 8001a9c:	6023      	str	r3, [r4, #0]
 8001a9e:	6061      	str	r1, [r4, #4]
 8001aa0:	60a2      	str	r2, [r4, #8]
 8001aa2:	dd35      	ble.n	8001b10 <localtime_r+0x134>
 8001aa4:	3101      	adds	r1, #1
 8001aa6:	6061      	str	r1, [r4, #4]
 8001aa8:	3b3c      	subs	r3, #60	; 0x3c
 8001aaa:	6023      	str	r3, [r4, #0]
 8001aac:	6863      	ldr	r3, [r4, #4]
 8001aae:	2b3b      	cmp	r3, #59	; 0x3b
 8001ab0:	dd34      	ble.n	8001b1c <localtime_r+0x140>
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	60a2      	str	r2, [r4, #8]
 8001ab6:	3b3c      	subs	r3, #60	; 0x3c
 8001ab8:	6063      	str	r3, [r4, #4]
 8001aba:	68a3      	ldr	r3, [r4, #8]
 8001abc:	2b17      	cmp	r3, #23
 8001abe:	dd33      	ble.n	8001b28 <localtime_r+0x14c>
 8001ac0:	69e2      	ldr	r2, [r4, #28]
 8001ac2:	3b18      	subs	r3, #24
 8001ac4:	3201      	adds	r2, #1
 8001ac6:	61e2      	str	r2, [r4, #28]
 8001ac8:	69a2      	ldr	r2, [r4, #24]
 8001aca:	60a3      	str	r3, [r4, #8]
 8001acc:	3201      	adds	r2, #1
 8001ace:	2a06      	cmp	r2, #6
 8001ad0:	bfc8      	it	gt
 8001ad2:	2200      	movgt	r2, #0
 8001ad4:	61a2      	str	r2, [r4, #24]
 8001ad6:	68e2      	ldr	r2, [r4, #12]
 8001ad8:	6923      	ldr	r3, [r4, #16]
 8001ada:	3201      	adds	r2, #1
 8001adc:	60e2      	str	r2, [r4, #12]
 8001ade:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	dd0d      	ble.n	8001b02 <localtime_r+0x126>
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	eba2 0201 	sub.w	r2, r2, r1
 8001aee:	60e2      	str	r2, [r4, #12]
 8001af0:	bf05      	ittet	eq
 8001af2:	2200      	moveq	r2, #0
 8001af4:	6963      	ldreq	r3, [r4, #20]
 8001af6:	6123      	strne	r3, [r4, #16]
 8001af8:	3301      	addeq	r3, #1
 8001afa:	bf02      	ittt	eq
 8001afc:	6122      	streq	r2, [r4, #16]
 8001afe:	6163      	streq	r3, [r4, #20]
 8001b00:	61e2      	streq	r2, [r4, #28]
 8001b02:	f000 f9de 	bl	8001ec2 <__tz_unlock>
 8001b06:	4620      	mov	r0, r4
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e7ad      	b.n	8001a6c <localtime_r+0x90>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	dacb      	bge.n	8001aac <localtime_r+0xd0>
 8001b14:	3901      	subs	r1, #1
 8001b16:	6061      	str	r1, [r4, #4]
 8001b18:	333c      	adds	r3, #60	; 0x3c
 8001b1a:	e7c6      	b.n	8001aaa <localtime_r+0xce>
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	dacc      	bge.n	8001aba <localtime_r+0xde>
 8001b20:	3a01      	subs	r2, #1
 8001b22:	60a2      	str	r2, [r4, #8]
 8001b24:	333c      	adds	r3, #60	; 0x3c
 8001b26:	e7c7      	b.n	8001ab8 <localtime_r+0xdc>
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	daea      	bge.n	8001b02 <localtime_r+0x126>
 8001b2c:	69e2      	ldr	r2, [r4, #28]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	3a01      	subs	r2, #1
 8001b32:	61e2      	str	r2, [r4, #28]
 8001b34:	69a2      	ldr	r2, [r4, #24]
 8001b36:	60a3      	str	r3, [r4, #8]
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	bf48      	it	mi
 8001b3c:	2206      	movmi	r2, #6
 8001b3e:	61a2      	str	r2, [r4, #24]
 8001b40:	68e2      	ldr	r2, [r4, #12]
 8001b42:	3a01      	subs	r2, #1
 8001b44:	60e2      	str	r2, [r4, #12]
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d1db      	bne.n	8001b02 <localtime_r+0x126>
 8001b4a:	6923      	ldr	r3, [r4, #16]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	d405      	bmi.n	8001b5c <localtime_r+0x180>
 8001b50:	6123      	str	r3, [r4, #16]
 8001b52:	6923      	ldr	r3, [r4, #16]
 8001b54:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001b58:	60e3      	str	r3, [r4, #12]
 8001b5a:	e7d2      	b.n	8001b02 <localtime_r+0x126>
 8001b5c:	230b      	movs	r3, #11
 8001b5e:	6123      	str	r3, [r4, #16]
 8001b60:	6963      	ldr	r3, [r4, #20]
 8001b62:	1e5a      	subs	r2, r3, #1
 8001b64:	f012 0f03 	tst.w	r2, #3
 8001b68:	6162      	str	r2, [r4, #20]
 8001b6a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8001b6e:	d105      	bne.n	8001b7c <localtime_r+0x1a0>
 8001b70:	2164      	movs	r1, #100	; 0x64
 8001b72:	fb92 f3f1 	sdiv	r3, r2, r1
 8001b76:	fb01 2313 	mls	r3, r1, r3, r2
 8001b7a:	b963      	cbnz	r3, 8001b96 <localtime_r+0x1ba>
 8001b7c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b80:	fb92 f3f1 	sdiv	r3, r2, r1
 8001b84:	fb01 2313 	mls	r3, r1, r3, r2
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001b92:	61e3      	str	r3, [r4, #28]
 8001b94:	e7dd      	b.n	8001b52 <localtime_r+0x176>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e7f9      	b.n	8001b8e <localtime_r+0x1b2>
 8001b9a:	bf00      	nop
 8001b9c:	08002f20 	.word	0x08002f20
 8001ba0:	20000270 	.word	0x20000270

08001ba4 <malloc>:
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <malloc+0xc>)
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f000 b85f 	b.w	8001c6c <_malloc_r>
 8001bae:	bf00      	nop
 8001bb0:	20000054 	.word	0x20000054

08001bb4 <free>:
 8001bb4:	4b02      	ldr	r3, [pc, #8]	; (8001bc0 <free+0xc>)
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	f000 b80b 	b.w	8001bd4 <_free_r>
 8001bbe:	bf00      	nop
 8001bc0:	20000054 	.word	0x20000054

08001bc4 <memset>:
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4402      	add	r2, r0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d100      	bne.n	8001bce <memset+0xa>
 8001bcc:	4770      	bx	lr
 8001bce:	f803 1b01 	strb.w	r1, [r3], #1
 8001bd2:	e7f9      	b.n	8001bc8 <memset+0x4>

08001bd4 <_free_r>:
 8001bd4:	b538      	push	{r3, r4, r5, lr}
 8001bd6:	4605      	mov	r5, r0
 8001bd8:	2900      	cmp	r1, #0
 8001bda:	d043      	beq.n	8001c64 <_free_r+0x90>
 8001bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001be0:	1f0c      	subs	r4, r1, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bfb8      	it	lt
 8001be6:	18e4      	addlt	r4, r4, r3
 8001be8:	f000 fbea 	bl	80023c0 <__malloc_lock>
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <_free_r+0x94>)
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	b933      	cbnz	r3, 8001c02 <_free_r+0x2e>
 8001bf4:	6063      	str	r3, [r4, #4]
 8001bf6:	6014      	str	r4, [r2, #0]
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bfe:	f000 bbe0 	b.w	80023c2 <__malloc_unlock>
 8001c02:	42a3      	cmp	r3, r4
 8001c04:	d90b      	bls.n	8001c1e <_free_r+0x4a>
 8001c06:	6821      	ldr	r1, [r4, #0]
 8001c08:	1862      	adds	r2, r4, r1
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	bf01      	itttt	eq
 8001c0e:	681a      	ldreq	r2, [r3, #0]
 8001c10:	685b      	ldreq	r3, [r3, #4]
 8001c12:	1852      	addeq	r2, r2, r1
 8001c14:	6022      	streq	r2, [r4, #0]
 8001c16:	6063      	str	r3, [r4, #4]
 8001c18:	6004      	str	r4, [r0, #0]
 8001c1a:	e7ed      	b.n	8001bf8 <_free_r+0x24>
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	b10a      	cbz	r2, 8001c26 <_free_r+0x52>
 8001c22:	42a2      	cmp	r2, r4
 8001c24:	d9fa      	bls.n	8001c1c <_free_r+0x48>
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	1858      	adds	r0, r3, r1
 8001c2a:	42a0      	cmp	r0, r4
 8001c2c:	d10b      	bne.n	8001c46 <_free_r+0x72>
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	4401      	add	r1, r0
 8001c32:	1858      	adds	r0, r3, r1
 8001c34:	4282      	cmp	r2, r0
 8001c36:	6019      	str	r1, [r3, #0]
 8001c38:	d1de      	bne.n	8001bf8 <_free_r+0x24>
 8001c3a:	6810      	ldr	r0, [r2, #0]
 8001c3c:	6852      	ldr	r2, [r2, #4]
 8001c3e:	4401      	add	r1, r0
 8001c40:	6019      	str	r1, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	e7d8      	b.n	8001bf8 <_free_r+0x24>
 8001c46:	d902      	bls.n	8001c4e <_free_r+0x7a>
 8001c48:	230c      	movs	r3, #12
 8001c4a:	602b      	str	r3, [r5, #0]
 8001c4c:	e7d4      	b.n	8001bf8 <_free_r+0x24>
 8001c4e:	6820      	ldr	r0, [r4, #0]
 8001c50:	1821      	adds	r1, r4, r0
 8001c52:	428a      	cmp	r2, r1
 8001c54:	bf01      	itttt	eq
 8001c56:	6811      	ldreq	r1, [r2, #0]
 8001c58:	6852      	ldreq	r2, [r2, #4]
 8001c5a:	1809      	addeq	r1, r1, r0
 8001c5c:	6021      	streq	r1, [r4, #0]
 8001c5e:	6062      	str	r2, [r4, #4]
 8001c60:	605c      	str	r4, [r3, #4]
 8001c62:	e7c9      	b.n	8001bf8 <_free_r+0x24>
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
 8001c66:	bf00      	nop
 8001c68:	2000024c 	.word	0x2000024c

08001c6c <_malloc_r>:
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	1ccd      	adds	r5, r1, #3
 8001c70:	f025 0503 	bic.w	r5, r5, #3
 8001c74:	3508      	adds	r5, #8
 8001c76:	2d0c      	cmp	r5, #12
 8001c78:	bf38      	it	cc
 8001c7a:	250c      	movcc	r5, #12
 8001c7c:	2d00      	cmp	r5, #0
 8001c7e:	4606      	mov	r6, r0
 8001c80:	db01      	blt.n	8001c86 <_malloc_r+0x1a>
 8001c82:	42a9      	cmp	r1, r5
 8001c84:	d903      	bls.n	8001c8e <_malloc_r+0x22>
 8001c86:	230c      	movs	r3, #12
 8001c88:	6033      	str	r3, [r6, #0]
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	bd70      	pop	{r4, r5, r6, pc}
 8001c8e:	f000 fb97 	bl	80023c0 <__malloc_lock>
 8001c92:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <_malloc_r+0xb4>)
 8001c94:	6814      	ldr	r4, [r2, #0]
 8001c96:	4621      	mov	r1, r4
 8001c98:	b991      	cbnz	r1, 8001cc0 <_malloc_r+0x54>
 8001c9a:	4c22      	ldr	r4, [pc, #136]	; (8001d24 <_malloc_r+0xb8>)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	b91b      	cbnz	r3, 8001ca8 <_malloc_r+0x3c>
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	f000 f841 	bl	8001d28 <_sbrk_r>
 8001ca6:	6020      	str	r0, [r4, #0]
 8001ca8:	4629      	mov	r1, r5
 8001caa:	4630      	mov	r0, r6
 8001cac:	f000 f83c 	bl	8001d28 <_sbrk_r>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d126      	bne.n	8001d02 <_malloc_r+0x96>
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	6033      	str	r3, [r6, #0]
 8001cba:	f000 fb82 	bl	80023c2 <__malloc_unlock>
 8001cbe:	e7e4      	b.n	8001c8a <_malloc_r+0x1e>
 8001cc0:	680b      	ldr	r3, [r1, #0]
 8001cc2:	1b5b      	subs	r3, r3, r5
 8001cc4:	d41a      	bmi.n	8001cfc <_malloc_r+0x90>
 8001cc6:	2b0b      	cmp	r3, #11
 8001cc8:	d90f      	bls.n	8001cea <_malloc_r+0x7e>
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	18cc      	adds	r4, r1, r3
 8001cce:	50cd      	str	r5, [r1, r3]
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f000 fb76 	bl	80023c2 <__malloc_unlock>
 8001cd6:	f104 000b 	add.w	r0, r4, #11
 8001cda:	1d23      	adds	r3, r4, #4
 8001cdc:	f020 0007 	bic.w	r0, r0, #7
 8001ce0:	1ac3      	subs	r3, r0, r3
 8001ce2:	d01b      	beq.n	8001d1c <_malloc_r+0xb0>
 8001ce4:	425a      	negs	r2, r3
 8001ce6:	50e2      	str	r2, [r4, r3]
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	428c      	cmp	r4, r1
 8001cec:	bf0b      	itete	eq
 8001cee:	6863      	ldreq	r3, [r4, #4]
 8001cf0:	684b      	ldrne	r3, [r1, #4]
 8001cf2:	6013      	streq	r3, [r2, #0]
 8001cf4:	6063      	strne	r3, [r4, #4]
 8001cf6:	bf18      	it	ne
 8001cf8:	460c      	movne	r4, r1
 8001cfa:	e7e9      	b.n	8001cd0 <_malloc_r+0x64>
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	6849      	ldr	r1, [r1, #4]
 8001d00:	e7ca      	b.n	8001c98 <_malloc_r+0x2c>
 8001d02:	1cc4      	adds	r4, r0, #3
 8001d04:	f024 0403 	bic.w	r4, r4, #3
 8001d08:	42a0      	cmp	r0, r4
 8001d0a:	d005      	beq.n	8001d18 <_malloc_r+0xac>
 8001d0c:	1a21      	subs	r1, r4, r0
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f000 f80a 	bl	8001d28 <_sbrk_r>
 8001d14:	3001      	adds	r0, #1
 8001d16:	d0cd      	beq.n	8001cb4 <_malloc_r+0x48>
 8001d18:	6025      	str	r5, [r4, #0]
 8001d1a:	e7d9      	b.n	8001cd0 <_malloc_r+0x64>
 8001d1c:	bd70      	pop	{r4, r5, r6, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000024c 	.word	0x2000024c
 8001d24:	20000250 	.word	0x20000250

08001d28 <_sbrk_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	4c05      	ldr	r4, [pc, #20]	; (8001d44 <_sbrk_r+0x1c>)
 8001d2e:	4605      	mov	r5, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	6023      	str	r3, [r4, #0]
 8001d34:	f001 f8b8 	bl	8002ea8 <_sbrk>
 8001d38:	1c43      	adds	r3, r0, #1
 8001d3a:	d102      	bne.n	8001d42 <_sbrk_r+0x1a>
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	b103      	cbz	r3, 8001d42 <_sbrk_r+0x1a>
 8001d40:	602b      	str	r3, [r5, #0]
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	200002d8 	.word	0x200002d8

08001d48 <time>:
 8001d48:	b513      	push	{r0, r1, r4, lr}
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <time+0x24>)
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	2200      	movs	r2, #0
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	4669      	mov	r1, sp
 8001d54:	f000 fa86 	bl	8002264 <_gettimeofday_r>
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	bfbc      	itt	lt
 8001d5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d60:	9300      	strlt	r3, [sp, #0]
 8001d62:	9800      	ldr	r0, [sp, #0]
 8001d64:	b104      	cbz	r4, 8001d68 <time+0x20>
 8001d66:	6020      	str	r0, [r4, #0]
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd10      	pop	{r4, pc}
 8001d6c:	20000054 	.word	0x20000054

08001d70 <__tzcalc_limits>:
 8001d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d74:	4604      	mov	r4, r0
 8001d76:	f000 fa87 	bl	8002288 <__gettzinfo>
 8001d7a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	f340 8098 	ble.w	8001eb4 <__tzcalc_limits+0x144>
 8001d84:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8001d88:	f240 126d 	movw	r2, #365	; 0x16d
 8001d8c:	18e3      	adds	r3, r4, r3
 8001d8e:	109b      	asrs	r3, r3, #2
 8001d90:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8001d94:	fb02 3505 	mla	r5, r2, r5, r3
 8001d98:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001d9c:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8001da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001da4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8001da8:	441d      	add	r5, r3
 8001daa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001dae:	18a2      	adds	r2, r4, r2
 8001db0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001db4:	fb94 f7f3 	sdiv	r7, r4, r3
 8001db8:	4415      	add	r5, r2
 8001dba:	2264      	movs	r2, #100	; 0x64
 8001dbc:	fb03 4717 	mls	r7, r3, r7, r4
 8001dc0:	fb94 f6f2 	sdiv	r6, r4, r2
 8001dc4:	fab7 fe87 	clz	lr, r7
 8001dc8:	4601      	mov	r1, r0
 8001dca:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8001dce:	fb02 4616 	mls	r6, r2, r6, r4
 8001dd2:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	f004 0303 	and.w	r3, r4, #3
 8001ddc:	6044      	str	r4, [r0, #4]
 8001dde:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	7a0b      	ldrb	r3, [r1, #8]
 8001de6:	2b4a      	cmp	r3, #74	; 0x4a
 8001de8:	d123      	bne.n	8001e32 <__tzcalc_limits+0xc2>
 8001dea:	694c      	ldr	r4, [r1, #20]
 8001dec:	9a00      	ldr	r2, [sp, #0]
 8001dee:	192b      	adds	r3, r5, r4
 8001df0:	b902      	cbnz	r2, 8001df4 <__tzcalc_limits+0x84>
 8001df2:	b906      	cbnz	r6, 8001df6 <__tzcalc_limits+0x86>
 8001df4:	b9df      	cbnz	r7, 8001e2e <__tzcalc_limits+0xbe>
 8001df6:	2c3b      	cmp	r4, #59	; 0x3b
 8001df8:	bfd4      	ite	le
 8001dfa:	2400      	movle	r4, #0
 8001dfc:	2401      	movgt	r4, #1
 8001dfe:	441c      	add	r4, r3
 8001e00:	3c01      	subs	r4, #1
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <__tzcalc_limits+0x148>)
 8001e04:	698a      	ldr	r2, [r1, #24]
 8001e06:	fb03 2404 	mla	r4, r3, r4, r2
 8001e0a:	6a0b      	ldr	r3, [r1, #32]
 8001e0c:	441c      	add	r4, r3
 8001e0e:	9b01      	ldr	r3, [sp, #4]
 8001e10:	f841 4f1c 	str.w	r4, [r1, #28]!
 8001e14:	428b      	cmp	r3, r1
 8001e16:	d1e5      	bne.n	8001de4 <__tzcalc_limits+0x74>
 8001e18:	69c3      	ldr	r3, [r0, #28]
 8001e1a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bfac      	ite	ge
 8001e20:	2300      	movge	r3, #0
 8001e22:	2301      	movlt	r3, #1
 8001e24:	6003      	str	r3, [r0, #0]
 8001e26:	2001      	movs	r0, #1
 8001e28:	b003      	add	sp, #12
 8001e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e2e:	2400      	movs	r4, #0
 8001e30:	e7e5      	b.n	8001dfe <__tzcalc_limits+0x8e>
 8001e32:	2b44      	cmp	r3, #68	; 0x44
 8001e34:	d102      	bne.n	8001e3c <__tzcalc_limits+0xcc>
 8001e36:	694b      	ldr	r3, [r1, #20]
 8001e38:	18ec      	adds	r4, r5, r3
 8001e3a:	e7e2      	b.n	8001e02 <__tzcalc_limits+0x92>
 8001e3c:	9b00      	ldr	r3, [sp, #0]
 8001e3e:	bb7b      	cbnz	r3, 8001ea0 <__tzcalc_limits+0x130>
 8001e40:	2e00      	cmp	r6, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	46f0      	moveq	r8, lr
 8001e46:	f04f 0801 	movne.w	r8, #1
 8001e4a:	2230      	movs	r2, #48	; 0x30
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <__tzcalc_limits+0x14c>)
 8001e4e:	f04f 0901 	mov.w	r9, #1
 8001e52:	fb02 3808 	mla	r8, r2, r8, r3
 8001e56:	462b      	mov	r3, r5
 8001e58:	68cc      	ldr	r4, [r1, #12]
 8001e5a:	f1a8 0a04 	sub.w	sl, r8, #4
 8001e5e:	45a1      	cmp	r9, r4
 8001e60:	db20      	blt.n	8001ea4 <__tzcalc_limits+0x134>
 8001e62:	2207      	movs	r2, #7
 8001e64:	2c01      	cmp	r4, #1
 8001e66:	bfb8      	it	lt
 8001e68:	2401      	movlt	r4, #1
 8001e6a:	f103 0b04 	add.w	fp, r3, #4
 8001e6e:	fb9b faf2 	sdiv	sl, fp, r2
 8001e72:	46a1      	mov	r9, r4
 8001e74:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8001e78:	694c      	ldr	r4, [r1, #20]
 8001e7a:	ebab 0a0a 	sub.w	sl, fp, sl
 8001e7e:	ebb4 0a0a 	subs.w	sl, r4, sl
 8001e82:	690c      	ldr	r4, [r1, #16]
 8001e84:	44e1      	add	r9, ip
 8001e86:	f104 34ff 	add.w	r4, r4, #4294967295
 8001e8a:	bf48      	it	mi
 8001e8c:	4492      	addmi	sl, r2
 8001e8e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001e92:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8001e96:	4454      	add	r4, sl
 8001e98:	4544      	cmp	r4, r8
 8001e9a:	da09      	bge.n	8001eb0 <__tzcalc_limits+0x140>
 8001e9c:	441c      	add	r4, r3
 8001e9e:	e7b0      	b.n	8001e02 <__tzcalc_limits+0x92>
 8001ea0:	46f0      	mov	r8, lr
 8001ea2:	e7d2      	b.n	8001e4a <__tzcalc_limits+0xda>
 8001ea4:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8001ea8:	f109 0901 	add.w	r9, r9, #1
 8001eac:	445b      	add	r3, fp
 8001eae:	e7d6      	b.n	8001e5e <__tzcalc_limits+0xee>
 8001eb0:	3c07      	subs	r4, #7
 8001eb2:	e7f1      	b.n	8001e98 <__tzcalc_limits+0x128>
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	e7b7      	b.n	8001e28 <__tzcalc_limits+0xb8>
 8001eb8:	00015180 	.word	0x00015180
 8001ebc:	08002f20 	.word	0x08002f20

08001ec0 <__tz_lock>:
 8001ec0:	4770      	bx	lr

08001ec2 <__tz_unlock>:
 8001ec2:	4770      	bx	lr

08001ec4 <_tzset_unlocked>:
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <_tzset_unlocked+0x8>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f000 b802 	b.w	8001ed0 <_tzset_unlocked_r>
 8001ecc:	20000054 	.word	0x20000054

08001ed0 <_tzset_unlocked_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	b08d      	sub	sp, #52	; 0x34
 8001ed6:	4607      	mov	r7, r0
 8001ed8:	f000 f9d6 	bl	8002288 <__gettzinfo>
 8001edc:	49b1      	ldr	r1, [pc, #708]	; (80021a4 <_tzset_unlocked_r+0x2d4>)
 8001ede:	4605      	mov	r5, r0
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	f000 f9b7 	bl	8002254 <_getenv_r>
 8001ee6:	4eb0      	ldr	r6, [pc, #704]	; (80021a8 <_tzset_unlocked_r+0x2d8>)
 8001ee8:	4604      	mov	r4, r0
 8001eea:	b970      	cbnz	r0, 8001f0a <_tzset_unlocked_r+0x3a>
 8001eec:	4baf      	ldr	r3, [pc, #700]	; (80021ac <_tzset_unlocked_r+0x2dc>)
 8001eee:	4ab0      	ldr	r2, [pc, #704]	; (80021b0 <_tzset_unlocked_r+0x2e0>)
 8001ef0:	6018      	str	r0, [r3, #0]
 8001ef2:	4bb0      	ldr	r3, [pc, #704]	; (80021b4 <_tzset_unlocked_r+0x2e4>)
 8001ef4:	6018      	str	r0, [r3, #0]
 8001ef6:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <_tzset_unlocked_r+0x2e8>)
 8001ef8:	6830      	ldr	r0, [r6, #0]
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	f7ff fe59 	bl	8001bb4 <free>
 8001f02:	6034      	str	r4, [r6, #0]
 8001f04:	b00d      	add	sp, #52	; 0x34
 8001f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0a:	6831      	ldr	r1, [r6, #0]
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	d160      	bne.n	8001fd2 <_tzset_unlocked_r+0x102>
 8001f10:	6830      	ldr	r0, [r6, #0]
 8001f12:	f7ff fe4f 	bl	8001bb4 <free>
 8001f16:	4620      	mov	r0, r4
 8001f18:	f7fe f922 	bl	8000160 <strlen>
 8001f1c:	1c41      	adds	r1, r0, #1
 8001f1e:	4638      	mov	r0, r7
 8001f20:	f7ff fea4 	bl	8001c6c <_malloc_r>
 8001f24:	6030      	str	r0, [r6, #0]
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d158      	bne.n	8001fdc <_tzset_unlocked_r+0x10c>
 8001f2a:	7823      	ldrb	r3, [r4, #0]
 8001f2c:	ae0a      	add	r6, sp, #40	; 0x28
 8001f2e:	2b3a      	cmp	r3, #58	; 0x3a
 8001f30:	bf08      	it	eq
 8001f32:	3401      	addeq	r4, #1
 8001f34:	4633      	mov	r3, r6
 8001f36:	4aa1      	ldr	r2, [pc, #644]	; (80021bc <_tzset_unlocked_r+0x2ec>)
 8001f38:	49a1      	ldr	r1, [pc, #644]	; (80021c0 <_tzset_unlocked_r+0x2f0>)
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f000 fa42 	bl	80023c4 <siscanf>
 8001f40:	2800      	cmp	r0, #0
 8001f42:	dddf      	ble.n	8001f04 <_tzset_unlocked_r+0x34>
 8001f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f46:	18e7      	adds	r7, r4, r3
 8001f48:	5ce3      	ldrb	r3, [r4, r3]
 8001f4a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f4c:	d14a      	bne.n	8001fe4 <_tzset_unlocked_r+0x114>
 8001f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8001f52:	3701      	adds	r7, #1
 8001f54:	f04f 0800 	mov.w	r8, #0
 8001f58:	f10d 0a20 	add.w	sl, sp, #32
 8001f5c:	f10d 0b1e 	add.w	fp, sp, #30
 8001f60:	9603      	str	r6, [sp, #12]
 8001f62:	f8cd a008 	str.w	sl, [sp, #8]
 8001f66:	9601      	str	r6, [sp, #4]
 8001f68:	f8cd b000 	str.w	fp, [sp]
 8001f6c:	4633      	mov	r3, r6
 8001f6e:	aa07      	add	r2, sp, #28
 8001f70:	4994      	ldr	r1, [pc, #592]	; (80021c4 <_tzset_unlocked_r+0x2f4>)
 8001f72:	4638      	mov	r0, r7
 8001f74:	f8ad 801e 	strh.w	r8, [sp, #30]
 8001f78:	f8ad 8020 	strh.w	r8, [sp, #32]
 8001f7c:	f000 fa22 	bl	80023c4 <siscanf>
 8001f80:	4540      	cmp	r0, r8
 8001f82:	ddbf      	ble.n	8001f04 <_tzset_unlocked_r+0x34>
 8001f84:	213c      	movs	r1, #60	; 0x3c
 8001f86:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8001f8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001f8e:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80021d0 <_tzset_unlocked_r+0x300>
 8001f92:	fb01 2203 	mla	r2, r1, r3, r2
 8001f96:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001f9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8001f9e:	fb01 2303 	mla	r3, r1, r3, r2
 8001fa2:	435c      	muls	r4, r3
 8001fa4:	4b85      	ldr	r3, [pc, #532]	; (80021bc <_tzset_unlocked_r+0x2ec>)
 8001fa6:	622c      	str	r4, [r5, #32]
 8001fa8:	4c83      	ldr	r4, [pc, #524]	; (80021b8 <_tzset_unlocked_r+0x2e8>)
 8001faa:	464a      	mov	r2, r9
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001fb0:	4983      	ldr	r1, [pc, #524]	; (80021c0 <_tzset_unlocked_r+0x2f0>)
 8001fb2:	441f      	add	r7, r3
 8001fb4:	4638      	mov	r0, r7
 8001fb6:	4633      	mov	r3, r6
 8001fb8:	f000 fa04 	bl	80023c4 <siscanf>
 8001fbc:	4540      	cmp	r0, r8
 8001fbe:	dc16      	bgt.n	8001fee <_tzset_unlocked_r+0x11e>
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	6a2a      	ldr	r2, [r5, #32]
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	4b79      	ldr	r3, [pc, #484]	; (80021ac <_tzset_unlocked_r+0x2dc>)
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	4b7a      	ldr	r3, [pc, #488]	; (80021b4 <_tzset_unlocked_r+0x2e4>)
 8001fcc:	f8c3 8000 	str.w	r8, [r3]
 8001fd0:	e798      	b.n	8001f04 <_tzset_unlocked_r+0x34>
 8001fd2:	f7fe f8bb 	bl	800014c <strcmp>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d094      	beq.n	8001f04 <_tzset_unlocked_r+0x34>
 8001fda:	e799      	b.n	8001f10 <_tzset_unlocked_r+0x40>
 8001fdc:	4621      	mov	r1, r4
 8001fde:	f000 fa1d 	bl	800241c <strcpy>
 8001fe2:	e7a2      	b.n	8001f2a <_tzset_unlocked_r+0x5a>
 8001fe4:	2b2b      	cmp	r3, #43	; 0x2b
 8001fe6:	bf08      	it	eq
 8001fe8:	3701      	addeq	r7, #1
 8001fea:	2401      	movs	r4, #1
 8001fec:	e7b2      	b.n	8001f54 <_tzset_unlocked_r+0x84>
 8001fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ff0:	f8c4 9004 	str.w	r9, [r4, #4]
 8001ff4:	18fc      	adds	r4, r7, r3
 8001ff6:	5cfb      	ldrb	r3, [r7, r3]
 8001ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8001ffa:	f040 8092 	bne.w	8002122 <_tzset_unlocked_r+0x252>
 8001ffe:	f04f 37ff 	mov.w	r7, #4294967295
 8002002:	3401      	adds	r4, #1
 8002004:	2300      	movs	r3, #0
 8002006:	9603      	str	r6, [sp, #12]
 8002008:	f8ad 301c 	strh.w	r3, [sp, #28]
 800200c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002010:	f8ad 3020 	strh.w	r3, [sp, #32]
 8002014:	930a      	str	r3, [sp, #40]	; 0x28
 8002016:	f8cd a008 	str.w	sl, [sp, #8]
 800201a:	9601      	str	r6, [sp, #4]
 800201c:	f8cd b000 	str.w	fp, [sp]
 8002020:	4633      	mov	r3, r6
 8002022:	aa07      	add	r2, sp, #28
 8002024:	4967      	ldr	r1, [pc, #412]	; (80021c4 <_tzset_unlocked_r+0x2f4>)
 8002026:	4620      	mov	r0, r4
 8002028:	f000 f9cc 	bl	80023c4 <siscanf>
 800202c:	2800      	cmp	r0, #0
 800202e:	dc7d      	bgt.n	800212c <_tzset_unlocked_r+0x25c>
 8002030:	6a2b      	ldr	r3, [r5, #32]
 8002032:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8002036:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002038:	462f      	mov	r7, r5
 800203a:	f04f 0900 	mov.w	r9, #0
 800203e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002040:	441c      	add	r4, r3
 8002042:	7823      	ldrb	r3, [r4, #0]
 8002044:	2b2c      	cmp	r3, #44	; 0x2c
 8002046:	bf08      	it	eq
 8002048:	3401      	addeq	r4, #1
 800204a:	f894 8000 	ldrb.w	r8, [r4]
 800204e:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8002052:	d17b      	bne.n	800214c <_tzset_unlocked_r+0x27c>
 8002054:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	ab09      	add	r3, sp, #36	; 0x24
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	9603      	str	r6, [sp, #12]
 8002060:	9601      	str	r6, [sp, #4]
 8002062:	4633      	mov	r3, r6
 8002064:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8002068:	4957      	ldr	r1, [pc, #348]	; (80021c8 <_tzset_unlocked_r+0x2f8>)
 800206a:	4620      	mov	r0, r4
 800206c:	f000 f9aa 	bl	80023c4 <siscanf>
 8002070:	2803      	cmp	r0, #3
 8002072:	f47f af47 	bne.w	8001f04 <_tzset_unlocked_r+0x34>
 8002076:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800207a:	1e4b      	subs	r3, r1, #1
 800207c:	2b0b      	cmp	r3, #11
 800207e:	f63f af41 	bhi.w	8001f04 <_tzset_unlocked_r+0x34>
 8002082:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8002086:	1e53      	subs	r3, r2, #1
 8002088:	2b04      	cmp	r3, #4
 800208a:	f63f af3b 	bhi.w	8001f04 <_tzset_unlocked_r+0x34>
 800208e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8002092:	2b06      	cmp	r3, #6
 8002094:	f63f af36 	bhi.w	8001f04 <_tzset_unlocked_r+0x34>
 8002098:	f887 8008 	strb.w	r8, [r7, #8]
 800209c:	60f9      	str	r1, [r7, #12]
 800209e:	613a      	str	r2, [r7, #16]
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020a4:	eb04 0803 	add.w	r8, r4, r3
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80020b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80020b8:	930a      	str	r3, [sp, #40]	; 0x28
 80020ba:	f898 3000 	ldrb.w	r3, [r8]
 80020be:	2b2f      	cmp	r3, #47	; 0x2f
 80020c0:	d10b      	bne.n	80020da <_tzset_unlocked_r+0x20a>
 80020c2:	9603      	str	r6, [sp, #12]
 80020c4:	f8cd a008 	str.w	sl, [sp, #8]
 80020c8:	9601      	str	r6, [sp, #4]
 80020ca:	f8cd b000 	str.w	fp, [sp]
 80020ce:	4633      	mov	r3, r6
 80020d0:	aa07      	add	r2, sp, #28
 80020d2:	493e      	ldr	r1, [pc, #248]	; (80021cc <_tzset_unlocked_r+0x2fc>)
 80020d4:	4640      	mov	r0, r8
 80020d6:	f000 f975 	bl	80023c4 <siscanf>
 80020da:	213c      	movs	r1, #60	; 0x3c
 80020dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80020e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80020e4:	f109 0901 	add.w	r9, r9, #1
 80020e8:	fb01 2203 	mla	r2, r1, r3, r2
 80020ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80020f0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80020f4:	f1b9 0f02 	cmp.w	r9, #2
 80020f8:	fb01 2303 	mla	r3, r1, r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002100:	f107 071c 	add.w	r7, r7, #28
 8002104:	4444      	add	r4, r8
 8002106:	d19c      	bne.n	8002042 <_tzset_unlocked_r+0x172>
 8002108:	6868      	ldr	r0, [r5, #4]
 800210a:	f7ff fe31 	bl	8001d70 <__tzcalc_limits>
 800210e:	6a2a      	ldr	r2, [r5, #32]
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <_tzset_unlocked_r+0x2dc>)
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	bf18      	it	ne
 800211a:	2301      	movne	r3, #1
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <_tzset_unlocked_r+0x2e4>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	e6f0      	b.n	8001f04 <_tzset_unlocked_r+0x34>
 8002122:	2b2b      	cmp	r3, #43	; 0x2b
 8002124:	bf08      	it	eq
 8002126:	3401      	addeq	r4, #1
 8002128:	2701      	movs	r7, #1
 800212a:	e76b      	b.n	8002004 <_tzset_unlocked_r+0x134>
 800212c:	213c      	movs	r1, #60	; 0x3c
 800212e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002132:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002136:	fb01 2203 	mla	r2, r1, r3, r2
 800213a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800213e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8002142:	fb01 2303 	mla	r3, r1, r3, r2
 8002146:	435f      	muls	r7, r3
 8002148:	63ef      	str	r7, [r5, #60]	; 0x3c
 800214a:	e775      	b.n	8002038 <_tzset_unlocked_r+0x168>
 800214c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8002150:	bf0a      	itet	eq
 8002152:	4643      	moveq	r3, r8
 8002154:	2344      	movne	r3, #68	; 0x44
 8002156:	3401      	addeq	r4, #1
 8002158:	220a      	movs	r2, #10
 800215a:	a90b      	add	r1, sp, #44	; 0x2c
 800215c:	4620      	mov	r0, r4
 800215e:	9305      	str	r3, [sp, #20]
 8002160:	f000 fa06 	bl	8002570 <strtoul>
 8002164:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8002168:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800216c:	4544      	cmp	r4, r8
 800216e:	9b05      	ldr	r3, [sp, #20]
 8002170:	d114      	bne.n	800219c <_tzset_unlocked_r+0x2cc>
 8002172:	234d      	movs	r3, #77	; 0x4d
 8002174:	f1b9 0f00 	cmp.w	r9, #0
 8002178:	d107      	bne.n	800218a <_tzset_unlocked_r+0x2ba>
 800217a:	722b      	strb	r3, [r5, #8]
 800217c:	2303      	movs	r3, #3
 800217e:	60eb      	str	r3, [r5, #12]
 8002180:	2302      	movs	r3, #2
 8002182:	f8c5 9014 	str.w	r9, [r5, #20]
 8002186:	612b      	str	r3, [r5, #16]
 8002188:	e78e      	b.n	80020a8 <_tzset_unlocked_r+0x1d8>
 800218a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800218e:	230b      	movs	r3, #11
 8002190:	62ab      	str	r3, [r5, #40]	; 0x28
 8002192:	2301      	movs	r3, #1
 8002194:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002196:	2300      	movs	r3, #0
 8002198:	632b      	str	r3, [r5, #48]	; 0x30
 800219a:	e785      	b.n	80020a8 <_tzset_unlocked_r+0x1d8>
 800219c:	b280      	uxth	r0, r0
 800219e:	723b      	strb	r3, [r7, #8]
 80021a0:	6178      	str	r0, [r7, #20]
 80021a2:	e781      	b.n	80020a8 <_tzset_unlocked_r+0x1d8>
 80021a4:	08002f80 	.word	0x08002f80
 80021a8:	2000026c 	.word	0x2000026c
 80021ac:	20000274 	.word	0x20000274
 80021b0:	08002f83 	.word	0x08002f83
 80021b4:	20000270 	.word	0x20000270
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	2000025f 	.word	0x2000025f
 80021c0:	08002f87 	.word	0x08002f87
 80021c4:	08002faa 	.word	0x08002faa
 80021c8:	08002f96 	.word	0x08002f96
 80021cc:	08002fa9 	.word	0x08002fa9
 80021d0:	20000254 	.word	0x20000254

080021d4 <_findenv_r>:
 80021d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d8:	4606      	mov	r6, r0
 80021da:	468a      	mov	sl, r1
 80021dc:	4617      	mov	r7, r2
 80021de:	f000 f9dd 	bl	800259c <__env_lock>
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <_findenv_r+0x7c>)
 80021e4:	f8d3 8000 	ldr.w	r8, [r3]
 80021e8:	4699      	mov	r9, r3
 80021ea:	f1b8 0f00 	cmp.w	r8, #0
 80021ee:	d007      	beq.n	8002200 <_findenv_r+0x2c>
 80021f0:	4654      	mov	r4, sl
 80021f2:	4623      	mov	r3, r4
 80021f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021f8:	b332      	cbz	r2, 8002248 <_findenv_r+0x74>
 80021fa:	2a3d      	cmp	r2, #61	; 0x3d
 80021fc:	461c      	mov	r4, r3
 80021fe:	d1f8      	bne.n	80021f2 <_findenv_r+0x1e>
 8002200:	4630      	mov	r0, r6
 8002202:	f000 f9cc 	bl	800259e <__env_unlock>
 8002206:	2000      	movs	r0, #0
 8002208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220c:	f108 0804 	add.w	r8, r8, #4
 8002210:	f8d8 0000 	ldr.w	r0, [r8]
 8002214:	2800      	cmp	r0, #0
 8002216:	d0f3      	beq.n	8002200 <_findenv_r+0x2c>
 8002218:	4622      	mov	r2, r4
 800221a:	4651      	mov	r1, sl
 800221c:	f000 f906 	bl	800242c <strncmp>
 8002220:	2800      	cmp	r0, #0
 8002222:	d1f3      	bne.n	800220c <_findenv_r+0x38>
 8002224:	f8d8 3000 	ldr.w	r3, [r8]
 8002228:	191d      	adds	r5, r3, r4
 800222a:	5d1b      	ldrb	r3, [r3, r4]
 800222c:	2b3d      	cmp	r3, #61	; 0x3d
 800222e:	d1ed      	bne.n	800220c <_findenv_r+0x38>
 8002230:	f8d9 3000 	ldr.w	r3, [r9]
 8002234:	4630      	mov	r0, r6
 8002236:	eba8 0303 	sub.w	r3, r8, r3
 800223a:	109b      	asrs	r3, r3, #2
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	f000 f9ae 	bl	800259e <__env_unlock>
 8002242:	1c68      	adds	r0, r5, #1
 8002244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002248:	eba4 040a 	sub.w	r4, r4, sl
 800224c:	e7e0      	b.n	8002210 <_findenv_r+0x3c>
 800224e:	bf00      	nop
 8002250:	200000b8 	.word	0x200000b8

08002254 <_getenv_r>:
 8002254:	b507      	push	{r0, r1, r2, lr}
 8002256:	aa01      	add	r2, sp, #4
 8002258:	f7ff ffbc 	bl	80021d4 <_findenv_r>
 800225c:	b003      	add	sp, #12
 800225e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002264 <_gettimeofday_r>:
 8002264:	b538      	push	{r3, r4, r5, lr}
 8002266:	2300      	movs	r3, #0
 8002268:	4c06      	ldr	r4, [pc, #24]	; (8002284 <_gettimeofday_r+0x20>)
 800226a:	4605      	mov	r5, r0
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	f000 fe11 	bl	8002e98 <_gettimeofday>
 8002276:	1c43      	adds	r3, r0, #1
 8002278:	d102      	bne.n	8002280 <_gettimeofday_r+0x1c>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	b103      	cbz	r3, 8002280 <_gettimeofday_r+0x1c>
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	bd38      	pop	{r3, r4, r5, pc}
 8002282:	bf00      	nop
 8002284:	200002d8 	.word	0x200002d8

08002288 <__gettzinfo>:
 8002288:	4800      	ldr	r0, [pc, #0]	; (800228c <__gettzinfo+0x4>)
 800228a:	4770      	bx	lr
 800228c:	20000014 	.word	0x20000014

08002290 <gmtime_r>:
 8002290:	6802      	ldr	r2, [r0, #0]
 8002292:	4847      	ldr	r0, [pc, #284]	; (80023b0 <gmtime_r+0x120>)
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	fb92 f3f0 	sdiv	r3, r2, r0
 800229a:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 800229e:	fb00 2013 	mls	r0, r0, r3, r2
 80022a2:	2800      	cmp	r0, #0
 80022a4:	bfbc      	itt	lt
 80022a6:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
 80022aa:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
 80022ae:	fb90 f2f4 	sdiv	r2, r0, r4
 80022b2:	fb04 0012 	mls	r0, r4, r2, r0
 80022b6:	f04f 043c 	mov.w	r4, #60	; 0x3c
 80022ba:	608a      	str	r2, [r1, #8]
 80022bc:	fb90 f2f4 	sdiv	r2, r0, r4
 80022c0:	fb04 0012 	mls	r0, r4, r2, r0
 80022c4:	604a      	str	r2, [r1, #4]
 80022c6:	f04f 0207 	mov.w	r2, #7
 80022ca:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 80022ce:	bfac      	ite	ge
 80022d0:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80022d4:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80022d8:	6008      	str	r0, [r1, #0]
 80022da:	1cd8      	adds	r0, r3, #3
 80022dc:	fb90 f2f2 	sdiv	r2, r0, r2
 80022e0:	4c34      	ldr	r4, [pc, #208]	; (80023b4 <gmtime_r+0x124>)
 80022e2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80022e6:	fb93 f4f4 	sdiv	r4, r3, r4
 80022ea:	1a82      	subs	r2, r0, r2
 80022ec:	f648 60ac 	movw	r0, #36524	; 0x8eac
 80022f0:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80022f4:	618a      	str	r2, [r1, #24]
 80022f6:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <gmtime_r+0x128>)
 80022f8:	f240 166d 	movw	r6, #365	; 0x16d
 80022fc:	fb02 3304 	mla	r3, r2, r4, r3
 8002300:	fbb3 f0f0 	udiv	r0, r3, r0
 8002304:	fbb3 f2f7 	udiv	r2, r3, r7
 8002308:	4418      	add	r0, r3
 800230a:	1a80      	subs	r0, r0, r2
 800230c:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <gmtime_r+0x12c>)
 800230e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002312:	1a82      	subs	r2, r0, r2
 8002314:	f648 6094 	movw	r0, #36500	; 0x8e94
 8002318:	fbb2 f0f0 	udiv	r0, r2, r0
 800231c:	fbb2 f5f6 	udiv	r5, r2, r6
 8002320:	fbb2 f2f7 	udiv	r2, r2, r7
 8002324:	4403      	add	r3, r0
 8002326:	2099      	movs	r0, #153	; 0x99
 8002328:	1a9a      	subs	r2, r3, r2
 800232a:	fb06 2315 	mls	r3, r6, r5, r2
 800232e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002332:	3202      	adds	r2, #2
 8002334:	fbb2 f2f0 	udiv	r2, r2, r0
 8002338:	2705      	movs	r7, #5
 800233a:	4350      	muls	r0, r2
 800233c:	3002      	adds	r0, #2
 800233e:	fbb0 f0f7 	udiv	r0, r0, r7
 8002342:	2a0a      	cmp	r2, #10
 8002344:	f103 0601 	add.w	r6, r3, #1
 8002348:	eba6 0000 	sub.w	r0, r6, r0
 800234c:	bf34      	ite	cc
 800234e:	2602      	movcc	r6, #2
 8002350:	f06f 0609 	mvncs.w	r6, #9
 8002354:	4416      	add	r6, r2
 8002356:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800235a:	fb02 5404 	mla	r4, r2, r4, r5
 800235e:	2e01      	cmp	r6, #1
 8002360:	bf98      	it	ls
 8002362:	3401      	addls	r4, #1
 8002364:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002368:	d30b      	bcc.n	8002382 <gmtime_r+0xf2>
 800236a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800236e:	61cb      	str	r3, [r1, #28]
 8002370:	2300      	movs	r3, #0
 8002372:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
 8002376:	60c8      	str	r0, [r1, #12]
 8002378:	614c      	str	r4, [r1, #20]
 800237a:	610e      	str	r6, [r1, #16]
 800237c:	620b      	str	r3, [r1, #32]
 800237e:	4608      	mov	r0, r1
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002382:	07aa      	lsls	r2, r5, #30
 8002384:	d105      	bne.n	8002392 <gmtime_r+0x102>
 8002386:	2764      	movs	r7, #100	; 0x64
 8002388:	fbb5 f2f7 	udiv	r2, r5, r7
 800238c:	fb07 5212 	mls	r2, r7, r2, r5
 8002390:	b95a      	cbnz	r2, 80023aa <gmtime_r+0x11a>
 8002392:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8002396:	fbb5 f2f7 	udiv	r2, r5, r7
 800239a:	fb07 5212 	mls	r2, r7, r2, r5
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	0952      	lsrs	r2, r2, #5
 80023a4:	333b      	adds	r3, #59	; 0x3b
 80023a6:	4413      	add	r3, r2
 80023a8:	e7e1      	b.n	800236e <gmtime_r+0xde>
 80023aa:	2201      	movs	r2, #1
 80023ac:	e7fa      	b.n	80023a4 <gmtime_r+0x114>
 80023ae:	bf00      	nop
 80023b0:	00015180 	.word	0x00015180
 80023b4:	00023ab1 	.word	0x00023ab1
 80023b8:	fffdc54f 	.word	0xfffdc54f
 80023bc:	00023ab0 	.word	0x00023ab0

080023c0 <__malloc_lock>:
 80023c0:	4770      	bx	lr

080023c2 <__malloc_unlock>:
 80023c2:	4770      	bx	lr

080023c4 <siscanf>:
 80023c4:	b40e      	push	{r1, r2, r3}
 80023c6:	f44f 7201 	mov.w	r2, #516	; 0x204
 80023ca:	b530      	push	{r4, r5, lr}
 80023cc:	b09c      	sub	sp, #112	; 0x70
 80023ce:	ac1f      	add	r4, sp, #124	; 0x7c
 80023d0:	f854 5b04 	ldr.w	r5, [r4], #4
 80023d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80023d8:	9002      	str	r0, [sp, #8]
 80023da:	9006      	str	r0, [sp, #24]
 80023dc:	f7fd fec0 	bl	8000160 <strlen>
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <siscanf+0x4c>)
 80023e2:	9003      	str	r0, [sp, #12]
 80023e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80023e6:	2300      	movs	r3, #0
 80023e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80023ea:	9314      	str	r3, [sp, #80]	; 0x50
 80023ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f0:	9007      	str	r0, [sp, #28]
 80023f2:	4808      	ldr	r0, [pc, #32]	; (8002414 <siscanf+0x50>)
 80023f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80023f8:	462a      	mov	r2, r5
 80023fa:	4623      	mov	r3, r4
 80023fc:	a902      	add	r1, sp, #8
 80023fe:	6800      	ldr	r0, [r0, #0]
 8002400:	9401      	str	r4, [sp, #4]
 8002402:	f000 f94b 	bl	800269c <__ssvfiscanf_r>
 8002406:	b01c      	add	sp, #112	; 0x70
 8002408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800240c:	b003      	add	sp, #12
 800240e:	4770      	bx	lr
 8002410:	08002419 	.word	0x08002419
 8002414:	20000054 	.word	0x20000054

08002418 <__seofread>:
 8002418:	2000      	movs	r0, #0
 800241a:	4770      	bx	lr

0800241c <strcpy>:
 800241c:	4603      	mov	r3, r0
 800241e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002422:	f803 2b01 	strb.w	r2, [r3], #1
 8002426:	2a00      	cmp	r2, #0
 8002428:	d1f9      	bne.n	800241e <strcpy+0x2>
 800242a:	4770      	bx	lr

0800242c <strncmp>:
 800242c:	b510      	push	{r4, lr}
 800242e:	b16a      	cbz	r2, 800244c <strncmp+0x20>
 8002430:	3901      	subs	r1, #1
 8002432:	1884      	adds	r4, r0, r2
 8002434:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002438:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800243c:	4293      	cmp	r3, r2
 800243e:	d103      	bne.n	8002448 <strncmp+0x1c>
 8002440:	42a0      	cmp	r0, r4
 8002442:	d001      	beq.n	8002448 <strncmp+0x1c>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f5      	bne.n	8002434 <strncmp+0x8>
 8002448:	1a98      	subs	r0, r3, r2
 800244a:	bd10      	pop	{r4, pc}
 800244c:	4610      	mov	r0, r2
 800244e:	bd10      	pop	{r4, pc}

08002450 <_strtoul_l.isra.0>:
 8002450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002454:	4680      	mov	r8, r0
 8002456:	4689      	mov	r9, r1
 8002458:	4692      	mov	sl, r2
 800245a:	461e      	mov	r6, r3
 800245c:	460f      	mov	r7, r1
 800245e:	463d      	mov	r5, r7
 8002460:	9808      	ldr	r0, [sp, #32]
 8002462:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002466:	f000 f89b 	bl	80025a0 <__locale_ctype_ptr_l>
 800246a:	4420      	add	r0, r4
 800246c:	7843      	ldrb	r3, [r0, #1]
 800246e:	f013 0308 	ands.w	r3, r3, #8
 8002472:	d10a      	bne.n	800248a <_strtoul_l.isra.0+0x3a>
 8002474:	2c2d      	cmp	r4, #45	; 0x2d
 8002476:	d10a      	bne.n	800248e <_strtoul_l.isra.0+0x3e>
 8002478:	2301      	movs	r3, #1
 800247a:	782c      	ldrb	r4, [r5, #0]
 800247c:	1cbd      	adds	r5, r7, #2
 800247e:	b15e      	cbz	r6, 8002498 <_strtoul_l.isra.0+0x48>
 8002480:	2e10      	cmp	r6, #16
 8002482:	d113      	bne.n	80024ac <_strtoul_l.isra.0+0x5c>
 8002484:	2c30      	cmp	r4, #48	; 0x30
 8002486:	d009      	beq.n	800249c <_strtoul_l.isra.0+0x4c>
 8002488:	e010      	b.n	80024ac <_strtoul_l.isra.0+0x5c>
 800248a:	462f      	mov	r7, r5
 800248c:	e7e7      	b.n	800245e <_strtoul_l.isra.0+0xe>
 800248e:	2c2b      	cmp	r4, #43	; 0x2b
 8002490:	bf04      	itt	eq
 8002492:	782c      	ldrbeq	r4, [r5, #0]
 8002494:	1cbd      	addeq	r5, r7, #2
 8002496:	e7f2      	b.n	800247e <_strtoul_l.isra.0+0x2e>
 8002498:	2c30      	cmp	r4, #48	; 0x30
 800249a:	d125      	bne.n	80024e8 <_strtoul_l.isra.0+0x98>
 800249c:	782a      	ldrb	r2, [r5, #0]
 800249e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80024a2:	2a58      	cmp	r2, #88	; 0x58
 80024a4:	d14a      	bne.n	800253c <_strtoul_l.isra.0+0xec>
 80024a6:	2610      	movs	r6, #16
 80024a8:	786c      	ldrb	r4, [r5, #1]
 80024aa:	3502      	adds	r5, #2
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	fbb1 f1f6 	udiv	r1, r1, r6
 80024b4:	2700      	movs	r7, #0
 80024b6:	fb06 fe01 	mul.w	lr, r6, r1
 80024ba:	4638      	mov	r0, r7
 80024bc:	ea6f 0e0e 	mvn.w	lr, lr
 80024c0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80024c4:	2a09      	cmp	r2, #9
 80024c6:	d811      	bhi.n	80024ec <_strtoul_l.isra.0+0x9c>
 80024c8:	4614      	mov	r4, r2
 80024ca:	42a6      	cmp	r6, r4
 80024cc:	dd1d      	ble.n	800250a <_strtoul_l.isra.0+0xba>
 80024ce:	2f00      	cmp	r7, #0
 80024d0:	db18      	blt.n	8002504 <_strtoul_l.isra.0+0xb4>
 80024d2:	4281      	cmp	r1, r0
 80024d4:	d316      	bcc.n	8002504 <_strtoul_l.isra.0+0xb4>
 80024d6:	d101      	bne.n	80024dc <_strtoul_l.isra.0+0x8c>
 80024d8:	45a6      	cmp	lr, r4
 80024da:	db13      	blt.n	8002504 <_strtoul_l.isra.0+0xb4>
 80024dc:	2701      	movs	r7, #1
 80024de:	fb00 4006 	mla	r0, r0, r6, r4
 80024e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80024e6:	e7eb      	b.n	80024c0 <_strtoul_l.isra.0+0x70>
 80024e8:	260a      	movs	r6, #10
 80024ea:	e7df      	b.n	80024ac <_strtoul_l.isra.0+0x5c>
 80024ec:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80024f0:	2a19      	cmp	r2, #25
 80024f2:	d801      	bhi.n	80024f8 <_strtoul_l.isra.0+0xa8>
 80024f4:	3c37      	subs	r4, #55	; 0x37
 80024f6:	e7e8      	b.n	80024ca <_strtoul_l.isra.0+0x7a>
 80024f8:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80024fc:	2a19      	cmp	r2, #25
 80024fe:	d804      	bhi.n	800250a <_strtoul_l.isra.0+0xba>
 8002500:	3c57      	subs	r4, #87	; 0x57
 8002502:	e7e2      	b.n	80024ca <_strtoul_l.isra.0+0x7a>
 8002504:	f04f 37ff 	mov.w	r7, #4294967295
 8002508:	e7eb      	b.n	80024e2 <_strtoul_l.isra.0+0x92>
 800250a:	2f00      	cmp	r7, #0
 800250c:	da09      	bge.n	8002522 <_strtoul_l.isra.0+0xd2>
 800250e:	2322      	movs	r3, #34	; 0x22
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f8c8 3000 	str.w	r3, [r8]
 8002518:	f1ba 0f00 	cmp.w	sl, #0
 800251c:	d107      	bne.n	800252e <_strtoul_l.isra.0+0xde>
 800251e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002522:	b103      	cbz	r3, 8002526 <_strtoul_l.isra.0+0xd6>
 8002524:	4240      	negs	r0, r0
 8002526:	f1ba 0f00 	cmp.w	sl, #0
 800252a:	d00c      	beq.n	8002546 <_strtoul_l.isra.0+0xf6>
 800252c:	b127      	cbz	r7, 8002538 <_strtoul_l.isra.0+0xe8>
 800252e:	3d01      	subs	r5, #1
 8002530:	f8ca 5000 	str.w	r5, [sl]
 8002534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002538:	464d      	mov	r5, r9
 800253a:	e7f9      	b.n	8002530 <_strtoul_l.isra.0+0xe0>
 800253c:	2430      	movs	r4, #48	; 0x30
 800253e:	2e00      	cmp	r6, #0
 8002540:	d1b4      	bne.n	80024ac <_strtoul_l.isra.0+0x5c>
 8002542:	2608      	movs	r6, #8
 8002544:	e7b2      	b.n	80024ac <_strtoul_l.isra.0+0x5c>
 8002546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800254c <_strtoul_r>:
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800254e:	4c06      	ldr	r4, [pc, #24]	; (8002568 <_strtoul_r+0x1c>)
 8002550:	4d06      	ldr	r5, [pc, #24]	; (800256c <_strtoul_r+0x20>)
 8002552:	6824      	ldr	r4, [r4, #0]
 8002554:	6a24      	ldr	r4, [r4, #32]
 8002556:	2c00      	cmp	r4, #0
 8002558:	bf08      	it	eq
 800255a:	462c      	moveq	r4, r5
 800255c:	9400      	str	r4, [sp, #0]
 800255e:	f7ff ff77 	bl	8002450 <_strtoul_l.isra.0>
 8002562:	b003      	add	sp, #12
 8002564:	bd30      	pop	{r4, r5, pc}
 8002566:	bf00      	nop
 8002568:	20000054 	.word	0x20000054
 800256c:	200000bc 	.word	0x200000bc

08002570 <strtoul>:
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <strtoul+0x24>)
 8002572:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002574:	681c      	ldr	r4, [r3, #0]
 8002576:	4d08      	ldr	r5, [pc, #32]	; (8002598 <strtoul+0x28>)
 8002578:	6a23      	ldr	r3, [r4, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf08      	it	eq
 800257e:	462b      	moveq	r3, r5
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	460a      	mov	r2, r1
 8002586:	4601      	mov	r1, r0
 8002588:	4620      	mov	r0, r4
 800258a:	f7ff ff61 	bl	8002450 <_strtoul_l.isra.0>
 800258e:	b003      	add	sp, #12
 8002590:	bd30      	pop	{r4, r5, pc}
 8002592:	bf00      	nop
 8002594:	20000054 	.word	0x20000054
 8002598:	200000bc 	.word	0x200000bc

0800259c <__env_lock>:
 800259c:	4770      	bx	lr

0800259e <__env_unlock>:
 800259e:	4770      	bx	lr

080025a0 <__locale_ctype_ptr_l>:
 80025a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80025a4:	4770      	bx	lr
	...

080025a8 <__locale_ctype_ptr>:
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <__locale_ctype_ptr+0x14>)
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <__locale_ctype_ptr+0x18>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf08      	it	eq
 80025b4:	4613      	moveq	r3, r2
 80025b6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80025ba:	4770      	bx	lr
 80025bc:	20000054 	.word	0x20000054
 80025c0:	200000bc 	.word	0x200000bc

080025c4 <__ascii_mbtowc>:
 80025c4:	b082      	sub	sp, #8
 80025c6:	b901      	cbnz	r1, 80025ca <__ascii_mbtowc+0x6>
 80025c8:	a901      	add	r1, sp, #4
 80025ca:	b142      	cbz	r2, 80025de <__ascii_mbtowc+0x1a>
 80025cc:	b14b      	cbz	r3, 80025e2 <__ascii_mbtowc+0x1e>
 80025ce:	7813      	ldrb	r3, [r2, #0]
 80025d0:	600b      	str	r3, [r1, #0]
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	1c10      	adds	r0, r2, #0
 80025d6:	bf18      	it	ne
 80025d8:	2001      	movne	r0, #1
 80025da:	b002      	add	sp, #8
 80025dc:	4770      	bx	lr
 80025de:	4610      	mov	r0, r2
 80025e0:	e7fb      	b.n	80025da <__ascii_mbtowc+0x16>
 80025e2:	f06f 0001 	mvn.w	r0, #1
 80025e6:	e7f8      	b.n	80025da <__ascii_mbtowc+0x16>

080025e8 <_sungetc_r>:
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	1c4b      	adds	r3, r1, #1
 80025ec:	4614      	mov	r4, r2
 80025ee:	d103      	bne.n	80025f8 <_sungetc_r+0x10>
 80025f0:	f04f 35ff 	mov.w	r5, #4294967295
 80025f4:	4628      	mov	r0, r5
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	8993      	ldrh	r3, [r2, #12]
 80025fa:	b2cd      	uxtb	r5, r1
 80025fc:	f023 0320 	bic.w	r3, r3, #32
 8002600:	8193      	strh	r3, [r2, #12]
 8002602:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002604:	6852      	ldr	r2, [r2, #4]
 8002606:	b18b      	cbz	r3, 800262c <_sungetc_r+0x44>
 8002608:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800260a:	429a      	cmp	r2, r3
 800260c:	da08      	bge.n	8002620 <_sungetc_r+0x38>
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	6022      	str	r2, [r4, #0]
 8002614:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002618:	6863      	ldr	r3, [r4, #4]
 800261a:	3301      	adds	r3, #1
 800261c:	6063      	str	r3, [r4, #4]
 800261e:	e7e9      	b.n	80025f4 <_sungetc_r+0xc>
 8002620:	4621      	mov	r1, r4
 8002622:	f000 fbab 	bl	8002d7c <__submore>
 8002626:	2800      	cmp	r0, #0
 8002628:	d0f1      	beq.n	800260e <_sungetc_r+0x26>
 800262a:	e7e1      	b.n	80025f0 <_sungetc_r+0x8>
 800262c:	6921      	ldr	r1, [r4, #16]
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	b151      	cbz	r1, 8002648 <_sungetc_r+0x60>
 8002632:	4299      	cmp	r1, r3
 8002634:	d208      	bcs.n	8002648 <_sungetc_r+0x60>
 8002636:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800263a:	428d      	cmp	r5, r1
 800263c:	d104      	bne.n	8002648 <_sungetc_r+0x60>
 800263e:	3b01      	subs	r3, #1
 8002640:	3201      	adds	r2, #1
 8002642:	6023      	str	r3, [r4, #0]
 8002644:	6062      	str	r2, [r4, #4]
 8002646:	e7d5      	b.n	80025f4 <_sungetc_r+0xc>
 8002648:	63e3      	str	r3, [r4, #60]	; 0x3c
 800264a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800264e:	6363      	str	r3, [r4, #52]	; 0x34
 8002650:	2303      	movs	r3, #3
 8002652:	63a3      	str	r3, [r4, #56]	; 0x38
 8002654:	4623      	mov	r3, r4
 8002656:	6422      	str	r2, [r4, #64]	; 0x40
 8002658:	f803 5f46 	strb.w	r5, [r3, #70]!
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	e7dc      	b.n	800261c <_sungetc_r+0x34>

08002662 <__ssrefill_r>:
 8002662:	b510      	push	{r4, lr}
 8002664:	460c      	mov	r4, r1
 8002666:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002668:	b169      	cbz	r1, 8002686 <__ssrefill_r+0x24>
 800266a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800266e:	4299      	cmp	r1, r3
 8002670:	d001      	beq.n	8002676 <__ssrefill_r+0x14>
 8002672:	f7ff faaf 	bl	8001bd4 <_free_r>
 8002676:	2000      	movs	r0, #0
 8002678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800267a:	6360      	str	r0, [r4, #52]	; 0x34
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	b113      	cbz	r3, 8002686 <__ssrefill_r+0x24>
 8002680:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	bd10      	pop	{r4, pc}
 8002686:	6923      	ldr	r3, [r4, #16]
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	6063      	str	r3, [r4, #4]
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	f043 0320 	orr.w	r3, r3, #32
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	bd10      	pop	{r4, pc}

0800269c <__ssvfiscanf_r>:
 800269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2300      	movs	r3, #0
 80026a8:	4606      	mov	r6, r0
 80026aa:	460c      	mov	r4, r1
 80026ac:	4692      	mov	sl, r2
 80026ae:	270a      	movs	r7, #10
 80026b0:	9346      	str	r3, [sp, #280]	; 0x118
 80026b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80026b4:	4b9f      	ldr	r3, [pc, #636]	; (8002934 <__ssvfiscanf_r+0x298>)
 80026b6:	f10d 080c 	add.w	r8, sp, #12
 80026ba:	93a2      	str	r3, [sp, #648]	; 0x288
 80026bc:	4b9e      	ldr	r3, [pc, #632]	; (8002938 <__ssvfiscanf_r+0x29c>)
 80026be:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800293c <__ssvfiscanf_r+0x2a0>
 80026c2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80026c6:	93a3      	str	r3, [sp, #652]	; 0x28c
 80026c8:	f89a 3000 	ldrb.w	r3, [sl]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 812f 	beq.w	8002930 <__ssvfiscanf_r+0x294>
 80026d2:	f7ff ff69 	bl	80025a8 <__locale_ctype_ptr>
 80026d6:	f89a b000 	ldrb.w	fp, [sl]
 80026da:	4458      	add	r0, fp
 80026dc:	7843      	ldrb	r3, [r0, #1]
 80026de:	f013 0308 	ands.w	r3, r3, #8
 80026e2:	d143      	bne.n	800276c <__ssvfiscanf_r+0xd0>
 80026e4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80026e8:	f10a 0501 	add.w	r5, sl, #1
 80026ec:	f040 8099 	bne.w	8002822 <__ssvfiscanf_r+0x186>
 80026f0:	9345      	str	r3, [sp, #276]	; 0x114
 80026f2:	9343      	str	r3, [sp, #268]	; 0x10c
 80026f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80026f8:	2b2a      	cmp	r3, #42	; 0x2a
 80026fa:	d103      	bne.n	8002704 <__ssvfiscanf_r+0x68>
 80026fc:	2310      	movs	r3, #16
 80026fe:	f10a 0502 	add.w	r5, sl, #2
 8002702:	9343      	str	r3, [sp, #268]	; 0x10c
 8002704:	7829      	ldrb	r1, [r5, #0]
 8002706:	46aa      	mov	sl, r5
 8002708:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800270c:	2a09      	cmp	r2, #9
 800270e:	f105 0501 	add.w	r5, r5, #1
 8002712:	d941      	bls.n	8002798 <__ssvfiscanf_r+0xfc>
 8002714:	2203      	movs	r2, #3
 8002716:	4889      	ldr	r0, [pc, #548]	; (800293c <__ssvfiscanf_r+0x2a0>)
 8002718:	f000 fb76 	bl	8002e08 <memchr>
 800271c:	b138      	cbz	r0, 800272e <__ssvfiscanf_r+0x92>
 800271e:	eba0 0309 	sub.w	r3, r0, r9
 8002722:	2001      	movs	r0, #1
 8002724:	46aa      	mov	sl, r5
 8002726:	4098      	lsls	r0, r3
 8002728:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800272a:	4318      	orrs	r0, r3
 800272c:	9043      	str	r0, [sp, #268]	; 0x10c
 800272e:	f89a 3000 	ldrb.w	r3, [sl]
 8002732:	f10a 0501 	add.w	r5, sl, #1
 8002736:	2b67      	cmp	r3, #103	; 0x67
 8002738:	d84a      	bhi.n	80027d0 <__ssvfiscanf_r+0x134>
 800273a:	2b65      	cmp	r3, #101	; 0x65
 800273c:	f080 80b7 	bcs.w	80028ae <__ssvfiscanf_r+0x212>
 8002740:	2b47      	cmp	r3, #71	; 0x47
 8002742:	d82f      	bhi.n	80027a4 <__ssvfiscanf_r+0x108>
 8002744:	2b45      	cmp	r3, #69	; 0x45
 8002746:	f080 80b2 	bcs.w	80028ae <__ssvfiscanf_r+0x212>
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8082 	beq.w	8002854 <__ssvfiscanf_r+0x1b8>
 8002750:	2b25      	cmp	r3, #37	; 0x25
 8002752:	d066      	beq.n	8002822 <__ssvfiscanf_r+0x186>
 8002754:	2303      	movs	r3, #3
 8002756:	9744      	str	r7, [sp, #272]	; 0x110
 8002758:	9349      	str	r3, [sp, #292]	; 0x124
 800275a:	e045      	b.n	80027e8 <__ssvfiscanf_r+0x14c>
 800275c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800275e:	3301      	adds	r3, #1
 8002760:	3101      	adds	r1, #1
 8002762:	9147      	str	r1, [sp, #284]	; 0x11c
 8002764:	6861      	ldr	r1, [r4, #4]
 8002766:	6023      	str	r3, [r4, #0]
 8002768:	3901      	subs	r1, #1
 800276a:	6061      	str	r1, [r4, #4]
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	dd0b      	ble.n	800278a <__ssvfiscanf_r+0xee>
 8002772:	f7ff ff19 	bl	80025a8 <__locale_ctype_ptr>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	7819      	ldrb	r1, [r3, #0]
 800277a:	4408      	add	r0, r1
 800277c:	7841      	ldrb	r1, [r0, #1]
 800277e:	070d      	lsls	r5, r1, #28
 8002780:	d4ec      	bmi.n	800275c <__ssvfiscanf_r+0xc0>
 8002782:	f10a 0501 	add.w	r5, sl, #1
 8002786:	46aa      	mov	sl, r5
 8002788:	e79e      	b.n	80026c8 <__ssvfiscanf_r+0x2c>
 800278a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800278c:	4621      	mov	r1, r4
 800278e:	4630      	mov	r0, r6
 8002790:	4798      	blx	r3
 8002792:	2800      	cmp	r0, #0
 8002794:	d0ed      	beq.n	8002772 <__ssvfiscanf_r+0xd6>
 8002796:	e7f4      	b.n	8002782 <__ssvfiscanf_r+0xe6>
 8002798:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800279a:	fb07 1303 	mla	r3, r7, r3, r1
 800279e:	3b30      	subs	r3, #48	; 0x30
 80027a0:	9345      	str	r3, [sp, #276]	; 0x114
 80027a2:	e7af      	b.n	8002704 <__ssvfiscanf_r+0x68>
 80027a4:	2b5b      	cmp	r3, #91	; 0x5b
 80027a6:	d061      	beq.n	800286c <__ssvfiscanf_r+0x1d0>
 80027a8:	d80c      	bhi.n	80027c4 <__ssvfiscanf_r+0x128>
 80027aa:	2b58      	cmp	r3, #88	; 0x58
 80027ac:	d1d2      	bne.n	8002754 <__ssvfiscanf_r+0xb8>
 80027ae:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80027b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b4:	9243      	str	r2, [sp, #268]	; 0x10c
 80027b6:	2210      	movs	r2, #16
 80027b8:	9244      	str	r2, [sp, #272]	; 0x110
 80027ba:	2b6f      	cmp	r3, #111	; 0x6f
 80027bc:	bfb4      	ite	lt
 80027be:	2303      	movlt	r3, #3
 80027c0:	2304      	movge	r3, #4
 80027c2:	e010      	b.n	80027e6 <__ssvfiscanf_r+0x14a>
 80027c4:	2b63      	cmp	r3, #99	; 0x63
 80027c6:	d05c      	beq.n	8002882 <__ssvfiscanf_r+0x1e6>
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d1c3      	bne.n	8002754 <__ssvfiscanf_r+0xb8>
 80027cc:	9744      	str	r7, [sp, #272]	; 0x110
 80027ce:	e7f4      	b.n	80027ba <__ssvfiscanf_r+0x11e>
 80027d0:	2b70      	cmp	r3, #112	; 0x70
 80027d2:	d042      	beq.n	800285a <__ssvfiscanf_r+0x1be>
 80027d4:	d81d      	bhi.n	8002812 <__ssvfiscanf_r+0x176>
 80027d6:	2b6e      	cmp	r3, #110	; 0x6e
 80027d8:	d059      	beq.n	800288e <__ssvfiscanf_r+0x1f2>
 80027da:	d843      	bhi.n	8002864 <__ssvfiscanf_r+0x1c8>
 80027dc:	2b69      	cmp	r3, #105	; 0x69
 80027de:	d1b9      	bne.n	8002754 <__ssvfiscanf_r+0xb8>
 80027e0:	2300      	movs	r3, #0
 80027e2:	9344      	str	r3, [sp, #272]	; 0x110
 80027e4:	2303      	movs	r3, #3
 80027e6:	9349      	str	r3, [sp, #292]	; 0x124
 80027e8:	6863      	ldr	r3, [r4, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dd61      	ble.n	80028b2 <__ssvfiscanf_r+0x216>
 80027ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80027f0:	0659      	lsls	r1, r3, #25
 80027f2:	d56f      	bpl.n	80028d4 <__ssvfiscanf_r+0x238>
 80027f4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	dc7c      	bgt.n	80028f4 <__ssvfiscanf_r+0x258>
 80027fa:	ab01      	add	r3, sp, #4
 80027fc:	4622      	mov	r2, r4
 80027fe:	a943      	add	r1, sp, #268	; 0x10c
 8002800:	4630      	mov	r0, r6
 8002802:	f000 f89f 	bl	8002944 <_scanf_chars>
 8002806:	2801      	cmp	r0, #1
 8002808:	f000 8092 	beq.w	8002930 <__ssvfiscanf_r+0x294>
 800280c:	2802      	cmp	r0, #2
 800280e:	d1ba      	bne.n	8002786 <__ssvfiscanf_r+0xea>
 8002810:	e01d      	b.n	800284e <__ssvfiscanf_r+0x1b2>
 8002812:	2b75      	cmp	r3, #117	; 0x75
 8002814:	d0da      	beq.n	80027cc <__ssvfiscanf_r+0x130>
 8002816:	2b78      	cmp	r3, #120	; 0x78
 8002818:	d0c9      	beq.n	80027ae <__ssvfiscanf_r+0x112>
 800281a:	2b73      	cmp	r3, #115	; 0x73
 800281c:	d19a      	bne.n	8002754 <__ssvfiscanf_r+0xb8>
 800281e:	2302      	movs	r3, #2
 8002820:	e7e1      	b.n	80027e6 <__ssvfiscanf_r+0x14a>
 8002822:	6863      	ldr	r3, [r4, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dd0c      	ble.n	8002842 <__ssvfiscanf_r+0x1a6>
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	4593      	cmp	fp, r2
 800282e:	d17f      	bne.n	8002930 <__ssvfiscanf_r+0x294>
 8002830:	3301      	adds	r3, #1
 8002832:	6862      	ldr	r2, [r4, #4]
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002838:	3a01      	subs	r2, #1
 800283a:	3301      	adds	r3, #1
 800283c:	6062      	str	r2, [r4, #4]
 800283e:	9347      	str	r3, [sp, #284]	; 0x11c
 8002840:	e7a1      	b.n	8002786 <__ssvfiscanf_r+0xea>
 8002842:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002844:	4621      	mov	r1, r4
 8002846:	4630      	mov	r0, r6
 8002848:	4798      	blx	r3
 800284a:	2800      	cmp	r0, #0
 800284c:	d0ec      	beq.n	8002828 <__ssvfiscanf_r+0x18c>
 800284e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002850:	2800      	cmp	r0, #0
 8002852:	d163      	bne.n	800291c <__ssvfiscanf_r+0x280>
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	e066      	b.n	8002928 <__ssvfiscanf_r+0x28c>
 800285a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	9243      	str	r2, [sp, #268]	; 0x10c
 8002862:	e7a4      	b.n	80027ae <__ssvfiscanf_r+0x112>
 8002864:	2308      	movs	r3, #8
 8002866:	9344      	str	r3, [sp, #272]	; 0x110
 8002868:	2304      	movs	r3, #4
 800286a:	e7bc      	b.n	80027e6 <__ssvfiscanf_r+0x14a>
 800286c:	4629      	mov	r1, r5
 800286e:	4640      	mov	r0, r8
 8002870:	f000 f9c2 	bl	8002bf8 <__sccl>
 8002874:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002876:	4605      	mov	r5, r0
 8002878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287c:	9343      	str	r3, [sp, #268]	; 0x10c
 800287e:	2301      	movs	r3, #1
 8002880:	e7b1      	b.n	80027e6 <__ssvfiscanf_r+0x14a>
 8002882:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	9343      	str	r3, [sp, #268]	; 0x10c
 800288a:	2300      	movs	r3, #0
 800288c:	e7ab      	b.n	80027e6 <__ssvfiscanf_r+0x14a>
 800288e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002890:	06d0      	lsls	r0, r2, #27
 8002892:	f53f af78 	bmi.w	8002786 <__ssvfiscanf_r+0xea>
 8002896:	f012 0f01 	tst.w	r2, #1
 800289a:	9a01      	ldr	r2, [sp, #4]
 800289c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800289e:	f102 0104 	add.w	r1, r2, #4
 80028a2:	9101      	str	r1, [sp, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	bf14      	ite	ne
 80028a8:	8013      	strhne	r3, [r2, #0]
 80028aa:	6013      	streq	r3, [r2, #0]
 80028ac:	e76b      	b.n	8002786 <__ssvfiscanf_r+0xea>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e799      	b.n	80027e6 <__ssvfiscanf_r+0x14a>
 80028b2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80028b4:	4621      	mov	r1, r4
 80028b6:	4630      	mov	r0, r6
 80028b8:	4798      	blx	r3
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d097      	beq.n	80027ee <__ssvfiscanf_r+0x152>
 80028be:	e7c6      	b.n	800284e <__ssvfiscanf_r+0x1b2>
 80028c0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80028c2:	3201      	adds	r2, #1
 80028c4:	9247      	str	r2, [sp, #284]	; 0x11c
 80028c6:	6862      	ldr	r2, [r4, #4]
 80028c8:	3a01      	subs	r2, #1
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	6062      	str	r2, [r4, #4]
 80028ce:	dd0a      	ble.n	80028e6 <__ssvfiscanf_r+0x24a>
 80028d0:	3301      	adds	r3, #1
 80028d2:	6023      	str	r3, [r4, #0]
 80028d4:	f7ff fe68 	bl	80025a8 <__locale_ctype_ptr>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	4410      	add	r0, r2
 80028de:	7842      	ldrb	r2, [r0, #1]
 80028e0:	0712      	lsls	r2, r2, #28
 80028e2:	d4ed      	bmi.n	80028c0 <__ssvfiscanf_r+0x224>
 80028e4:	e786      	b.n	80027f4 <__ssvfiscanf_r+0x158>
 80028e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80028e8:	4621      	mov	r1, r4
 80028ea:	4630      	mov	r0, r6
 80028ec:	4798      	blx	r3
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d0f0      	beq.n	80028d4 <__ssvfiscanf_r+0x238>
 80028f2:	e7ac      	b.n	800284e <__ssvfiscanf_r+0x1b2>
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	dc06      	bgt.n	8002906 <__ssvfiscanf_r+0x26a>
 80028f8:	ab01      	add	r3, sp, #4
 80028fa:	4622      	mov	r2, r4
 80028fc:	a943      	add	r1, sp, #268	; 0x10c
 80028fe:	4630      	mov	r0, r6
 8002900:	f000 f884 	bl	8002a0c <_scanf_i>
 8002904:	e77f      	b.n	8002806 <__ssvfiscanf_r+0x16a>
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <__ssvfiscanf_r+0x2a4>)
 8002908:	2b00      	cmp	r3, #0
 800290a:	f43f af3c 	beq.w	8002786 <__ssvfiscanf_r+0xea>
 800290e:	ab01      	add	r3, sp, #4
 8002910:	4622      	mov	r2, r4
 8002912:	a943      	add	r1, sp, #268	; 0x10c
 8002914:	4630      	mov	r0, r6
 8002916:	f3af 8000 	nop.w
 800291a:	e774      	b.n	8002806 <__ssvfiscanf_r+0x16a>
 800291c:	89a3      	ldrh	r3, [r4, #12]
 800291e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002922:	bf18      	it	ne
 8002924:	f04f 30ff 	movne.w	r0, #4294967295
 8002928:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800292c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002930:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002932:	e7f9      	b.n	8002928 <__ssvfiscanf_r+0x28c>
 8002934:	080025e9 	.word	0x080025e9
 8002938:	08002663 	.word	0x08002663
 800293c:	08002fc6 	.word	0x08002fc6
 8002940:	00000000 	.word	0x00000000

08002944 <_scanf_chars>:
 8002944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002948:	4615      	mov	r5, r2
 800294a:	688a      	ldr	r2, [r1, #8]
 800294c:	4680      	mov	r8, r0
 800294e:	460c      	mov	r4, r1
 8002950:	b932      	cbnz	r2, 8002960 <_scanf_chars+0x1c>
 8002952:	698a      	ldr	r2, [r1, #24]
 8002954:	2a00      	cmp	r2, #0
 8002956:	bf0c      	ite	eq
 8002958:	2201      	moveq	r2, #1
 800295a:	f04f 32ff 	movne.w	r2, #4294967295
 800295e:	608a      	str	r2, [r1, #8]
 8002960:	2600      	movs	r6, #0
 8002962:	6822      	ldr	r2, [r4, #0]
 8002964:	06d1      	lsls	r1, r2, #27
 8002966:	bf5f      	itttt	pl
 8002968:	681a      	ldrpl	r2, [r3, #0]
 800296a:	1d11      	addpl	r1, r2, #4
 800296c:	6019      	strpl	r1, [r3, #0]
 800296e:	6817      	ldrpl	r7, [r2, #0]
 8002970:	69a3      	ldr	r3, [r4, #24]
 8002972:	b1db      	cbz	r3, 80029ac <_scanf_chars+0x68>
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <_scanf_chars+0x44>
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	6962      	ldr	r2, [r4, #20]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	b9a3      	cbnz	r3, 80029ac <_scanf_chars+0x68>
 8002982:	2e00      	cmp	r6, #0
 8002984:	d131      	bne.n	80029ea <_scanf_chars+0xa6>
 8002986:	e006      	b.n	8002996 <_scanf_chars+0x52>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d007      	beq.n	800299c <_scanf_chars+0x58>
 800298c:	2e00      	cmp	r6, #0
 800298e:	d12c      	bne.n	80029ea <_scanf_chars+0xa6>
 8002990:	69a3      	ldr	r3, [r4, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d129      	bne.n	80029ea <_scanf_chars+0xa6>
 8002996:	2001      	movs	r0, #1
 8002998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800299c:	f7ff fe04 	bl	80025a8 <__locale_ctype_ptr>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4418      	add	r0, r3
 80029a6:	7843      	ldrb	r3, [r0, #1]
 80029a8:	071b      	lsls	r3, r3, #28
 80029aa:	d4ef      	bmi.n	800298c <_scanf_chars+0x48>
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	3601      	adds	r6, #1
 80029b0:	06da      	lsls	r2, r3, #27
 80029b2:	bf5e      	ittt	pl
 80029b4:	682b      	ldrpl	r3, [r5, #0]
 80029b6:	781b      	ldrbpl	r3, [r3, #0]
 80029b8:	703b      	strbpl	r3, [r7, #0]
 80029ba:	682a      	ldr	r2, [r5, #0]
 80029bc:	686b      	ldr	r3, [r5, #4]
 80029be:	f102 0201 	add.w	r2, r2, #1
 80029c2:	602a      	str	r2, [r5, #0]
 80029c4:	68a2      	ldr	r2, [r4, #8]
 80029c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80029ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80029ce:	606b      	str	r3, [r5, #4]
 80029d0:	bf58      	it	pl
 80029d2:	3701      	addpl	r7, #1
 80029d4:	60a2      	str	r2, [r4, #8]
 80029d6:	b142      	cbz	r2, 80029ea <_scanf_chars+0xa6>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	dcc9      	bgt.n	8002970 <_scanf_chars+0x2c>
 80029dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80029e0:	4629      	mov	r1, r5
 80029e2:	4640      	mov	r0, r8
 80029e4:	4798      	blx	r3
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d0c2      	beq.n	8002970 <_scanf_chars+0x2c>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	f013 0310 	ands.w	r3, r3, #16
 80029f0:	d105      	bne.n	80029fe <_scanf_chars+0xba>
 80029f2:	68e2      	ldr	r2, [r4, #12]
 80029f4:	3201      	adds	r2, #1
 80029f6:	60e2      	str	r2, [r4, #12]
 80029f8:	69a2      	ldr	r2, [r4, #24]
 80029fa:	b102      	cbz	r2, 80029fe <_scanf_chars+0xba>
 80029fc:	703b      	strb	r3, [r7, #0]
 80029fe:	6923      	ldr	r3, [r4, #16]
 8002a00:	2000      	movs	r0, #0
 8002a02:	441e      	add	r6, r3
 8002a04:	6126      	str	r6, [r4, #16]
 8002a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a0c <_scanf_i>:
 8002a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a10:	460c      	mov	r4, r1
 8002a12:	469a      	mov	sl, r3
 8002a14:	4b74      	ldr	r3, [pc, #464]	; (8002be8 <_scanf_i+0x1dc>)
 8002a16:	b087      	sub	sp, #28
 8002a18:	4683      	mov	fp, r0
 8002a1a:	4616      	mov	r6, r2
 8002a1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a20:	ab03      	add	r3, sp, #12
 8002a22:	68a7      	ldr	r7, [r4, #8]
 8002a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a28:	4b70      	ldr	r3, [pc, #448]	; (8002bec <_scanf_i+0x1e0>)
 8002a2a:	69a1      	ldr	r1, [r4, #24]
 8002a2c:	4a70      	ldr	r2, [pc, #448]	; (8002bf0 <_scanf_i+0x1e4>)
 8002a2e:	f104 091c 	add.w	r9, r4, #28
 8002a32:	2903      	cmp	r1, #3
 8002a34:	bf18      	it	ne
 8002a36:	461a      	movne	r2, r3
 8002a38:	1e7b      	subs	r3, r7, #1
 8002a3a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8002a3e:	bf84      	itt	hi
 8002a40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002a44:	60a3      	strhi	r3, [r4, #8]
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	bf88      	it	hi
 8002a4a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002a4e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8002a52:	6023      	str	r3, [r4, #0]
 8002a54:	bf98      	it	ls
 8002a56:	2700      	movls	r7, #0
 8002a58:	464b      	mov	r3, r9
 8002a5a:	f04f 0800 	mov.w	r8, #0
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	bf88      	it	hi
 8002a62:	197f      	addhi	r7, r7, r5
 8002a64:	6831      	ldr	r1, [r6, #0]
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	ab03      	add	r3, sp, #12
 8002a6a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	7809      	ldrb	r1, [r1, #0]
 8002a72:	f000 f9c9 	bl	8002e08 <memchr>
 8002a76:	9b01      	ldr	r3, [sp, #4]
 8002a78:	b328      	cbz	r0, 8002ac6 <_scanf_i+0xba>
 8002a7a:	f1b8 0f01 	cmp.w	r8, #1
 8002a7e:	d156      	bne.n	8002b2e <_scanf_i+0x122>
 8002a80:	6862      	ldr	r2, [r4, #4]
 8002a82:	b92a      	cbnz	r2, 8002a90 <_scanf_i+0x84>
 8002a84:	2208      	movs	r2, #8
 8002a86:	6062      	str	r2, [r4, #4]
 8002a88:	6822      	ldr	r2, [r4, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8e:	6022      	str	r2, [r4, #0]
 8002a90:	6822      	ldr	r2, [r4, #0]
 8002a92:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8002a96:	6022      	str	r2, [r4, #0]
 8002a98:	68a2      	ldr	r2, [r4, #8]
 8002a9a:	1e51      	subs	r1, r2, #1
 8002a9c:	60a1      	str	r1, [r4, #8]
 8002a9e:	b192      	cbz	r2, 8002ac6 <_scanf_i+0xba>
 8002aa0:	6832      	ldr	r2, [r6, #0]
 8002aa2:	1c5d      	adds	r5, r3, #1
 8002aa4:	1c51      	adds	r1, r2, #1
 8002aa6:	6031      	str	r1, [r6, #0]
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	6873      	ldr	r3, [r6, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	6073      	str	r3, [r6, #4]
 8002ab4:	dc06      	bgt.n	8002ac4 <_scanf_i+0xb8>
 8002ab6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002aba:	4631      	mov	r1, r6
 8002abc:	4658      	mov	r0, fp
 8002abe:	4798      	blx	r3
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d177      	bne.n	8002bb4 <_scanf_i+0x1a8>
 8002ac4:	462b      	mov	r3, r5
 8002ac6:	f108 0801 	add.w	r8, r8, #1
 8002aca:	f1b8 0f03 	cmp.w	r8, #3
 8002ace:	d1c9      	bne.n	8002a64 <_scanf_i+0x58>
 8002ad0:	6862      	ldr	r2, [r4, #4]
 8002ad2:	b90a      	cbnz	r2, 8002ad8 <_scanf_i+0xcc>
 8002ad4:	220a      	movs	r2, #10
 8002ad6:	6062      	str	r2, [r4, #4]
 8002ad8:	6862      	ldr	r2, [r4, #4]
 8002ada:	4946      	ldr	r1, [pc, #280]	; (8002bf4 <_scanf_i+0x1e8>)
 8002adc:	6960      	ldr	r0, [r4, #20]
 8002ade:	1a89      	subs	r1, r1, r2
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	f000 f889 	bl	8002bf8 <__sccl>
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	f04f 0800 	mov.w	r8, #0
 8002aec:	461d      	mov	r5, r3
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d039      	beq.n	8002b68 <_scanf_i+0x15c>
 8002af4:	6831      	ldr	r1, [r6, #0]
 8002af6:	6960      	ldr	r0, [r4, #20]
 8002af8:	780a      	ldrb	r2, [r1, #0]
 8002afa:	5c80      	ldrb	r0, [r0, r2]
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d033      	beq.n	8002b68 <_scanf_i+0x15c>
 8002b00:	2a30      	cmp	r2, #48	; 0x30
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	d121      	bne.n	8002b4a <_scanf_i+0x13e>
 8002b06:	0510      	lsls	r0, r2, #20
 8002b08:	d51f      	bpl.n	8002b4a <_scanf_i+0x13e>
 8002b0a:	f108 0801 	add.w	r8, r8, #1
 8002b0e:	b117      	cbz	r7, 8002b16 <_scanf_i+0x10a>
 8002b10:	3301      	adds	r3, #1
 8002b12:	3f01      	subs	r7, #1
 8002b14:	60a3      	str	r3, [r4, #8]
 8002b16:	6873      	ldr	r3, [r6, #4]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	6073      	str	r3, [r6, #4]
 8002b1e:	dd1c      	ble.n	8002b5a <_scanf_i+0x14e>
 8002b20:	6833      	ldr	r3, [r6, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	68a3      	ldr	r3, [r4, #8]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	60a3      	str	r3, [r4, #8]
 8002b2c:	e7df      	b.n	8002aee <_scanf_i+0xe2>
 8002b2e:	f1b8 0f02 	cmp.w	r8, #2
 8002b32:	d1b1      	bne.n	8002a98 <_scanf_i+0x8c>
 8002b34:	6822      	ldr	r2, [r4, #0]
 8002b36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8002b3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002b3e:	d1c2      	bne.n	8002ac6 <_scanf_i+0xba>
 8002b40:	2110      	movs	r1, #16
 8002b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b46:	6061      	str	r1, [r4, #4]
 8002b48:	e7a5      	b.n	8002a96 <_scanf_i+0x8a>
 8002b4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8002b4e:	6022      	str	r2, [r4, #0]
 8002b50:	780b      	ldrb	r3, [r1, #0]
 8002b52:	3501      	adds	r5, #1
 8002b54:	f805 3c01 	strb.w	r3, [r5, #-1]
 8002b58:	e7dd      	b.n	8002b16 <_scanf_i+0x10a>
 8002b5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002b5e:	4631      	mov	r1, r6
 8002b60:	4658      	mov	r0, fp
 8002b62:	4798      	blx	r3
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d0de      	beq.n	8002b26 <_scanf_i+0x11a>
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	05d9      	lsls	r1, r3, #23
 8002b6c:	d50c      	bpl.n	8002b88 <_scanf_i+0x17c>
 8002b6e:	454d      	cmp	r5, r9
 8002b70:	d908      	bls.n	8002b84 <_scanf_i+0x178>
 8002b72:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002b76:	1e6f      	subs	r7, r5, #1
 8002b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8002b7c:	4632      	mov	r2, r6
 8002b7e:	4658      	mov	r0, fp
 8002b80:	4798      	blx	r3
 8002b82:	463d      	mov	r5, r7
 8002b84:	454d      	cmp	r5, r9
 8002b86:	d02c      	beq.n	8002be2 <_scanf_i+0x1d6>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	f012 0210 	ands.w	r2, r2, #16
 8002b8e:	d11e      	bne.n	8002bce <_scanf_i+0x1c2>
 8002b90:	702a      	strb	r2, [r5, #0]
 8002b92:	6863      	ldr	r3, [r4, #4]
 8002b94:	4649      	mov	r1, r9
 8002b96:	4658      	mov	r0, fp
 8002b98:	9e00      	ldr	r6, [sp, #0]
 8002b9a:	47b0      	blx	r6
 8002b9c:	6822      	ldr	r2, [r4, #0]
 8002b9e:	f8da 3000 	ldr.w	r3, [sl]
 8002ba2:	f012 0f20 	tst.w	r2, #32
 8002ba6:	d008      	beq.n	8002bba <_scanf_i+0x1ae>
 8002ba8:	1d1a      	adds	r2, r3, #4
 8002baa:	f8ca 2000 	str.w	r2, [sl]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6018      	str	r0, [r3, #0]
 8002bb2:	e009      	b.n	8002bc8 <_scanf_i+0x1bc>
 8002bb4:	f04f 0800 	mov.w	r8, #0
 8002bb8:	e7d6      	b.n	8002b68 <_scanf_i+0x15c>
 8002bba:	07d2      	lsls	r2, r2, #31
 8002bbc:	d5f4      	bpl.n	8002ba8 <_scanf_i+0x19c>
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	f8ca 2000 	str.w	r2, [sl]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	8018      	strh	r0, [r3, #0]
 8002bc8:	68e3      	ldr	r3, [r4, #12]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	60e3      	str	r3, [r4, #12]
 8002bce:	2000      	movs	r0, #0
 8002bd0:	eba5 0509 	sub.w	r5, r5, r9
 8002bd4:	44a8      	add	r8, r5
 8002bd6:	6925      	ldr	r5, [r4, #16]
 8002bd8:	4445      	add	r5, r8
 8002bda:	6125      	str	r5, [r4, #16]
 8002bdc:	b007      	add	sp, #28
 8002bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be2:	2001      	movs	r0, #1
 8002be4:	e7fa      	b.n	8002bdc <_scanf_i+0x1d0>
 8002be6:	bf00      	nop
 8002be8:	08002efc 	.word	0x08002efc
 8002bec:	0800254d 	.word	0x0800254d
 8002bf0:	08002d59 	.word	0x08002d59
 8002bf4:	08002fda 	.word	0x08002fda

08002bf8 <__sccl>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	780b      	ldrb	r3, [r1, #0]
 8002bfc:	1e44      	subs	r4, r0, #1
 8002bfe:	2b5e      	cmp	r3, #94	; 0x5e
 8002c00:	bf13      	iteet	ne
 8002c02:	1c4a      	addne	r2, r1, #1
 8002c04:	1c8a      	addeq	r2, r1, #2
 8002c06:	784b      	ldrbeq	r3, [r1, #1]
 8002c08:	2100      	movne	r1, #0
 8002c0a:	bf08      	it	eq
 8002c0c:	2101      	moveq	r1, #1
 8002c0e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8002c12:	f804 1f01 	strb.w	r1, [r4, #1]!
 8002c16:	42a5      	cmp	r5, r4
 8002c18:	d1fb      	bne.n	8002c12 <__sccl+0x1a>
 8002c1a:	b913      	cbnz	r3, 8002c22 <__sccl+0x2a>
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
 8002c22:	f081 0401 	eor.w	r4, r1, #1
 8002c26:	4611      	mov	r1, r2
 8002c28:	54c4      	strb	r4, [r0, r3]
 8002c2a:	780d      	ldrb	r5, [r1, #0]
 8002c2c:	1c4a      	adds	r2, r1, #1
 8002c2e:	2d2d      	cmp	r5, #45	; 0x2d
 8002c30:	d006      	beq.n	8002c40 <__sccl+0x48>
 8002c32:	2d5d      	cmp	r5, #93	; 0x5d
 8002c34:	d0f3      	beq.n	8002c1e <__sccl+0x26>
 8002c36:	b90d      	cbnz	r5, 8002c3c <__sccl+0x44>
 8002c38:	460a      	mov	r2, r1
 8002c3a:	e7f0      	b.n	8002c1e <__sccl+0x26>
 8002c3c:	462b      	mov	r3, r5
 8002c3e:	e7f2      	b.n	8002c26 <__sccl+0x2e>
 8002c40:	784e      	ldrb	r6, [r1, #1]
 8002c42:	2e5d      	cmp	r6, #93	; 0x5d
 8002c44:	d0fa      	beq.n	8002c3c <__sccl+0x44>
 8002c46:	42b3      	cmp	r3, r6
 8002c48:	dcf8      	bgt.n	8002c3c <__sccl+0x44>
 8002c4a:	3102      	adds	r1, #2
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	429e      	cmp	r6, r3
 8002c50:	54c4      	strb	r4, [r0, r3]
 8002c52:	dcfb      	bgt.n	8002c4c <__sccl+0x54>
 8002c54:	e7e9      	b.n	8002c2a <__sccl+0x32>

08002c56 <_strtol_l.isra.0>:
 8002c56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5a:	4680      	mov	r8, r0
 8002c5c:	4689      	mov	r9, r1
 8002c5e:	4692      	mov	sl, r2
 8002c60:	461f      	mov	r7, r3
 8002c62:	468b      	mov	fp, r1
 8002c64:	465d      	mov	r5, fp
 8002c66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c6c:	f7ff fc98 	bl	80025a0 <__locale_ctype_ptr_l>
 8002c70:	4420      	add	r0, r4
 8002c72:	7846      	ldrb	r6, [r0, #1]
 8002c74:	f016 0608 	ands.w	r6, r6, #8
 8002c78:	d10b      	bne.n	8002c92 <_strtol_l.isra.0+0x3c>
 8002c7a:	2c2d      	cmp	r4, #45	; 0x2d
 8002c7c:	d10b      	bne.n	8002c96 <_strtol_l.isra.0+0x40>
 8002c7e:	2601      	movs	r6, #1
 8002c80:	782c      	ldrb	r4, [r5, #0]
 8002c82:	f10b 0502 	add.w	r5, fp, #2
 8002c86:	b167      	cbz	r7, 8002ca2 <_strtol_l.isra.0+0x4c>
 8002c88:	2f10      	cmp	r7, #16
 8002c8a:	d114      	bne.n	8002cb6 <_strtol_l.isra.0+0x60>
 8002c8c:	2c30      	cmp	r4, #48	; 0x30
 8002c8e:	d00a      	beq.n	8002ca6 <_strtol_l.isra.0+0x50>
 8002c90:	e011      	b.n	8002cb6 <_strtol_l.isra.0+0x60>
 8002c92:	46ab      	mov	fp, r5
 8002c94:	e7e6      	b.n	8002c64 <_strtol_l.isra.0+0xe>
 8002c96:	2c2b      	cmp	r4, #43	; 0x2b
 8002c98:	bf04      	itt	eq
 8002c9a:	782c      	ldrbeq	r4, [r5, #0]
 8002c9c:	f10b 0502 	addeq.w	r5, fp, #2
 8002ca0:	e7f1      	b.n	8002c86 <_strtol_l.isra.0+0x30>
 8002ca2:	2c30      	cmp	r4, #48	; 0x30
 8002ca4:	d127      	bne.n	8002cf6 <_strtol_l.isra.0+0xa0>
 8002ca6:	782b      	ldrb	r3, [r5, #0]
 8002ca8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002cac:	2b58      	cmp	r3, #88	; 0x58
 8002cae:	d14b      	bne.n	8002d48 <_strtol_l.isra.0+0xf2>
 8002cb0:	2710      	movs	r7, #16
 8002cb2:	786c      	ldrb	r4, [r5, #1]
 8002cb4:	3502      	adds	r5, #2
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	bf0c      	ite	eq
 8002cba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002cbe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	fbb1 fef7 	udiv	lr, r1, r7
 8002cc8:	4610      	mov	r0, r2
 8002cca:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002cce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002cd2:	2b09      	cmp	r3, #9
 8002cd4:	d811      	bhi.n	8002cfa <_strtol_l.isra.0+0xa4>
 8002cd6:	461c      	mov	r4, r3
 8002cd8:	42a7      	cmp	r7, r4
 8002cda:	dd1d      	ble.n	8002d18 <_strtol_l.isra.0+0xc2>
 8002cdc:	1c53      	adds	r3, r2, #1
 8002cde:	d007      	beq.n	8002cf0 <_strtol_l.isra.0+0x9a>
 8002ce0:	4586      	cmp	lr, r0
 8002ce2:	d316      	bcc.n	8002d12 <_strtol_l.isra.0+0xbc>
 8002ce4:	d101      	bne.n	8002cea <_strtol_l.isra.0+0x94>
 8002ce6:	45a4      	cmp	ip, r4
 8002ce8:	db13      	blt.n	8002d12 <_strtol_l.isra.0+0xbc>
 8002cea:	2201      	movs	r2, #1
 8002cec:	fb00 4007 	mla	r0, r0, r7, r4
 8002cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002cf4:	e7eb      	b.n	8002cce <_strtol_l.isra.0+0x78>
 8002cf6:	270a      	movs	r7, #10
 8002cf8:	e7dd      	b.n	8002cb6 <_strtol_l.isra.0+0x60>
 8002cfa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002cfe:	2b19      	cmp	r3, #25
 8002d00:	d801      	bhi.n	8002d06 <_strtol_l.isra.0+0xb0>
 8002d02:	3c37      	subs	r4, #55	; 0x37
 8002d04:	e7e8      	b.n	8002cd8 <_strtol_l.isra.0+0x82>
 8002d06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002d0a:	2b19      	cmp	r3, #25
 8002d0c:	d804      	bhi.n	8002d18 <_strtol_l.isra.0+0xc2>
 8002d0e:	3c57      	subs	r4, #87	; 0x57
 8002d10:	e7e2      	b.n	8002cd8 <_strtol_l.isra.0+0x82>
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295
 8002d16:	e7eb      	b.n	8002cf0 <_strtol_l.isra.0+0x9a>
 8002d18:	1c53      	adds	r3, r2, #1
 8002d1a:	d108      	bne.n	8002d2e <_strtol_l.isra.0+0xd8>
 8002d1c:	2322      	movs	r3, #34	; 0x22
 8002d1e:	4608      	mov	r0, r1
 8002d20:	f8c8 3000 	str.w	r3, [r8]
 8002d24:	f1ba 0f00 	cmp.w	sl, #0
 8002d28:	d107      	bne.n	8002d3a <_strtol_l.isra.0+0xe4>
 8002d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2e:	b106      	cbz	r6, 8002d32 <_strtol_l.isra.0+0xdc>
 8002d30:	4240      	negs	r0, r0
 8002d32:	f1ba 0f00 	cmp.w	sl, #0
 8002d36:	d00c      	beq.n	8002d52 <_strtol_l.isra.0+0xfc>
 8002d38:	b122      	cbz	r2, 8002d44 <_strtol_l.isra.0+0xee>
 8002d3a:	3d01      	subs	r5, #1
 8002d3c:	f8ca 5000 	str.w	r5, [sl]
 8002d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d44:	464d      	mov	r5, r9
 8002d46:	e7f9      	b.n	8002d3c <_strtol_l.isra.0+0xe6>
 8002d48:	2430      	movs	r4, #48	; 0x30
 8002d4a:	2f00      	cmp	r7, #0
 8002d4c:	d1b3      	bne.n	8002cb6 <_strtol_l.isra.0+0x60>
 8002d4e:	2708      	movs	r7, #8
 8002d50:	e7b1      	b.n	8002cb6 <_strtol_l.isra.0+0x60>
 8002d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002d58 <_strtol_r>:
 8002d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d5a:	4c06      	ldr	r4, [pc, #24]	; (8002d74 <_strtol_r+0x1c>)
 8002d5c:	4d06      	ldr	r5, [pc, #24]	; (8002d78 <_strtol_r+0x20>)
 8002d5e:	6824      	ldr	r4, [r4, #0]
 8002d60:	6a24      	ldr	r4, [r4, #32]
 8002d62:	2c00      	cmp	r4, #0
 8002d64:	bf08      	it	eq
 8002d66:	462c      	moveq	r4, r5
 8002d68:	9400      	str	r4, [sp, #0]
 8002d6a:	f7ff ff74 	bl	8002c56 <_strtol_l.isra.0>
 8002d6e:	b003      	add	sp, #12
 8002d70:	bd30      	pop	{r4, r5, pc}
 8002d72:	bf00      	nop
 8002d74:	20000054 	.word	0x20000054
 8002d78:	200000bc 	.word	0x200000bc

08002d7c <__submore>:
 8002d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d80:	460c      	mov	r4, r1
 8002d82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d88:	4299      	cmp	r1, r3
 8002d8a:	d11c      	bne.n	8002dc6 <__submore+0x4a>
 8002d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d90:	f7fe ff6c 	bl	8001c6c <_malloc_r>
 8002d94:	b918      	cbnz	r0, 8002d9e <__submore+0x22>
 8002d96:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002da4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002da8:	6360      	str	r0, [r4, #52]	; 0x34
 8002daa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002dae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002db2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002db6:	7043      	strb	r3, [r0, #1]
 8002db8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002dbc:	7003      	strb	r3, [r0, #0]
 8002dbe:	6020      	str	r0, [r4, #0]
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dc6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002dc8:	0077      	lsls	r7, r6, #1
 8002dca:	463a      	mov	r2, r7
 8002dcc:	f000 f835 	bl	8002e3a <_realloc_r>
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d0df      	beq.n	8002d96 <__submore+0x1a>
 8002dd6:	eb00 0806 	add.w	r8, r0, r6
 8002dda:	4601      	mov	r1, r0
 8002ddc:	4632      	mov	r2, r6
 8002dde:	4640      	mov	r0, r8
 8002de0:	f000 f820 	bl	8002e24 <memcpy>
 8002de4:	f8c4 8000 	str.w	r8, [r4]
 8002de8:	6365      	str	r5, [r4, #52]	; 0x34
 8002dea:	63a7      	str	r7, [r4, #56]	; 0x38
 8002dec:	e7e8      	b.n	8002dc0 <__submore+0x44>

08002dee <__ascii_wctomb>:
 8002dee:	b149      	cbz	r1, 8002e04 <__ascii_wctomb+0x16>
 8002df0:	2aff      	cmp	r2, #255	; 0xff
 8002df2:	bf8b      	itete	hi
 8002df4:	238a      	movhi	r3, #138	; 0x8a
 8002df6:	700a      	strbls	r2, [r1, #0]
 8002df8:	6003      	strhi	r3, [r0, #0]
 8002dfa:	2001      	movls	r0, #1
 8002dfc:	bf88      	it	hi
 8002dfe:	f04f 30ff 	movhi.w	r0, #4294967295
 8002e02:	4770      	bx	lr
 8002e04:	4608      	mov	r0, r1
 8002e06:	4770      	bx	lr

08002e08 <memchr>:
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	b2c9      	uxtb	r1, r1
 8002e0c:	4402      	add	r2, r0
 8002e0e:	4290      	cmp	r0, r2
 8002e10:	4603      	mov	r3, r0
 8002e12:	d101      	bne.n	8002e18 <memchr+0x10>
 8002e14:	2000      	movs	r0, #0
 8002e16:	bd10      	pop	{r4, pc}
 8002e18:	781c      	ldrb	r4, [r3, #0]
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	428c      	cmp	r4, r1
 8002e1e:	d1f6      	bne.n	8002e0e <memchr+0x6>
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <memcpy>:
 8002e24:	b510      	push	{r4, lr}
 8002e26:	1e43      	subs	r3, r0, #1
 8002e28:	440a      	add	r2, r1
 8002e2a:	4291      	cmp	r1, r2
 8002e2c:	d100      	bne.n	8002e30 <memcpy+0xc>
 8002e2e:	bd10      	pop	{r4, pc}
 8002e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e38:	e7f7      	b.n	8002e2a <memcpy+0x6>

08002e3a <_realloc_r>:
 8002e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3c:	4607      	mov	r7, r0
 8002e3e:	4614      	mov	r4, r2
 8002e40:	460e      	mov	r6, r1
 8002e42:	b921      	cbnz	r1, 8002e4e <_realloc_r+0x14>
 8002e44:	4611      	mov	r1, r2
 8002e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e4a:	f7fe bf0f 	b.w	8001c6c <_malloc_r>
 8002e4e:	b922      	cbnz	r2, 8002e5a <_realloc_r+0x20>
 8002e50:	f7fe fec0 	bl	8001bd4 <_free_r>
 8002e54:	4625      	mov	r5, r4
 8002e56:	4628      	mov	r0, r5
 8002e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e5a:	f000 f814 	bl	8002e86 <_malloc_usable_size_r>
 8002e5e:	4284      	cmp	r4, r0
 8002e60:	d90f      	bls.n	8002e82 <_realloc_r+0x48>
 8002e62:	4621      	mov	r1, r4
 8002e64:	4638      	mov	r0, r7
 8002e66:	f7fe ff01 	bl	8001c6c <_malloc_r>
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d0f2      	beq.n	8002e56 <_realloc_r+0x1c>
 8002e70:	4631      	mov	r1, r6
 8002e72:	4622      	mov	r2, r4
 8002e74:	f7ff ffd6 	bl	8002e24 <memcpy>
 8002e78:	4631      	mov	r1, r6
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f7fe feaa 	bl	8001bd4 <_free_r>
 8002e80:	e7e9      	b.n	8002e56 <_realloc_r+0x1c>
 8002e82:	4635      	mov	r5, r6
 8002e84:	e7e7      	b.n	8002e56 <_realloc_r+0x1c>

08002e86 <_malloc_usable_size_r>:
 8002e86:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	f1a0 0004 	sub.w	r0, r0, #4
 8002e90:	bfbc      	itt	lt
 8002e92:	580b      	ldrlt	r3, [r1, r0]
 8002e94:	18c0      	addlt	r0, r0, r3
 8002e96:	4770      	bx	lr

08002e98 <_gettimeofday>:
 8002e98:	2258      	movs	r2, #88	; 0x58
 8002e9a:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <_gettimeofday+0xc>)
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	4770      	bx	lr
 8002ea4:	200002d8 	.word	0x200002d8

08002ea8 <_sbrk>:
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <_sbrk+0x14>)
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	b909      	cbnz	r1, 8002eb4 <_sbrk+0xc>
 8002eb0:	4903      	ldr	r1, [pc, #12]	; (8002ec0 <_sbrk+0x18>)
 8002eb2:	6019      	str	r1, [r3, #0]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	4402      	add	r2, r0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	4770      	bx	lr
 8002ebc:	2000027c 	.word	0x2000027c
 8002ec0:	200002dc 	.word	0x200002dc

08002ec4 <_init>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr

08002ed0 <_fini>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr
